(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const n of document.querySelectorAll('link[rel="modulepreload"]'))s(n);new MutationObserver(n=>{for(const i of n)if(i.type==="childList")for(const o of i.addedNodes)o.tagName==="LINK"&&o.rel==="modulepreload"&&s(o)}).observe(document,{childList:!0,subtree:!0});function a(n){const i={};return n.integrity&&(i.integrity=n.integrity),n.referrerPolicy&&(i.referrerPolicy=n.referrerPolicy),n.crossOrigin==="use-credentials"?i.credentials="include":n.crossOrigin==="anonymous"?i.credentials="omit":i.credentials="same-origin",i}function s(n){if(n.ep)return;n.ep=!0;const i=a(n);fetch(n.href,i)}})();const W={SOUL_RICHES:{id:"SOUL_RICHES",name:"Richesses d'Outre-Tombe",description:"Commencez chaque partie avec {value} Or de plus. Prochain niveau : +{nextValue} Or.",baseCost:5,costScale:2.5,maxLevel:10,effect:e=>e*500,formatValue:e=>Math.floor(e)},GOLDEN_ECHO:{id:"GOLDEN_ECHO",name:"Écho Doré",description:"Augmente tous les gains d'Or de {value}%. Prochain niveau : +{nextValue}%.",baseCost:10,costScale:1.8,maxLevel:20,effect:e=>e*5,formatValue:e=>e},ETERNAL_STRENGTH:{id:"ETERNAL_STRENGTH",name:"Force Éternelle",description:"Augmente les dégâts de base de tous les héros de {value}%. Prochain niveau : +{nextValue}%.",baseCost:15,costScale:2,maxLevel:25,effect:e=>e*2,formatValue:e=>e},LEARNED_SOUL:{id:"LEARNED_SOUL",name:"Savoir Ancestral",description:"Augmente tous les gains d'XP de {value}%. Prochain niveau : +{nextValue}%.",baseCost:20,costScale:1.9,maxLevel:20,effect:e=>e*5,formatValue:e=>e},STARTING_LEVEL:{id:"STARTING_LEVEL",name:"Héritage de l'Aventurier",description:"Vos héros commencent au niveau {value}. Prochain niveau : +1.",baseCost:100,costScale:5,maxLevel:5,effect:e=>e+1,formatValue:e=>e},SHOP_CAPACITY:{id:"SHOP_CAPACITY",name:"Capacité du Marchand",description:"Augmente le nombre maximum d'objets proposés par le Marchand de {value}. Prochain niveau : +{nextValue}.",baseCost:25,costScale:2,maxLevel:5,effect:e=>e*1,formatValue:e=>e}},ce={ADVENTURER_GROG:{id:"ADVENTURER_GROG",name:"Grog de l'Aventurier",description:"Un remontant populaire qui semble attirer la bonne fortune et les poches bien remplies.",icon:"💰",bonus:{stat:"goldFind",value:20},duration:{type:"timed",value:600},baseCost:250},BERSERKER_MEAD:{id:"BERSERKER_MEAD",name:"Hydromel du Berserker",description:"Une boisson puissante qui éveille la fureur du combattant.",icon:"⚔️",bonus:{stat:"damagePercent",value:15},duration:{type:"timed",value:300},baseCost:400},DWARVEN_STOUT:{id:"DWARVEN_STOUT",name:"Bière Robuste du Nain",description:"Aussi solide que la montagne. Rend la peau dure comme la pierre.",icon:"🛡️",bonus:{stat:"armorPercent",value:25},duration:{type:"timed",value:300},baseCost:350},SCHOLAR_WINE:{id:"SCHOLAR_WINE",name:"Vin Épicé des Érudits",description:"Aiguise l'esprit et accélère l'apprentissage.",icon:"🎓",bonus:{stat:"xpGainPercent",value:15},duration:{type:"timed",value:900},baseCost:300},TRAVELER_STEW:{id:"TRAVELER_STEW",name:"Ragoût du Voyageur",description:"Un plat copieux qui renforce le corps pour les épreuves à venir.",icon:"🍲",bonus:{stat:"endurancePercent",value:10},duration:{type:"encounter",value:20},baseCost:500},ELVEN_WAYBREAD:{id:"ELVEN_WAYBREAD",name:"Pain de Route Elfique",description:"Léger mais nourrissant, il décuple l'agilité et la précision.",icon:"🍞",bonus:{stat:"dexterityPercent",value:10},duration:{type:"encounter",value:20},baseCost:500}},me={getBonusesFromEquipment(e){const t={strength:0,dexterity:0,intelligence:0,endurance:0,damagePercent:0,attackSpeedPercent:0,flatPhysicalDamage:0,flatMagicalDamage:0,maxHp:0,hpPercent:0,armor:0,critChance:0,critDamage:0,hpRegen:0,goldFind:0,lifeSteal:0,thorns:0,healPower:0,healPercent:0,buffPotency:0,buffDuration:0,riposteChance:0,shieldPotency:0,beamChargeRate:0,armorPercent:0,endurancePercent:0,dexterityPercent:0};for(const a in e){const s=e[a];if(s)for(const[n,i]of Object.entries(s.stats))t[n]!==void 0&&(t[n]+=i)}return t},calculateFinalStats(e,t,a=e.equipment){const s=this.getBonusesFromEquipment(a);e.hasUniqueEffect("MADMANS_MASK")&&(s.critDamage+=30,s.critChance-=10),e.hasUniqueEffect("DRUNKARDS_RING")&&(s.strength+=20,s.attackSpeedPercent-=15,s.critChance-=10),e.hasUniqueEffect("ANCHOR_LEGGINGS")&&(s.armor*=1.5,s.hpPercent+=25,s.attackSpeedPercent-=30);const n=e.buffs.getBonuses();for(const x in n)s[x]!==void 0&&(s[x]+=n[x]);if(t.activeConsumables&&t.activeConsumables.length>0)for(const x of t.activeConsumables){const k=ce[x.id];k&&k.bonus&&(s[k.bonus.stat]!==void 0?s[k.bonus.stat]+=k.bonus.value:s[k.bonus.stat]=k.bonus.value)}const i=t.globalAuraBonuses||{};s.attackSpeedPercent+=i.attackSpeedPercent||0,s.armor+=i.armor||0,s.critDamage+=i.critDamage||0,s.riposteChance+=i.riposteChance||0,e.hasUniqueEffect("CLEAR_MIND_DIADEM")&&(s.critChance+=Math.floor(s.intelligence/10)),e.hasUniqueEffect("SPIRIT_FORCE_ROBE")&&(s.healPower+=(e.definition.baseStrength+(s.strength||0))*.25);const o={};let r=0;e.hasUniqueEffect("ARCHIVIST_SEAL")&&(r=Math.floor(e.level/5));let l=e.definition.baseEndurance+(e.level-1)*e.definition.endurancePerLevel+(s.endurance||0)+r;l*=1+(i.endurancePercent||0)/100+(s.endurancePercent||0)/100,o.endurance=l,o.strength=e.definition.baseStrength+(e.level-1)*e.definition.strengthPerLevel+(s.strength||0)+r;let d=e.definition.baseDexterity+(e.level-1)*e.definition.dexterityPerLevel+(s.dexterity||0)+r;if(d*=1+(s.dexterityPercent||0)/100,o.dexterity=d,o.intelligence=e.definition.baseIntelligence+(e.level-1)*e.definition.intelligencePerLevel+(s.intelligence||0)+r,e.hasUniqueEffect("BALANCE_BOOTS")){const{strengthPerLevel:x,dexterityPerLevel:k,intelligencePerLevel:$}=e.definition;x>=k&&x>=$?o.strength+=(o.dexterity+o.intelligence)*.15:k>=x&&k>=$?o.dexterity+=(o.strength+o.intelligence)*.15:o.intelligence+=(o.strength+o.dexterity)*.15}let u=e.definition.baseDamage;e.definition.damageType==="physical"?u+=o.strength*2:u+=o.intelligence*2,o.maxHp=e.baseMaxHp+o.endurance*20;let h=e.baseArmor+o.strength*.5+o.endurance*.25;h*=1+(s.armorPercent||0)/100,o.armor=h,o.hpRegen=e.baseHpRegen+o.endurance*.1;const p=e.definition.damageType==="physical"?s.flatPhysicalDamage||0:s.flatMagicalDamage||0;o.damage=(u+p)*(1+(s.damagePercent||0)/100);const f=e.definition.baseAttackSpeed;o.attackSpeed=f*(1+(s.attackSpeedPercent||0)/100),o.maxHp=Math.ceil((o.maxHp+(s.maxHp||0))*(1+(s.hpPercent||0)/100)),o.armor+=s.armor||0,e.hasUniqueEffect("MOUNTAIN_GREAVES")&&(o.armor+=o.maxHp*.05),o.hpRegen+=s.hpRegen||0;let _=e.baseCritChance+(s.critChance||0)/100,A=0;if(_>1?(A=_-1,o.critChance=1):o.critChance=_,o.critDamage=e.baseCritDamage+(s.critDamage||0)/100+A*.5,o.goldFind=e.baseGoldFind+(s.goldFind||0)/100,o.lifeSteal=(s.lifeSteal||0)/100,o.thorns=s.thorns||0,o.healPower=s.healPower||0,o.healPercent=s.healPercent||0,o.shieldPotency=s.shieldPotency||0,o.beamChargeRate=s.beamChargeRate||0,o.damageReduction=(i.damageReduction||0)/100,o.healEffectiveness=(i.healEffectiveness||0)/100,t&&t.prestigeUpgrades){const x=t.prestigeUpgrades.ETERNAL_STRENGTH;if(x){const k=W.ETERNAL_STRENGTH.effect(x);o.damage*=1+k/100}}return e.hasUniqueEffect("GLASS_ARMOR")&&(o.damage*=1.25),e.hasUniqueEffect("BLOODLETTER_AXE")&&(o.damage+=o.hpRegen*1),e.hasUniqueEffect("VITAL_TRANSMUTATION_NECKLACE")&&(o.lifeSteal+=o.critChance*.25),o}};class Ja{constructor(t){this.hero=t,this.activeBuffs=[],this.activeShields=[],this.shieldHp=0}update(t){let a=!1;for(let n=this.activeBuffs.length-1;n>=0;n--){const i=this.activeBuffs[n];i.duration-=t,i.duration<=0&&(this.activeBuffs.splice(n,1),a=!0)}let s=!1;for(let n=this.activeShields.length-1;n>=0;n--)this.activeShields[n].duration-=t,this.activeShields[n].duration<=0&&(this.activeShields.splice(n,1),s=!0);return s&&this.recalculateShieldHp(),a||s}addBuff(t){this.activeBuffs.push(t),this.hero.history.logEvent(`Reçoit l'effet '${t.name}'`,"buff")}applyShield(t,a,s){const n=t*(1+this.hero.shieldPotency/100);this.activeShields.push({value:n,duration:a}),this.recalculateShieldHp(),s&&s.emit("shield_applied",{hero:this.hero,amount:n})}recalculateShieldHp(){this.shieldHp=this.activeShields.reduce((t,a)=>t+a.value,0)}getBonuses(){const t={};return this.activeBuffs.forEach(a=>{t[a.stat]===void 0&&(t[a.stat]=0),t[a.stat]+=a.value}),t}absorbDamage(t){if(this.shieldHp<=0)return t;const a=Math.min(this.shieldHp,t);this.shieldHp-=a;const s=t-a;return this.hero.history.recordShieldAbsorption(a),this.recalculateShieldHp(),s}getSaveData(){return{activeBuffs:this.activeBuffs}}loadSaveData(t){t&&(this.activeBuffs=t.activeBuffs||[])}}const P=60;class Qa{constructor(t){this.hero=t,this.log=[],this.damageDealt=Array(P).fill(0),this.damageDealtBreakdown={normal:Array(P).fill(0),crit:Array(P).fill(0),riposte:Array(P).fill(0),thorns:Array(P).fill(0),beam:Array(P).fill(0)},this.damageTaken=Array(P).fill(0),this.damageMitigated=Array(P).fill(0),this.damageAvoided=Array(P).fill(0),this.healingDone=Array(P).fill(0),this.healingReceived=Array(P).fill(0),this.lifeStealHealing=Array(P).fill(0),this.hpHistory=Array(P).fill(0),this.shieldAbsorption=Array(P).fill(0),this.interceptedDamage=Array(P).fill(0),this.shieldsGiven=Array(P).fill(0),this.historyBucket=this.resetBucket()}resetBucket(){return{damageDealt:{normal:0,crit:0,riposte:0,thorns:0,beam:0},damageTaken:0,damageMitigated:0,damageAvoided:0,healingDone:0,healingReceived:0,lifeStealHealing:0,shieldAbsorption:0,interceptedDamage:0,shieldsGiven:0}}logEvent(t,a){this.log.push({message:t,type:a,timestamp:Date.now()}),this.log.length>50&&this.log.shift()}recordDamageDealt(t,a="normal"){this.historyBucket.damageDealt[a]+=t}recordDamageTaken(t){this.historyBucket.damageTaken+=t}recordDamageMitigated(t){this.historyBucket.damageMitigated+=t}recordDamageAvoided(t){this.historyBucket.damageAvoided+=t}recordHealingDone(t){this.historyBucket.healingDone+=t}recordHealingReceived(t){this.historyBucket.healingReceived+=t}recordLifeStealHealing(t){this.historyBucket.lifeStealHealing+=t}recordShieldAbsorption(t){this.historyBucket.shieldAbsorption+=t}recordInterceptedDamage(t){this.historyBucket.interceptedDamage+=t}recordShieldsGiven(t){this.historyBucket.shieldsGiven+=t}collect(){const t=Object.values(this.historyBucket.damageDealt).reduce((a,s)=>a+s,0);this.damageDealt.shift(),this.damageDealt.push(t);for(const a in this.historyBucket.damageDealt)this.damageDealtBreakdown[a]&&(this.damageDealtBreakdown[a].shift(),this.damageDealtBreakdown[a].push(this.historyBucket.damageDealt[a]));this.damageTaken.shift(),this.damageTaken.push(this.historyBucket.damageTaken),this.damageMitigated.shift(),this.damageMitigated.push(this.historyBucket.damageMitigated),this.damageAvoided.shift(),this.damageAvoided.push(this.historyBucket.damageAvoided),this.shieldAbsorption.shift(),this.shieldAbsorption.push(this.historyBucket.shieldAbsorption),this.interceptedDamage.shift(),this.interceptedDamage.push(this.historyBucket.interceptedDamage),this.healingDone.shift(),this.healingDone.push(this.historyBucket.healingDone),this.healingReceived.shift(),this.healingReceived.push(this.historyBucket.healingReceived),this.lifeStealHealing.shift(),this.lifeStealHealing.push(this.historyBucket.lifeStealHealing),this.hpHistory.shift(),this.hpHistory.push(this.hero.hp),this.shieldsGiven.shift(),this.shieldsGiven.push(this.historyBucket.shieldsGiven),this.historyBucket=this.resetBucket()}}const Za=2;class ge{constructor(t){this.id=t.id,this.name=t.name,this.definition=t,this.status="fighting",this.level=1,this.xp=0,this.xpToNextLevel=100,this.attackTimer=0,this.attackCounter=0,this.hp=0,this.equipment={arme:null,torse:null,tete:null,jambes:null,mains:null,pieds:null,amulette:null,anneau1:null,anneau2:null,bibelot:null},this.buffs=new Ja(this),this.history=new Qa(this),this.baseMaxHp=50,this.baseArmor=0,this.baseCritChance=.05,this.baseCritDamage=1.5,this.baseHpRegen=1,this.baseGoldFind=0,this._statsCache={}}initialize(t){this.recalculateStats(t),this.hp=this.maxHp,this.history.hpHistory.fill(this.hp)}update(t,a,s){this.buffs.update(a)&&(this.recalculateStats(t),t.ui.heroesNeedUpdate=!0),this.regenerate(this.hpRegen*a,"regen",s,t).statusChanged&&(t.ui.heroesNeedUpdate=!0),this.status==="recovering"&&this.regenerate(Za*a,"regen",s,t).statusChanged&&(t.ui.heroesNeedUpdate=!0)}recalculateStats(t){this._statsCache=me.calculateFinalStats(this,t)}takeDamage(t){if(this.status!=="fighting")return{damageTaken:0,statusChanged:!1};let a=t*(1-this.damageReduction);if(this.hasUniqueEffect("GLASS_ARMOR")&&(a*=1.25),a=this.buffs.absorbDamage(a),a<=0)return{damageTaken:0,statusChanged:!1};this.history.recordDamageTaken(a),this.hp=Math.max(0,this.hp-a);const s=this.status;return this.hp===0&&(this.status="recovering",this.history.logEvent("Est vaincu.","damage")),{damageTaken:a,statusChanged:s!==this.status}}regenerate(t,a="regen",s,n){if(this.hp>=this.maxHp)return{healedAmount:0,statusChanged:!1};const i=this.hp,o=this.status,r=(1+this.healPercent/100)*(1+this.healEffectiveness),l=t*r;this.hp=Math.min(this.maxHp,this.hp+l),this.status==="recovering"&&this.hp>=this.maxHp/2&&(this.status="fighting");const d=this.hp-i;return d>0&&(a==="lifesteal"?(this.history.recordLifeStealHealing(d),s&&s.emit("lifesteal_triggered",{hero:this,amount:d})):(this.history.recordHealingReceived(d),s&&a==="heal"&&(n.damageBuckets[this.id]||(n.damageBuckets[this.id]={damage:0,crit:0,heal:0,timer:.3}),n.damageBuckets[this.id].heal+=d))),{healedAmount:d,statusChanged:o!==this.status}}levelUp(t,a,s=!0){this.level++,this.xp-=this.xpToNextLevel,this.xpToNextLevel=Math.floor(this.xpToNextLevel*1.5),this.recalculateStats(t),this.hp=this.maxHp,this.history.logEvent(`Niveau ${this.level} atteint !`,"buff"),s&&a.emit("hero_leveled_up",{heroId:this.id})}addXp(t,a,s){for(this.xp+=t;this.xp>=this.xpToNextLevel;)this.levelUp(s,a)}equipItem(t,a,s){!a||!s||(this.equipment[s]=a,this.recalculateStats(t),this.hp>this.maxHp&&(this.hp=this.maxHp))}unequipItem(t,a){if(!this.equipment[a])return null;const s=this.equipment[a];return this.equipment[a]=null,this.recalculateStats(t),this.hp>this.maxHp&&(this.hp=this.maxHp),s}calculateStatChanges(t,a){const s=this.getAllStats();let n=a.baseDefinition.slot;n==="ring"&&(n="anneau1");const i={...this.equipment,[n]:a},o=me.calculateFinalStats(this,t,i),r={};for(const l in o){const d=(o[l]||0)-(s[l]||0);Math.abs(d)>1e-4&&(r[l]=d)}return r}getPowerScore(t,a=null){const s=a||this.getAllStats(),n=s.damage||0,i=s.critDamage||1,o=s.critChance||0,r=s.attackSpeed||0,d=(n*(1-o)+n*i*o)*r,u=200*Math.pow(1.05,(t.dungeonFloor||1)-1),h=(s.armor||0)/((s.armor||0)+u),p=(s.maxHp||1)/(1-Math.max(0,Math.min(h,.95))),f=(s.hpRegen||0)+d*(s.lifeSteal||0),_=(s.thorns||0)*10,A=p+f*10+_;let x=d*A;if(this.id==="priest"){const k=this.finalHealPower||0,$=(this.finalBuffPotency||0)*(this.finalBuffDuration||0);x=A*5+k*500+$}else if(this.id==="protector"){const k=(s.shieldPotency||0)*200,$=(s.beamChargeRate||0)*150;x=A*8+k+$}return x/1e3}getTheoreticalDPS(){const t=this.getAllStats(),a=t.damage||0,s=t.attackSpeed||0,n=t.critChance||0,i=t.critDamage||1,o=1-n;return s*(o*a+n*a*i)}hasUniqueEffect(t){for(const a in this.equipment)if(this.equipment[a]&&this.equipment[a].baseDefinition.uniqueEffect===t)return!0;return!1}isFighting(){return this.status==="fighting"}get strength(){return this._statsCache.strength||0}get dexterity(){return this._statsCache.dexterity||0}get intelligence(){return this._statsCache.intelligence||0}get endurance(){return this._statsCache.endurance||0}get damage(){return this._statsCache.damage||0}get attackSpeed(){return this._statsCache.attackSpeed||0}get maxHp(){return this._statsCache.maxHp||0}get armor(){return this._statsCache.armor||0}get critChance(){return this._statsCache.critChance||0}get critDamage(){return this._statsCache.critDamage||0}get hpRegen(){return this._statsCache.hpRegen||0}get goldFind(){return this._statsCache.goldFind||0}get lifeSteal(){return this._statsCache.lifeSteal||0}get thorns(){return this._statsCache.thorns||0}get shieldPotency(){return this._statsCache.shieldPotency||0}get beamChargeRate(){return this._statsCache.beamChargeRate||0}get healPercent(){return this._statsCache.healPercent||0}get damageReduction(){return this._statsCache.damageReduction||0}get healEffectiveness(){return this._statsCache.healEffectiveness||0}getAllStats(){return{...this._statsCache}}}const Lt=[{stat:"damagePercent",value:10,name:"Puissance"},{stat:"armor",value:50,name:"Protection"},{stat:"critChance",value:5,name:"Précision"}];class Ue extends ge{constructor(t){super(t),this.buffCooldown=0}update(t,a,s){super.update(t,a,s),this.isFighting()&&(this.performHeal(t,a),this.buffCooldown-=a,this.buffCooldown<=0&&this.finalBuffChance>0&&(this.applyBuff(t),this.buffCooldown=1/this.finalBuffChance))}performHeal(t,a){let s=null,n=1;if(t.heroes.forEach(i=>{if(i.isFighting()){const o=i.hp/i.maxHp;o<n&&(n=o,s=i)}}),s){const i=(this.finalHealPower||0)*a;if(i>0){const o=s.regenerate(i,"heal",t.eventBus,t),r=o.healedAmount;if(r>0&&(this.history.recordHealingDone(r),this.history.logEvent(`Soigne ${s.name} de ${Math.round(r)} HP.`,"heal"),this.hasUniqueEffect("SOUL_SIPHON_WAND")&&t.activeMonster&&t.activeMonster.isAlive())){const l=r*.3;t.activeMonster.takeDamage(l),this.history.recordDamageDealt(l,"normal"),t.damageBuckets.monster||(t.damageBuckets.monster={damage:0,crit:0,heal:0,timer:.3}),t.damageBuckets.monster.damage+=l}o.statusChanged&&(t.ui.heroesNeedUpdate=!0)}}}applyBuff(t){const a=t.heroes.filter(l=>l.isFighting());if(a.length===0)return;const s=a[Math.floor(Math.random()*a.length)],n=Lt[Math.floor(Math.random()*Lt.length)],i=n.value*(1+(this.finalBuffPotency||0)/100),o=this.definition.baseBuffDuration*(1+(this.finalBuffDuration||0)/100),r={id:`buff_${Date.now()}_${Math.random()}`,name:n.name,stat:n.stat,value:i,duration:o,maxDuration:o};s.buffs.addBuff(r),s.recalculateStats(t)}recalculateStats(t,a=this.equipment){const s=me.calculateFinalStats(this,t,a),n=me.getBonusesFromEquipment(a);s.finalHealPower=(this.definition.baseHealPerSecond+(n.healPower||0))*(1+(n.healPercent||0)/100),s.finalBuffChance=this.definition.baseBuffChance,s.finalBuffPotency=n.buffPotency||0,s.finalBuffDuration=this.definition.baseBuffDuration*(1+(n.buffDuration||0)/100),this._statsCache=s}get finalHealPower(){return this._statsCache.finalHealPower||0}get finalBuffChance(){return this._statsCache.finalBuffChance||0}get finalBuffPotency(){return this._statsCache.finalBuffPotency||0}get finalBuffDuration(){return this._statsCache.finalBuffDuration||0}}const Ze={DODGE:1500,PARRY:1300,COUNTER_ATTACK:100},et={DODGE:1,PARRY:2,COUNTER_ATTACK:3};class Se extends ge{constructor(t){super(t),this.baseRiposteChance=t.baseRiposteChance||.05}get riposteChance(){return this._statsCache.riposteChance||0}_calculateRiposteOutcomeProbabilities(t){const a=Ze.DODGE+t*et.DODGE,s=Ze.PARRY+t*et.PARRY,n=Ze.COUNTER_ATTACK+t*et.COUNTER_ATTACK,i=a+s+n;return{DODGE:a/i,PARRY:s/i,COUNTER_ATTACK:n/i}}recalculateStats(t,a=this.equipment){const s=me.calculateFinalStats(this,t,a),i=me.getBonusesFromEquipment(a).riposteChance||0,o=this.baseRiposteChance*100+i;s.riposteChance=o/(o+100),this._statsCache=s}takeDamage(t,a,s){if(!this.isFighting())return super.takeDamage(t);const n=this._calculateRiposteOutcomeProbabilities(this.riposteChance*100);if(Math.random()<this.riposteChance){const o=Math.random(),r=s||t;return o<n.COUNTER_ATTACK?(a.emit("flavor_text_triggered",{text:"CONTRE !",targetId:this.id,type:"defense-text"}),this.history.logEvent(`Contre-attaque ! (${Math.round(this.damage)} dégâts)`,"riposte"),this.history.recordDamageAvoided(r),{damageTaken:0,counterAttackDmg:this.damage,parryDmg:0}):o<n.COUNTER_ATTACK+n.PARRY?(a.emit("flavor_text_triggered",{text:"PARADE !",targetId:this.id,type:"defense-text"}),this.history.logEvent(`Parade ! (${Math.round(t*.5)} dégâts renvoyés)`,"riposte"),this.history.recordDamageAvoided(r),{damageTaken:0,counterAttackDmg:0,parryDmg:t*.5}):(a.emit("flavor_text_triggered",{text:"ESQUIVE !",targetId:this.id,type:"defense-text"}),this.history.logEvent(`Esquive ! (${Math.round(r)} dégâts évités)`,"riposte"),this.history.recordDamageAvoided(r),{damageTaken:0,counterAttackDmg:0,parryDmg:0})}const i=super.takeDamage(t);return{damageTaken:i.damageTaken,counterAttackDmg:0,parryDmg:0,statusChanged:i.statusChanged}}}class oe extends ge{constructor(t){super(t),this.aoeShieldTimer=this.definition.aoeShieldCooldown,this.interceptionTimer=0,this.attackCycleInstance=0,this.attackCycleCooldown=0,this.dpsReferenceValueA=0,this.beamInstanceTimer=0}update(t,a,s){if(super.update(t,a,s),!!this.isFighting()){if(this.aoeShieldTimer-=a,this.aoeShieldTimer<=0){this.aoeShieldTimer=this.definition.aoeShieldCooldown;const n=this.definition.aoeShieldValue+this.intelligence*.5;t.heroes.forEach(i=>{i.isFighting()&&i.buffs.applyShield(n,5,s)}),this.history.logEvent("Lance 'Don de Vitalité' sur le groupe.","buff"),this.history.recordShieldsGiven(n*t.heroes.filter(i=>i.isFighting()).length),t.ui.heroesNeedUpdate=!0}this.interceptionTimer>0&&(this.interceptionTimer-=a)}}takeDamage(t){const a=super.takeDamage(t);return a.statusChanged&&this.status==="recovering"&&(this.attackCycleInstance=0,this.attackCycleCooldown=0,this.dpsReferenceValueA=0,this.beamInstanceTimer=0),a}}const qt=8,Dt=[{id:"shanty_gold",name:"Gigue du Coffre au Trésor",stat:"goldFind",value:50,duration:15},{id:"shanty_speed",name:"Hurlement de la Tempête",stat:"attackSpeedPercent",value:20,duration:10},{id:"shanty_lifesteal",name:"Ballade du Marin Ivre",stat:"lifeSteal",value:5,duration:12}];class ie extends ge{constructor(t){super(t),this.doubloons=0}addDoubloon(){this.doubloons<qt&&this.doubloons++}update(t,a,s){super.update(t,a,s),this.doubloons>=qt&&this.pillageOrPowder(t,s)}pillageOrPowder(t,a){this.doubloons=0,Math.random()<.5?this.performDamageSkill(t,a):this.performSeaShanty(t,a),t.ui.heroesNeedUpdate=!0}performDamageSkill(t,a){const s=Math.random(),n=t.activeMonster;if(!(!n||!n.isAlive()))if(this.history.logEvent("Déclenche 'Pillage ou Poudre !'","crit"),s<.7){const i=this.damage*1.5;n.takeDamage(i),this.history.recordDamageDealt(i,"crit"),a.emit("notification_requested",{message:`${this.name} tire une volée de mitraille !`,type:"riposte"})}else{const i=this.damage*4;n.takeDamage(i),this.history.recordDamageDealt(i,"crit"),a.emit("notification_requested",{message:`${this.name} tire une Balle en Argent !`,type:"crit"})}}performSeaShanty(t,a){const s=Dt[Math.floor(Math.random()*Dt.length)];this.history.logEvent(`Entonne '${s.name}'`,"buff"),a.emit("notification_requested",{message:`${this.name} chante : ${s.name} !`,type:"success"}),t.heroes.forEach(n=>{if(n.isFighting()){let i=s.value;this.hasUniqueEffect("VETERAN_ACCORDION")&&(i*=1.4),n.buffs.addBuff({id:`${s.id}_${Date.now()}`,name:s.name,stat:s.stat,value:i,duration:s.duration*(this.hasUniqueEffect("VETERAN_ACCORDION")?1.4:1),maxDuration:s.duration*(this.hasUniqueEffect("VETERAN_ACCORDION")?1.4:1)}),n.recalculateStats(t)}})}recalculateStats(t,a=this.equipment){const s=me.calculateFinalStats(this,t,a),n=1e5;let i=1;const o=this.hasUniqueEffect("PIRATE_KING_RING")?.015:.01,r=Math.floor(t.gold/n);i+=r*o,s.damage*=i,this.hasUniqueEffect("DAVY_JONES_CHEST")&&(s.goldFind=(s.goldFind||0)+1),this._statsCache=s}}class ca{constructor(t,a){this.name=t,this.level=a,this.instanceId=crypto.randomUUID(),this.attackTimer=0,this.activeStatusEffects=[]}takeDamage(t){}isAlive(){return!1}}class fe extends ca{constructor(t,a){super(t.name,t.level),this.id=t.id,this.initialCount=a,this.baseDefinition=t,this.hpPerMonster=t.baseHp,this.totalMaxHp=this.hpPerMonster*this.initialCount,this.currentHp=this.totalMaxHp,this.currentCount=this.initialCount}takeDamage(t){this.currentHp=Math.max(0,this.currentHp-t),this.updateCount()}updateCount(){if(!this.isAlive()){this.currentCount=0;return}this.currentCount=Math.ceil(this.currentHp/this.hpPerMonster)}isAlive(){return this.currentHp>0}}class St extends ca{constructor(t,a,s,n,i){super(t,i),this.id="boss",this.maxHp=a,this.currentHp=a,this.damage=s,this.attackSpeed=n,this.auraDamage=this.damage*.2,this.auraTickRate=2,this.auraTimer=0}takeDamage(t){this.currentHp=Math.max(0,this.currentHp-t)}isAlive(){return this.currentHp>0}}const le={strength:{text:"X Force",isPercent:!1},dexterity:{text:"X Dextérité",isPercent:!1},intelligence:{text:"X Intelligence",isPercent:!1},endurance:{text:"X Endurance",isPercent:!1},damagePercent:{text:"X% Dégâts",isPercent:!0},attackSpeedPercent:{text:"X% Vitesse d'Attaque",isPercent:!0},flatPhysicalDamage:{text:"X Dégâts Physiques",isPercent:!1},flatMagicalDamage:{text:"X Dégâts Magiques",isPercent:!1},maxHp:{text:"X PV Max",isPercent:!1},hpPercent:{text:"X% PV Max",isPercent:!0},armor:{text:"X Armure",isPercent:!1},critChance:{text:"X% Chance de Coup Critique",isPercent:!0},critDamage:{text:"X% Dégâts Critiques",isPercent:!0},hpRegen:{text:"X Régénération de PV",isPercent:!1},goldFind:{text:"X% Découverte d'Or",isPercent:!0},lifeSteal:{text:"X% Vol de Vie",isPercent:!0},thorns:{text:"X Épines",isPercent:!1},healPower:{text:"X Puissance des Soins",isPercent:!1},healPercent:{text:"X% Soins prodigués",isPercent:!0},buffPotency:{text:"X% Puissance des Améliorations",isPercent:!0},buffDuration:{text:"X% Durée des Améliorations",isPercent:!0},riposteChance:{text:"X% Chance de Riposte",isPercent:!0},shieldPotency:{text:"X% Puissance de Bouclier",isPercent:!0},beamChargeRate:{text:"X% Vitesse de charge du Rayon",isPercent:!0}},Ke={epeeCourte:{type:"arme",name:"Épée Courte",stat:"flatPhysicalDamage",baseValue:5,possibleAffixes:["strength","dexterity","critChance","critDamage","attackSpeedPercent","lifeSteal"]},hachette:{type:"arme",name:"Hachette",stat:"flatPhysicalDamage",baseValue:7,possibleAffixes:["strength","critDamage","damagePercent","lifeSteal"]},masseEnBois:{type:"arme",name:"Masse en Bois",stat:"flatPhysicalDamage",baseValue:6,possibleAffixes:["strength","endurance","damagePercent"]},batonMagique:{type:"arme",name:"Bâton Magique",stat:"flatMagicalDamage",baseValue:5,subType:"magic_focus",possibleAffixes:["intelligence","hpRegen","healPower","healPercent"]},dagueRapide:{type:"arme",name:"Dague Rapide",stat:"flatPhysicalDamage",baseValue:4,possibleAffixes:["dexterity","attackSpeedPercent","critChance","lifeSteal"]},arcCourt:{type:"arme",name:"Arc Court",stat:"flatPhysicalDamage",baseValue:5,possibleAffixes:["dexterity","critChance","critDamage","attackSpeedPercent"]},casqueEnCuir:{type:"tete",name:"Casque en Cuir",stat:"armor",baseValue:3,possibleAffixes:["dexterity","critChance","hpPercent"]},heaumeEnFer:{type:"tete",name:"Heaume en Fer",stat:"armor",baseValue:5,possibleAffixes:["strength","endurance","maxHp","thorns"]},couronneMagique:{type:"tete",name:"Couronne Magique",stat:"armor",baseValue:2,possibleAffixes:["intelligence","hpRegen","buffPotency"]},armureDeCuir:{type:"torse",name:"Armure de Cuir",stat:"armor",baseValue:8,possibleAffixes:["dexterity","endurance","hpPercent","riposteChance"]},plastronEnFer:{type:"torse",name:"Plastron en Fer",stat:"armor",baseValue:12,possibleAffixes:["strength","endurance","maxHp","thorns","shieldPotency"]},robeDeSorcier:{type:"torse",name:"Robe de Sorcier",stat:"armor",baseValue:5,possibleAffixes:["intelligence","hpRegen","healPercent","buffDuration"]},cotteBarbelee:{type:"torse",name:"Cotte Barbelée",stat:"armor",baseValue:10,implicitStats:{thorns:{base:15,variance:.2}},possibleAffixes:["strength","endurance","maxHp","thorns","damagePercent"]},jambieresEnCuir:{type:"jambes",name:"Jambières en Cuir",stat:"armor",baseValue:6,possibleAffixes:["dexterity","attackSpeedPercent","critChance"]},jambieresEnFer:{type:"jambes",name:"Jambières en Fer",stat:"armor",baseValue:9,possibleAffixes:["strength","endurance","hpPercent","thorns"]},pantalonDeMage:{type:"jambes",name:"Pantalon de Mage",stat:"armor",baseValue:4,possibleAffixes:["intelligence","hpRegen","goldFind"]},gantsEnTissu:{type:"mains",name:"Gants en Tissu",stat:"armor",baseValue:2,possibleAffixes:["intelligence","critChance","healPower"]},ganteletsEnFer:{type:"mains",name:"Gantelets en Fer",stat:"armor",baseValue:4,possibleAffixes:["strength","damagePercent","attackSpeedPercent","lifeSteal","shieldPotency"]},gantsAgiles:{type:"mains",name:"Gants Agiles",stat:"armor",baseValue:3,possibleAffixes:["dexterity","critDamage","attackSpeedPercent","lifeSteal"]},bottesLegeres:{type:"pieds",name:"Bottes Légères",stat:"armor",baseValue:3,possibleAffixes:["dexterity","attackSpeedPercent","riposteChance"]},soleretsEnFer:{type:"pieds",name:"Solerets en Fer",stat:"armor",baseValue:5,possibleAffixes:["strength","endurance","hpPercent","thorns"]},sandalesMagiques:{type:"pieds",name:"Sandales Magiques",stat:"armor",baseValue:2,possibleAffixes:["intelligence","hpRegen","buffDuration"]},amuletteSimple:{type:"amulette",name:"Amulette Simple",stat:"hpRegen",baseValue:1,possibleAffixes:["strength","dexterity","intelligence","endurance","goldFind","lifeSteal","thorns","shieldPotency"]},anneauDeFer:{type:"anneau1",name:"Anneau de Fer",stat:"maxHp",baseValue:10,possibleAffixes:["strength","endurance","hpPercent","thorns"]},anneauDeJade:{type:"anneau2",name:"Anneau de Jade",stat:"hpRegen",baseValue:.5,possibleAffixes:["intelligence","healPower","healPercent","lifeSteal"]},bibelotEnOs:{type:"bibelot",name:"Bibelot en Os",stat:"critChance",baseValue:1,possibleAffixes:["strength","dexterity","critDamage","damagePercent","lifeSteal"]},sceauVampirique:{type:"anneau1",name:"Sceau Vampirique",stat:"maxHp",baseValue:15,implicitStats:{lifeSteal:{base:2,variance:.25}},possibleAffixes:["strength","damagePercent","critDamage","lifeSteal"]},egideProtectrice:{type:"amulette",name:"Égide Protectrice",stat:"armor",baseValue:5,implicitStats:{shieldPotency:{base:10,variance:.2}},possibleAffixes:["endurance","hpPercent","shieldPotency"]},GUARDIAN_ORB:{type:"arme",name:"Orbe de Gardien",stat:"flatMagicalDamage",baseValue:4,subType:"magic_focus",possibleAffixes:["intelligence","endurance","maxHp","hpRegen","shieldPotency","beamChargeRate"]},SCEPTER_OF_HEALING:{type:"arme",name:"Sceptre du Soin",stat:"flatMagicalDamage",baseValue:3,subType:"magic_focus",possibleAffixes:["intelligence","healPower","healPercent","buffPotency","buffDuration","hpRegen"]},ARCANE_FOCUS_WEAPON:{type:"arme",name:"Focus Arcanique",stat:"flatMagicalDamage",baseValue:6,subType:"magic_focus",possibleAffixes:["intelligence","damagePercent","critChance","critDamage","flatMagicalDamage"]},OPPORTUNIST_DAGGER:{name:"Dague de l'Opportuniste",type:"arme",slot:"arme",stat:"critChance",baseValue:5,uniqueEffect:"OPPORTUNIST_DAGGER",possibleAffixes:["dexterity","attackSpeedPercent","critDamage"]},MARTYRS_CHARM:{name:"Charme du Martyr",type:"amulette",slot:"amulette",stat:"healPower",baseValue:20,uniqueEffect:"MARTYRS_CHARM",possibleAffixes:["endurance","hpPercent"]},PISTOLET_A_SILEX:{type:"arme",name:"Pistolet à Silex",stat:"attackSpeedPercent",baseValue:10,subType:"pistolet",possibleAffixes:["dexterity","critChance","attackSpeedPercent","goldFind"]},MOUSQUET_DE_MARINE:{type:"arme",name:"Mousquet de Marine",stat:"flatPhysicalDamage",baseValue:20,subType:"mousquet",possibleAffixes:["dexterity","damagePercent","critDamage"]},TROMBLON_ECARLATE:{type:"arme",name:"Tromblon Écarlate",stat:"damagePercent",baseValue:8,subType:"tromblon",possibleAffixes:["strength","dexterity","critChance","critDamage"]},CACHE_OEIL_DE_CAPITAINE:{type:"tete",name:"Cache-œil de Capitaine",stat:"critChance",baseValue:3,implicitStats:{armor:{base:5,variance:.3}},possibleAffixes:["dexterity","critDamage","goldFind"],classRestriction:["flibustier"]},CROCHET_ACERE:{type:"mains",name:"Crochet Acéré",stat:"flatPhysicalDamage",baseValue:8,implicitStats:{armor:{base:4,variance:.2}},possibleAffixes:["strength","critChance"],classRestriction:["flibustier"]},JAMBE_DE_BOIS_RENFORCEE:{type:"jambes",name:"Jambe de Bois Renforcée",stat:"endurance",baseValue:10,implicitStats:{armor:{base:12,variance:.1}},possibleAffixes:["maxHp","hpPercent","thorns"],classRestriction:["flibustier"]},DOUBLOON_PISTOL:{name:"Le Doublon",type:"arme",slot:"arme",subType:"pistolet",stat:"attackSpeedPercent",baseValue:15,uniqueEffect:"DOUBLOON_PISTOL",possibleAffixes:["dexterity","critChance","goldFind"],classRestriction:["flibustier"]},KRAKEN_MUSKET:{name:"Le Kraken",type:"arme",slot:"arme",subType:"mousquet",stat:"critDamage",baseValue:50,uniqueEffect:"KRAKEN_MUSKET",possibleAffixes:["dexterity","damagePercent"],classRestriction:["flibustier"]},PIRATE_KING_RING:{name:"Bague du Roi des Pirates",type:"anneau1",slot:"anneau1",stat:"goldFind",baseValue:25,uniqueEffect:"PIRATE_KING_RING",possibleAffixes:["dexterity","critDamage","damagePercent"],classRestriction:["flibustier"]},TOAD_VENOM_VIAL:{name:"Fiole du Venin de Crapaud Baveux",type:"bibelot",slot:"bibelot",stat:"intelligence",baseValue:15,uniqueEffect:"TOAD_VENOM_VIAL",possibleAffixes:["dexterity","critChance"],classRestriction:["flibustier"]},VETERAN_ACCORDION:{name:"L'Accordéon du Vétéran",type:"bibelot",slot:"bibelot",stat:"endurance",baseValue:15,uniqueEffect:"VETERAN_ACCORDION",possibleAffixes:["intelligence","hpRegen"],classRestriction:["flibustier"]},DAVY_JONES_CHEST:{name:"Le Coffre de Davy Jones",type:"bibelot",slot:"bibelot",stat:"goldFind",baseValue:100,uniqueEffect:"DAVY_JONES_CHEST",possibleAffixes:["lifeSteal"],classRestriction:["flibustier"]}},es=.8,ts=15;class It{constructor(t,a,s=1){this.instanceId=crypto.randomUUID(),this.baseDefinition=t,this.level=a,this.rarity=this.rollRarity(s),this.upgradeLevel=0,this.reforgedAffixKey=null,this.locked=!1;const n=1+Math.sqrt(Math.max(0,a-1))*es,i=Math.ceil(t.baseValue*n),o=this.generateImplicitStats();this.affixes=this.generateAffixes(),this.name=this.generateName(),this.stats={[t.stat]:i,...o,...this.affixes},this.implicitStatKeys=Object.keys(o);const l={defective:.8,common:1,magic:1.15,rare:1.35,epic:1.6,legendary:1.9,mythic:2.25,artifact:2.75}[this.rarity]||1;if(l!==1)for(const d in this.stats)this.stats[d]=Math.ceil(this.stats[d]*l);this.cost=this.calculateCost()}rollRarity(t){const a=Math.random(),s=Math.log1p(t/10);return a<.001*s?"artifact":a<.005*s?"mythic":a<.02*s?"legendary":a<.1*s?"epic":a<.3?"rare":a<.65?"magic":a<.9?"common":"defective"}generateImplicitStats(){const t={};if(!this.baseDefinition.implicitStats)return t;for(const a in this.baseDefinition.implicitStats){const s=this.baseDefinition.implicitStats[a],n=s.base,i=s.variance,o=1+Math.random()*i*2-i,r=Math.pow(1.06,this.level-1);let l=Math.ceil(n*o*r);t[a]=l}return t}generateAffixes(){const t={};let a=0;switch(this.rarity){case"magic":a=Math.random()<.5?1:2;break;case"rare":a=Math.random()<.5?3:4;break;case"epic":a=Math.random()<.5?4:5;break;case"legendary":a=Math.random()<.5?5:6;break;case"mythic":case"artifact":a=6;break;case"defective":a=Math.random()<.3?1:0;break}const s=[...this.baseDefinition.possibleAffixes||[]],n=this.baseDefinition.possibleMaluses||{};if(this.rarity==="defective"&&Math.random()<.5){a=0;const i=Object.keys(n);if(i.length>0){const o=i[Math.floor(Math.random()*i.length)],r=n[o];let l=(Math.random()*.5+.5)*Math.sqrt(this.level)*(r.magnitude||1);le[o].isPercent?l=parseFloat((l*.5).toFixed(2)):l=Math.ceil(l*2),t[o]=-l}}for(let i=0;i<a&&s.length!==0;i++){const o=Math.floor(Math.random()*s.length),r=s.splice(o,1)[0];let d=(this.rarity==="artifact"?1:Math.random()*.5+.5)*Math.sqrt(this.level);le[r].isPercent?d=parseFloat((d*1).toFixed(2)):d=Math.ceil(d*2),t[r]=d}return t}generateName(){return`[${{defective:"Défectueux ",common:"",magic:"Magique ",rare:"Rare ",epic:"Épique ",legendary:"Légendaire ",mythic:"Mythique ",artifact:"Artéfact : "}[this.rarity]||""}${this.baseDefinition.name}]`}calculateCost(){let t=0;for(const[n,i]of Object.entries(this.stats))i>0&&(t+=i);const a={defective:.5,common:1,magic:2.5,rare:5,epic:10,legendary:25,mythic:60,artifact:150},s=1+this.upgradeLevel*.5;return Math.max(1,Math.ceil(t*ts*a[this.rarity]*s))}}class as{constructor(){this.listeners={}}on(t,a){return this.listeners[t]||(this.listeners[t]=[]),this.listeners[t].push(a),()=>{this.off(t,a)}}off(t,a){this.listeners[t]&&(this.listeners[t]=this.listeners[t].filter(s=>s!==a))}emit(t,a){this.listeners[t]&&this.listeners[t].forEach(s=>{try{s(a)}catch(n){console.error(`Erreur dans un auditeur d'événement (${t}) :`,n)}})}}const C=new as,Oe="dungeonIdleSave",At="dungeonIdlePrestigeSave";function ss(e){try{const t={gold:e.gold,gameStatus:e.gameStatus,dungeonFloor:e.dungeonFloor,encounterIndex:e.encounterIndex,encountersPerFloor:e.encountersPerFloor,ui:{heroCardState:e.ui.heroCardState,shopLockModeActive:e.ui.shopLockModeActive,activeTab:e.ui.activeTab},autosaveTimer:e.autosaveTimer,shopRestockTimer:e.shopRestockTimer,encounterCooldown:e.encounterCooldown,bossUnlockReached:e.bossUnlockReached,bossIsDefeated:e.bossIsDefeated,pendingBossFight:e.pendingBossFight,soulEchos:e.soulEchos,prestigeUpgrades:e.prestigeUpgrades,highestFloorAchieved:e.highestFloorAchieved,duelistUnlockedByPrestige:e.duelistUnlockedByPrestige,highestFloorThisRun:e.highestFloorThisRun,options:e.options,prestigeUnlockConditionMet:e.prestigeUnlockConditionMet,artisanUnlocked:e.artisanUnlocked,tavernUnlocked:e.tavernUnlocked,blacksmithUnlocked:e.blacksmithUnlocked,resources:e.resources,prestigeCount:e.prestigeCount,trophies:e.trophies,activeConsumables:e.activeConsumables,heroes:e.heroes.map(a=>{const s={id:a.id,level:a.level,xp:a.xp,xpToNextLevel:a.xpToNextLevel,status:a.status,equipment:a.equipment,hp:a.hp,buffs:a.buffs.getSaveData()};return a instanceof ie&&(s.doubloons=a.doubloons),s}),heroDefinitionsStatus:Object.fromEntries(Object.entries(e.heroDefinitions).map(([a,s])=>[a,s.status])),inventory:e.inventory,shopItems:e.shopItems,activeMonster:e.activeMonster,tavern:{reputation:e.tavern.reputation,availableContracts:e.tavern.availableContracts,activeContracts:e.tavern.activeContracts,completedContracts:e.tavern.completedContracts,contractCooldowns:e.tavern.contractCooldowns,upgrades:e.tavern.upgrades,specialists:Object.fromEntries(Object.entries(e.tavern.specialists).map(([a,s])=>[a,{status:s.status}]))}};localStorage.setItem(Oe,JSON.stringify(t)),console.log("StorageManager: Sauvegarde normale effectuée.")}catch(t){console.error("Erreur lors de la sauvegarde :",t)}}function ns(e){try{const t={soulEchos:e.soulEchos,prestigeUpgrades:e.prestigeUpgrades,highestFloorAchieved:e.highestFloorAchieved,heroDefinitionsStatus:e.heroDefinitionsStatus,duelistUnlockedByPrestige:e.duelistUnlockedByPrestige,options:e.options,prestigeCount:e.prestigeCount,artisanUnlocked:e.artisanUnlocked,resources:e.resources,prestigeUnlockConditionMet:e.prestigeUnlockConditionMet,tavernUnlocked:e.tavernUnlocked,blacksmithUnlocked:e.blacksmithUnlocked,trophies:e.trophies,tavern:e.tavern};localStorage.setItem(At,JSON.stringify(t)),console.log("StorageManager: Données de prestige sauvegardées."),localStorage.removeItem(Oe),console.log("StorageManager: Sauvegarde normale supprimée.")}catch(t){console.error("Erreur lors de la sauvegarde de prestige :",t)}}function is(){const e=localStorage.getItem(At);if(!e)return console.log("StorageManager: Aucune sauvegarde de prestige trouvée."),null;try{const t=JSON.parse(e);return console.log("StorageManager: Données de prestige chargées."),t.tavern&&(t.tavern.reputation=t.tavern.reputation||0,t.tavern.availableContracts=t.tavern.availableContracts||[],t.tavern.activeContracts=t.tavern.activeContracts||[],t.tavern.completedContracts=t.tavern.completedContracts||[],t.tavern.contractCooldowns=t.tavern.contractCooldowns||{},t.tavern.specialists=t.tavern.specialists||{}),t.options=t.options||{},t}catch(t){return console.error("Erreur lors du chargement des données de prestige :",t),null}}function la(e){if(!e||!e.baseDefinition)return null;const t=new It(e.baseDefinition,e.level);return Object.assign(t,e),t}function os(e,t,a){const s=t[e.id.toUpperCase()];if(!s)return console.warn(`Définition de héros non trouvée pour l'ID: ${e.id}. Ce héros sera ignoré.`),null;let n;switch(e.id){case"priest":n=new Ue(s);break;case"duelist":n=new Se(s);break;case"protector":n=new oe(s);break;case"flibustier":n=new ie(s);break;default:n=new ge(s);break}n.level=e.level,n.xp=e.xp,n.xpToNextLevel=e.xpToNextLevel,n.status=e.status,n.equipment=e.equipment||n.equipment,n instanceof ie&&e.doubloons!==void 0&&(n.doubloons=e.doubloons),n.buffs.loadSaveData(e.buffs);for(const i in n.equipment){const o=n.equipment[i];o&&o.baseDefinition?n.equipment[i]=la(o):n.equipment[i]=null}return n.initialize(a),n.hp=e.hp,n.hp>n.maxHp&&(n.hp=n.maxHp),n}function rs(e){if(!e)return null;let t;return e.initialCount!==void 0?(t=new fe(e.baseDefinition,e.initialCount),t.currentHp=e.currentHp,t.currentCount=e.currentCount):(t=new St(e.name,e.maxHp,e.damage,e.attackSpeed,e.level),t.currentHp=e.currentHp),t.instanceId=e.instanceId||crypto.randomUUID(),t}function cs(){const e=localStorage.getItem(Oe);if(!e)return console.log("StorageManager: Aucune sauvegarde normale trouvée."),null;try{const t=JSON.parse(e);return console.log("StorageManager: Sauvegarde normale chargée avec succès !"),t.tavern&&(t.tavern.reputation=t.tavern.reputation||0,t.tavern.availableContracts=t.tavern.availableContracts||[],t.tavern.activeContracts=t.tavern.activeContracts||[],t.tavern.completedContracts=t.tavern.completedContracts||[],t.tavern.contractCooldowns=t.tavern.contractCooldowns||{},t.tavern.specialists=t.tavern.specialists||{}),t.options=t.options||{},t}catch(t){return console.error("Erreur lors du chargement de la sauvegarde :",t),null}}function Mt(){C.emit("confirmation_requested",{message:"Êtes-vous sûr de vouloir recommencer votre partie ? Votre progression actuelle (étage, or, objets) sera perdue, mais pas votre prestige.",action:{type:"perform_soft_reset"}})}function Pt(){C.emit("confirmation_requested",{message:`ATTENTION !

Êtes-vous absolument certain de vouloir effacer toutes vos données ?

Cette action supprimera votre sauvegarde actuelle ET toute votre progression de prestige (Échos, améliorations). Cette action est irréversible.`,action:{type:"perform_hard_reset"}})}function Ut(){console.log("StorageManager: Réinitialisation de la partie en cours..."),localStorage.removeItem(Oe),console.log("StorageManager: Sauvegarde normale supprimée pour soft reset."),window.location.reload()}function Ot(){console.log("StorageManager: Réinitialisation complète de la sauvegarde..."),localStorage.removeItem(Oe),localStorage.removeItem(At),console.log("StorageManager: Toutes les sauvegardes supprimées pour hard reset."),window.location.reload()}const te={save:ss,load:cs,savePrestige:ns,loadPrestige:is,hydrateHero:os,hydrateMonster:rs,hydrateItem:la,softReset:Mt,hardReset:Pt,performSoftReset:Ut,performHardReset:Ot,init:()=>{C.on("ui_soft_reset_clicked",()=>{Mt()}),C.on("ui_hard_reset_clicked",()=>{Pt()}),C.on("confirmation_accepted",e=>{e.type==="perform_soft_reset"?Ut():e.type==="perform_hard_reset"&&Ot()})}},ls={ADVENTURER:{id:"adventurer",name:"Aventurier",cost:0,status:"recruited",damageType:"physical",baseDamage:4,baseAttackSpeed:1.2,baseStrength:8,baseDexterity:7,baseIntelligence:5,baseEndurance:8,strengthPerLevel:1,dexterityPerLevel:1,intelligencePerLevel:1,endurancePerLevel:2},WARRIOR:{id:"warrior",name:"Guerrier",cost:100,status:"locked",damageType:"physical",baseDamage:10,baseAttackSpeed:.8,baseStrength:12,baseDexterity:6,baseIntelligence:3,baseEndurance:10,strengthPerLevel:3,dexterityPerLevel:1,intelligencePerLevel:0,endurancePerLevel:2,allowedSubTypes:{arme:["arme_dps"]}},MAGE:{id:"mage",name:"Mage",cost:0,status:"locked",damageType:"magical",baseDamage:18,baseAttackSpeed:.6,baseStrength:4,baseDexterity:7,baseIntelligence:12,baseEndurance:6,strengthPerLevel:0,dexterityPerLevel:1,intelligencePerLevel:3,endurancePerLevel:1,allowedSubTypes:{arme:["magic_focus"]}},PRIEST:{id:"priest",name:"Prêtre",cost:1e4,status:"locked",damageType:"magical",baseDamage:0,baseAttackSpeed:1,baseStrength:6,baseDexterity:5,baseIntelligence:10,baseEndurance:9,strengthPerLevel:1,dexterityPerLevel:1,intelligencePerLevel:2,endurancePerLevel:2,baseHealPerSecond:5,baseBuffChance:.2,baseBuffDuration:5,allowedSubTypes:{arme:["arme_sacre","magic_focus"]}},DUELIST:{id:"duelist",name:"Duelliste",cost:5e4,status:"locked",damageType:"physical",baseDamage:15,baseAttackSpeed:1.5,baseStrength:10,baseDexterity:14,baseIntelligence:4,baseEndurance:5,strengthPerLevel:2,dexterityPerLevel:3,intelligencePerLevel:0,endurancePerLevel:1,baseRiposteChance:.05,allowedSubTypes:{arme:["arme_dps"]}},PROTECTOR:{id:"protector",name:"Protecteur",cost:1e5,status:"locked",damageType:"magical",baseDamage:8,baseAttackSpeed:.8,baseStrength:8,baseDexterity:4,baseIntelligence:12,baseEndurance:10,strengthPerLevel:1,dexterityPerLevel:1,intelligencePerLevel:3,endurancePerLevel:2,shieldOnHitValue:5,aoeShieldValue:20,aoeShieldCooldown:12,interceptionThreshold:.35,interceptionDamageReduction:.5,interceptionCooldown:7,allowedSubTypes:{arme:["arme_sacre","arme_dps","magic_focus"]}},FLIBUSTIER:{id:"flibustier",name:"Flibustier",cost:1e6,status:"locked",unlockCondition:{reputation:3e3},teaserDescription:"Un homme étrange à l'œil brillant passe de table en table. Il chante des airs marins entraînants, une lueur de malice dans le regard. Il semble attendre quelque chose... ou quelqu'un d'assez réputé pour s'offrir ses services.",description:"Un maître de la poudre et des coups bas, dont la puissance augmente avec votre fortune. Parfait pour ceux qui aiment parier gros.",damageType:"physical",baseDamage:12,baseAttackSpeed:1,baseStrength:7,baseDexterity:12,baseIntelligence:9,baseEndurance:6,strengthPerLevel:1,dexterityPerLevel:3,intelligencePerLevel:2,endurancePerLevel:1,allowedSubTypes:{arme:["pistolet","mousquet","tromblon"]}}},U={BLACKSMITH:{id:"blacksmith",name:"Forgeron",description:"Un maître forgeron qui peut vous aider à gérer votre butin et à améliorer vos objets. Débloque le filtre de butin automatique et des améliorations de forge.",cost:{gold:1e5,baseEssence:1e3},requirements:{reputation:1e3},unlockedFeature:"lootFilter",status:"locked"},BATISSEUR:{id:"batisseur",name:"Bâtisseur",description:"Un architecte de renom qui supervise les grands projets. Son expertise est requise pour débloquer des améliorations majeures pour d'autres spécialistes.",cost:{gold:5e5},requirements:{reputation:2e3},status:"locked"},BLACKSMITH_RENOVATION:{id:"blacksmith_renovation",name:"Rénovation de la Forge",description:"Le Forgeron souhaite agrandir et améliorer son espace de travail, mais ce projet d'envergure nécessite la supervision du Bâtisseur.",cost:{gold:1e6},requirements:{specialistRecruited:["BLACKSMITH","BATISSEUR"]},status:"locked"}};let m={};function ds(){const e={heroes:[],activeMonster:null,gold:0,gameStatus:"fighting",dungeonFloor:1,encounterIndex:1,encountersPerFloor:10,encounterCooldown:0,bossUnlockReached:!1,bossIsDefeated:!1,pendingBossFight:!1,partyWipeHealBoostActive:!1,shopItems:[],shopRestockTimer:0,autosaveTimer:0,heroDefinitions:JSON.parse(JSON.stringify(ls)),inventory:[],inventorySize:50,droppedItems:[],droppedItemsSize:20,itemToEquip:null,soulEchos:0,prestigeUpgrades:{},highestFloorAchieved:1,duelistUnlockedByPrestige:!1,highestFloorThisRun:1,options:{autoFightBoss:!1,autoNextFloor:!1,lootFilterActive:!1,lootFilterRarityThreshold:"common",autoBuyConsumablesUnlocked:!1,autoBuyTavernConsumables:!1},artisanUnlocked:!1,prestigeCount:0,prestigeUnlockConditionMet:!1,tavernUnlocked:!1,blacksmithUnlocked:!1,resources:{essences:{base:0,rare:0}},tavern:{reputation:0,availableContracts:[],activeContracts:[],completedContracts:[],contractCooldowns:{},specialists:JSON.parse(JSON.stringify(U)),upgrades:{}},trophies:{},activeTrophyBonuses:{},activeConsumables:[],isGamePaused:!1,isPausedAtNextEncounter:!1,ui:{shopNeedsUpdate:!0,heroesNeedUpdate:!0,inventoryNeedsUpdate:!0,lootNeedsUpdate:!0,recruitmentNeedsUpdate:!0,progressionNeedsUpdate:!0,prestigeNeedsUpdate:!0,partyPanelNeedsUpdate:!0,artisanNeedsUpdate:!0,artisanSelectedItemIndex:null,heroCardState:{},shopLockModeActive:!1,activeTab:"shop-panel",tavernNeedsUpdate:!0,mainTabsNeedUpdate:!0,tavernActiveTab:"tavern-contracts",trophyNeedsUpdate:!0,pauseButtonNeedsUpdate:!0},damageBuckets:{},globalAuraBonuses:{},eventBus:C},t=te.loadPrestige();if(t){if(console.log("createInitialState: Données de prestige trouvées et chargées."),e.soulEchos=t.soulEchos||0,e.prestigeUpgrades=t.prestigeUpgrades||{},e.highestFloorAchieved=t.highestFloorAchieved||1,e.duelistUnlockedByPrestige=t.duelistUnlockedByPrestige||!1,e.options={...e.options,...t.options},e.prestigeCount=t.prestigeCount||0,e.artisanUnlocked=t.artisanUnlocked||!1,e.tavernUnlocked=t.tavernUnlocked||!1,e.resources=t.resources||{essences:{base:0,rare:0}},e.prestigeUnlockConditionMet=t.prestigeUnlockConditionMet||!1,t.tavern&&(e.tavern.reputation=t.tavern.reputation||0,e.tavern.contractCooldowns=t.tavern.contractCooldowns||{},e.tavern.upgrades=t.tavern.upgrades||{},t.tavern.specialists))for(const a in t.tavern.specialists)e.tavern.specialists[a]&&(e.tavern.specialists[a].status=t.tavern.specialists[a].status);if(e.trophies=t.trophies||{},e.blacksmithUnlocked=t.blacksmithUnlocked||!1,e.options.autoBuyConsumablesUnlocked=t.options?.autoBuyConsumablesUnlocked||!1,e.options.autoBuyTavernConsumables=t.options?.autoBuyTavernConsumables||!1,t.heroDefinitionsStatus)for(const a in t.heroDefinitionsStatus)e.heroDefinitions[a]&&(t.heroDefinitionsStatus[a]!=="locked"?e.heroDefinitions[a].status="recruited":e.heroDefinitions[a].status="locked")}else console.log("createInitialState: Aucune donnée de prestige trouvée. Initialisation par défaut.");if(e.prestigeUpgrades.SOUL_RICHES){const a=e.prestigeUpgrades.SOUL_RICHES;e.gold+=W.SOUL_RICHES.effect(a)}return e}const de={CONTRACT_SLOT_EXPANSION:{id:"CONTRACT_SLOT_EXPANSION",name:"Expansion des Contrats",description:"Augmente de +{value} le nombre de contrats disponibles et actifs simultanément.",type:"free",unlockCondition:{reputation:500,floor:0},effect:e=>e,formatValue:e=>e,maxLevel:1},INFLUENTIAL_REPUTATION:{id:"INFLUENTIAL_REPUTATION",name:"Réputation Influente",description:"Augmente tous les gains de Renommée de {value}%.",type:"free",unlockCondition:{reputation:1e3,floor:0},effect:e=>e*10,formatValue:e=>e,maxLevel:1},LOYAL_CLIENTELE:{id:"LOYAL_CLIENTELE",name:"Clientèle Assidue",description:"Les consommables chronométrés ont une durée augmentée de {value}%.",type:"free",unlockCondition:{reputation:1500,floor:35},effect:e=>e*20,formatValue:e=>e,maxLevel:1},DEDICATED_MESSENGER:{id:"DEDICATED_MESSENGER",name:"Messager Dévoué",description:"Réduit le cooldown après avoir réclamé ou abandonné un contrat de {value}%.",type:"free",unlockCondition:{reputation:2e3,floor:40},effect:e=>e*15,formatValue:e=>e,maxLevel:1},LOYALTY_CARD:{id:"LOYALTY_CARD",name:"Carte de Fidélité",description:"Débloque l'option d'achat automatique des marchandises de la Taverne et réduit leur coût de {value}.",type:"paid",unlockCondition:{reputation:2500,floor:40},baseCost:{gold:5e4},effect:e=>5,formatValue:e=>`${e}%`,maxLevel:1},SAMPLE_SHOP:{id:"SAMPLE_SHOP",name:"Boutique d'Échantillons",description:"Débloque la vente de l'Élixir de Fureur à la Taverne.",type:"paid",unlockCondition:{reputation:3e3,floor:40},baseCost:{trophy:"wailing_spectre",quantity:1},effect:e=>!0,maxLevel:1},MASTER_ARTISAN:{id:"MASTER_ARTISAN",name:"Maître Artisan",description:"Chaque fois que vous réclamez un contrat qui octroie des essences, vous avez {value}% de chances d'obtenir une Essence Rare supplémentaire.",type:"paid",unlockCondition:{reputation:3500,floor:50},baseCost:{trophy:"chaos_hydra",quantity:1},effect:e=>e*20,formatValue:e=>e,maxLevel:1}},Y={goblin:{monsterId:"goblin",name:"Trophée de Gobelin",category:"Gobelinoïde"},forest_spider:{monsterId:"forest_spider",name:"Pattes d'Araignée Géante",category:"Insectoïde"},orc:{monsterId:"orc",name:"Trophée d'Orque",category:"Peau-Verte"},skeleton:{monsterId:"skeleton",name:"Trophée de Squelette",category:"Mort-Vivant"},dire_wolf:{monsterId:"dire_wolf",name:"Crocs de Loup Sanguinaire",category:"Bête"},swarm_of_bats:{monsterId:"swarm_of_bats",name:"Ailes de Chauves-souris Géantes",category:"Insectoïde"},ghoul:{monsterId:"ghoul",name:"Trophée de Goule",category:"Mort-Vivant"},wailing_spectre:{monsterId:"wailing_spectre",name:"Trophée de Spectre",category:"Mort-Vivant"},stone_golem:{monsterId:"stone_golem",name:"Coeur de Golem de Pierre",category:"Élémentaire"},armored_crypt_guard:{monsterId:"armored_crypt_guard",name:"Casque de Garde de Crypte",category:"Construct"},chaos_hydra:{monsterId:"chaos_hydra",name:"Écaille d'Hydre du Chaos",category:"Bête"},boss:{monsterId:"boss",name:"Fragment d'Âme de Gardien",category:"Boss"}},Ye={"Mort-Vivant":{count:3,bonus:{description:"+5% de dégâts contre tous les monstres de la catégorie 'Mort-Vivant'.",effect:{type:"damage_vs_category",category:"Mort-Vivant",value:.05}}},"Peau-Verte":{count:2,bonus:{description:"+10% d'or trouvé sur les monstres de la catégorie 'Peau-Verte'.",effect:{type:"gold_vs_category",category:"Peau-Verte",value:.1}}},Insectoïde:{count:2,bonus:{description:"+5% de dégâts contre tous les monstres de la catégorie 'Insectoïde'.",effect:{type:"damage_vs_category",category:"Insectoïde",value:.05}}},Bête:{count:2,bonus:{description:"+5% de dégâts contre tous les monstres de la catégorie 'Bête'.",effect:{type:"damage_vs_category",category:"Bête",value:.05}}}};let q=null,re=null;const ae={init:(e,t)=>{if(q=t,re=e,console.log("TavernSpecialistsManager: Initialisation..."),!q.tavern.specialists)q.tavern.specialists=JSON.parse(JSON.stringify(U));else for(const a in U)q.tavern.specialists[a]||(q.tavern.specialists[a]=JSON.parse(JSON.stringify(U[a])));e.on("ui_recruit_specialist_clicked",a=>ae.recruitSpecialist(a.specialistId))},recruitSpecialist:e=>{const t=U[e.toUpperCase()];if(!t){console.error(`TavernSpecialistsManager: Spécialiste inconnu : ${e}`),re.emit("notification_requested",{message:"Erreur: Spécialiste inconnu.",type:"error"});return}const a=q.tavern.specialists[e.toUpperCase()];if(a.status==="recruited"){re.emit("notification_requested",{message:`${t.name} a déjà été recruté.`,type:"error"});return}if(a.status==="locked"){re.emit("notification_requested",{message:`${t.name} n'est pas encore disponible.`,type:"error"});return}const s=t.cost||{},n=t.requirements||{};let i=!0,o=[];if(n.reputation&&q.tavern.reputation<n.reputation&&(i=!1,o.push(`Renommée ${n.reputation}`)),n.specialistRecruited){const r=Array.isArray(n.specialistRecruited)?n.specialistRecruited:[n.specialistRecruited];for(const l of r)if(!ae.isSpecialistRecruited(l)){i=!1;const d=U[l]?.name||"un autre spécialiste";o.push(`Recruter ${d}`)}}if(s.gold&&q.gold<s.gold&&(i=!1,o.push(`${s.gold-q.gold} Or`)),s.baseEssence&&q.resources.essences.base<s.baseEssence&&(i=!1,o.push(`${s.baseEssence-q.resources.essences.base} Essences de base`)),!i){re.emit("notification_requested",{message:`Conditions non remplies : ${o.join(", ")}.`,type:"error"});return}s.gold&&(q.gold-=s.gold),s.baseEssence&&(q.resources.essences.base-=s.baseEssence),a.status="recruited",q.ui.tavernNeedsUpdate=!0,re.emit("notification_requested",{message:`${t.name} a été recruté !`,type:"success"}),ae._activateSpecialistFeature(e.toUpperCase())},_activateSpecialistFeature:e=>{switch(e){case"BLACKSMITH":q.blacksmithUnlocked=!0,q.ui.artisanNeedsUpdate=!0,re.emit("notification_requested",{message:"Le Forgeron est arrivé ! Une nouvelle section est disponible dans la Forge.",type:"info"});break;case"BATISSEUR":break;case"BLACKSMITH_RENOVATION":re.emit("notification_requested",{message:"Le Forgeron a commencé sa rénovation ! De nouvelles options sont disponibles à la Forge.",type:"info"});break;default:console.warn(`TavernSpecialistsManager: Fonctionnalité non gérée pour le spécialiste : ${e}`)}},isSpecialistRecruited:e=>q.tavern.specialists[e.toUpperCase()]?.status==="recruited",isSpecialistUnlocked:e=>{const t=U[e.toUpperCase()];if(!t)return!1;if(t.requirements?.specialistRecruited){const a=Array.isArray(t.requirements.specialistRecruited)?t.requirements.specialistRecruited:[t.requirements.specialistRecruited];for(const s of a)if(!ae.isSpecialistRecruited(s))return!1}return!0},getSpecialistStatus:e=>{const t=U[e.toUpperCase()];if(!t)return null;const a=q.tavern.specialists[e.toUpperCase()]?.status||"locked",s=t.cost||{},n=t.requirements||{};let i=!0;s.gold&&q.gold<s.gold&&(i=!1),s.baseEssence&&q.resources.essences.base<s.baseEssence&&(i=!1),n.reputation&&q.tavern.reputation<n.reputation&&(i=!1);const o=q.tavern.specialists[e.toUpperCase()]?.status!=="locked";return{id:e,name:t.name,description:t.description,cost:t.cost,requirements:t.requirements,status:a,canAfford:i,isUnlockedForDisplay:o}}};let v=null,J=null,Ie=new Set;const z={init:(e,t)=>{v=t,J=e,console.log("TavernUpgradesManager: Initialisation..."),v.tavern.upgrades||(v.tavern.upgrades={});for(const a in de)v.tavern.upgrades[a]===void 0&&(v.tavern.upgrades[a]=0);Ie.clear();for(const a in v.tavern.upgrades)(v.tavern.upgrades[a]||0)>0&&Ie.add(a);e.on("ui_tavern_buy_upgrade_clicked",a=>z.buyUpgrade(a.upgradeId)),e.on("contract_claimed",z.handleContractClaimed)},update:e=>{},checkUnlockConditions:()=>{let e=!1;for(const t in de){const a=de[t],s=v.tavern.upgrades[t]||0;if(s<(a.maxLevel||1)){let n=!0;a.unlockCondition&&(a.unlockCondition.reputation&&v.tavern.reputation<a.unlockCondition.reputation&&(n=!1),a.unlockCondition.floor&&v.highestFloorAchieved<a.unlockCondition.floor&&(n=!1),a.unlockCondition.specialistRecruited&&!ae.isSpecialistRecruited(a.unlockCondition.specialistRecruited)&&(n=!1)),n&&s===0&&(a.type==="free"?(z.buyUpgrade(t),J.emit("notification_requested",{message:`Nouvelle amélioration de Taverne débloquée : ${a.name} !`,type:"success"}),e=!0):(Ie.has(t)||(J.emit("notification_requested",{message:`Nouvelle amélioration de Taverne disponible à l'achat : ${a.name} !`,type:"info"}),Ie.add(t)),e=!0))}}e&&(v.ui.tavernNeedsUpdate=!0)},getUpgradeCost:(e,t)=>{let a={gold:0,trophy:null,quantity:0};return e.baseCost&&(e.baseCost.gold&&(a.gold=Math.floor(e.baseCost.gold*Math.pow(e.costScale||1,t))),e.baseCost.trophy&&(a.trophy=e.baseCost.trophy,a.quantity=Math.floor((e.baseCost.quantity||1)*Math.pow(e.costScale||1,t)))),a},buyUpgrade:e=>{const t=de[e];if(!t){console.error(`Amélioration de taverne inconnue : ${e}`),J.emit("notification_requested",{message:"Erreur: Amélioration inconnue.",type:"error"});return}const a=v.tavern.upgrades[e]||0;if(a>=(t.maxLevel||1)){J.emit("notification_requested",{message:"Niveau maximum atteint pour cette amélioration.",type:"error"});return}let s=!0;if(t.unlockCondition&&(t.unlockCondition.reputation&&v.tavern.reputation<t.unlockCondition.reputation&&(s=!1),t.unlockCondition.floor&&v.highestFloorAchieved<t.unlockCondition.floor&&(s=!1),t.unlockCondition.specialistRecruited&&!ae.isSpecialistRecruited(t.unlockCondition.specialistRecruited)&&(s=!1)),!s){let r=[];if(t.unlockCondition.reputation&&r.push(`Renommée ${t.unlockCondition.reputation}`),t.unlockCondition.floor&&r.push(`Étage ${t.unlockCondition.floor}`),t.unlockCondition.specialistRecruited){const l=U[t.unlockCondition.specialistRecruited]?.name||"spécialiste requis";r.push(`Recruter ${l}`)}J.emit("notification_requested",{message:`Conditions de déblocage non remplies : ${r.join(" / ")}.`,type:"error"});return}const n=z.getUpgradeCost(t,a);let i=!0,o=[];if(n.gold>0&&v.gold<n.gold&&(i=!1,o.push(`${n.gold-v.gold} Or`)),n.trophy&&(v.trophies[n.trophy]||0)<n.quantity){i=!1;const r=Y[n.trophy]?.name||"Trophée inconnu";o.push(`${n.quantity-(v.trophies[n.trophy]||0)} ${r}`)}if(!i){J.emit("notification_requested",{message:`Ressources insuffisantes pour acheter : ${o.join(", ")}.`,type:"error"});return}n.gold>0&&(v.gold-=n.gold),n.trophy&&(v.trophies[n.trophy]-=n.quantity,v.ui.trophyNeedsUpdate=!0),v.tavern.upgrades[e]=a+1,Ie.add(e),z.applyPermanentEffect(e,v.tavern.upgrades[e]),J.emit("notification_requested",{message:`Amélioration de Taverne achetée : ${t.name} !`,type:"success"}),v.ui.tavernNeedsUpdate=!0,v.ui.shopNeedsUpdate=!0,v.ui.heroesNeedUpdate=!0},applyPermanentEffect:(e,t)=>{const a=de[e];if(!(!a||t===0)){switch(e){case"CONTRACT_SLOT_EXPANSION":const s=a.effect(t);v.tavern.maxAvailableContracts+=s,v.tavern.maxActiveContracts+=s;break;case"INFLUENTIAL_REPUTATION":v.tavern.reputationGainBonus=(v.tavern.reputationGainBonus||0)+a.effect(t);break;case"LOYAL_CLIENTELE":v.tavern.timedConsumableDurationBonus=(v.tavern.timedConsumableDurationBonus||0)+a.effect(t);break;case"DEDICATED_MESSENGER":v.tavern.contractCooldownReduction=(v.tavern.contractCooldownReduction||0)+a.effect(t);break;case"LOYALTY_CARD":v.options.autoBuyConsumablesUnlocked=!0,v.tavern.consumableCostReduction=a.effect(t);break;case"SAMPLE_SHOP":v.tavern.elixirOfFuryUnlocked=!0;break;case"MASTER_ARTISAN":v.tavern.masterArtisanChance=a.effect(t);break;default:console.warn(`TavernUpgradesManager: Effet non géré pour l'amélioration : ${e}`)}v.ui.heroesNeedUpdate=!0}},applyAllPermanentEffects:()=>{if(!v||!v.tavern||!v.tavern.upgrades){console.warn("TavernUpgradesManager: État de la taverne non initialisé pour appliquer les effets.");return}v.tavern.reputationGainBonus=0,v.tavern.timedConsumableDurationBonus=0,v.tavern.contractCooldownReduction=0,v.tavern.masterArtisanChance=0,v.tavern.elixirOfFuryUnlocked=!1,v.options.autoBuyConsumablesUnlocked=!1,v.tavern.consumableCostReduction=0,v.tavern.maxAvailableContracts=3,v.tavern.maxActiveContracts=1;for(const e in v.tavern.upgrades){const t=v.tavern.upgrades[e];t>0&&z.applyPermanentEffect(e,t)}},handleContractClaimed:e=>{const t=v.tavern.masterArtisanChance||0;t>0&&e.rewards&&(e.rewards.baseEssence||e.rewards.rareEssence)&&Math.random()*100<t&&(v.resources.essences.rare+=1,J.emit("notification_requested",{message:"Maître Artisan : +1 Essence Rare supplémentaire !",type:"success"}),v.ui.artisanNeedsUpdate=!0)},getUpgradeStatus:e=>{const t=de[e];if(!t)return null;const a=v.tavern.upgrades[e]||0,s=t.maxLevel||1,n=a>=s;let i=!0;t.unlockCondition&&(t.unlockCondition.reputation&&v.tavern.reputation<t.unlockCondition.reputation&&(i=!1),t.unlockCondition.floor&&v.highestFloorAchieved<t.unlockCondition.floor&&(i=!1),t.unlockCondition.specialistRecruited&&!ae.isSpecialistRecruited(t.unlockCondition.specialistRecruited)&&(i=!1));let o=!0,r=null;t.type==="paid"&&!n&&(r=z.getUpgradeCost(t,a),r.gold>0&&v.gold<r.gold&&(o=!1),r.trophy&&(v.trophies[r.trophy]||0)<r.quantity&&(o=!1));let l=null,d=null;if(t.effect){const u=a>0?a:1;l=t.effect(u),a<s&&(d=t.effect(u+1),t.formatValue&&String(t.formatValue(1)).includes("%")?d=d-l:t.formatValue||(d=null))}return{id:e,name:t.name,description:t.description,type:t.type,currentLevel:a,maxLevel:s,isMaxLevel:n,isUnlocked:i,isOwned:a>0,cost:r,canAfford:o,effectValue:l,nextEffectValue:d,formatValue:t.formatValue,unlockCondition:t.unlockCondition}}},Bt={WARRIOR:e=>e.gold>=e.heroDefinitions.WARRIOR.cost,MAGE:e=>e.dungeonFloor>=2,PRIEST:e=>e.dungeonFloor>=11,DUELIST:e=>e.dungeonFloor>=15,PROTECTOR:e=>e.dungeonFloor>=25&&e.gold>=e.heroDefinitions.PROTECTOR.cost},tt={PRESTIGE:e=>e.highestFloorThisRun>=15,ARTISAN:e=>e.highestFloorAchieved>=20,TAVERN:e=>e.highestFloorAchieved>=30},Ht={BLACKSMITH:e=>e.tavernUnlocked,BATISSEUR:e=>e.highestFloorAchieved>=40,BLACKSMITH_RENOVATION:e=>e.tavern.specialists.BLACKSMITH?.status==="recruited"};function us(e,t){let a=!1;for(const s in e.heroDefinitions){const n=e.heroDefinitions[s];if(n&&n.status==="locked"){let i=!1;if(Bt[s]&&Bt[s](e))i=!0;else if(n.unlockCondition){const{reputation:o}=n.unlockCondition;o&&e.tavern.reputation>=o&&(i=!0)}i&&(n.status="available",a=!0,t.emit("notification_requested",{message:`${n.name} est maintenant disponible au recrutement !`,type:"success"}))}}!e.prestigeUnlockConditionMet&&tt.PRESTIGE(e)&&(e.prestigeUnlockConditionMet=!0,a=!0,t.emit("notification_requested",{message:"La Renaissance est maintenant possible !",type:"success"})),!e.artisanUnlocked&&tt.ARTISAN(e)&&(e.artisanUnlocked=!0,a=!0,t.emit("notification_requested",{message:"La Forge est maintenant disponible !",type:"success"})),!e.tavernUnlocked&&tt.TAVERN(e)&&(e.tavernUnlocked=!0,a=!0,t.emit("notification_requested",{message:"La Taverne a ouvert ses portes !",type:"success"})),e.tavernUnlocked&&z.checkUnlockConditions();for(const s in U){if(!Ht[s])continue;const n=U[s],i=e.tavern.specialists[s];i&&i.status==="locked"&&Ht[s](e)&&(i.status="available",a=!0,t.emit("notification_requested",{message:`${n.name} est maintenant disponible !`,type:"success"}))}a&&(e.ui.recruitmentNeedsUpdate=!0,e.ui.progressionNeedsUpdate=!0,e.ui.tavernNeedsUpdate=!0)}const Tt={checkUnlocks:us};function c(e,t={}){const a=document.createElement(e);for(const s in t)if(Object.prototype.hasOwnProperty.call(t,s)){const n=t[s];if(s==="className")Array.isArray(n)?a.classList.add(...n):a.className=n;else if(s==="textContent")a.textContent=n;else if(s==="dataset"&&typeof n=="object")for(const i in n)Object.prototype.hasOwnProperty.call(n,i)&&(a.dataset[i]=n[i]);else if(s==="style"&&typeof n=="object")for(const i in n)Object.prototype.hasOwnProperty.call(n,i)&&(a.style[i]=n[i]);else s.startsWith("on"),a[s]=n}return a}const We={OPPORTUNIST_DAGGER:"Les coups critiques appliquent un Saignement à la cible, infligeant 150% des dégâts de votre coup sur 5 secondes.",EARTHQUAKE_MACE:"Chaque coup a 10% de chances d'étourdir la cible pendant 0.75 seconde.",VENGEANCE_HELM:"Lorsqu'un allié est vaincu, vos dégâts sont augmentés de 100% pendant 10 secondes.",BLOODTHIRSTY_ARMOR:"Chaque fois que vous tuez un ennemi, vous récupérez 8% de votre maximum de points de vie.",SURGICAL_GLOVES:"Toutes les 5 attaques que vous portez, la prochaine est un coup critique garanti.",PURSUIT_LEGGINGS:"Après avoir tué un ennemi, votre vitesse d'attaque est augmentée de 30% pendant 5 secondes.",ELUSIVE_BOOTS:"Chaque fois que vous déclenchez une Riposte, vous gagnez +20% de vitesse d'attaque pendant 3 secondes.",PHOENIX_AMULET:"Une fois par combat, lorsque vos PV devraient passer sous 1, ils sont restaurés à 50% de leur maximum.",VINDICATION_RING:"Quand vous subissez un coup infligeant plus de 20% de votre vie maximale, votre prochaine attaque inflige +200% de dégâts.",ARCANE_ECHO_TRINKET:"Vos sorts de soin ou de buff ont 20% de chances de se déclencher une seconde fois sur la même cible avec 50% d'efficacité.",SPLINTERING_ARROW_BOW:"Vos coups critiques ont 50% de chances de ricocher, infligeant 50% de leurs dégâts à un autre ennemi aléatoire.",REFLECTIVE_SHIELD:"En subissant des dégâts, vous accumulez 10% de ces dégâts. La prochaine attaque du porteur libère ces dégâts accumulés en bonus.",FLEETING_SHADOW_CLOAK:"Après un coup critique, vous avez 15% de chance de devenir invisible pendant 2 secondes, empêchant les ennemis de vous cibler.",CLEAR_MIND_DIADEM:"Vous gagnez +1% de Chance de Coup Critique pour chaque tranche de 10 points d'Intelligence.",SENTINEL_HARNESS:"Vous gagnez +1% de réduction de dégâts pour chaque tranche de 10% de points de vie qu'il vous manque.",STOIC_GUARDIAN_GAUNTLETS:"Votre statistique de Régénération de PV s'applique également à l'allié ayant le moins de PV, à hauteur de 30% de son efficacité.",MOUNTAIN_GREAVES:"Augmente votre Armure d'un montant égal à 5% de votre maximum de points de vie.",BALANCE_BOOTS:"Votre attribut principal (Force, Dextérité ou Intelligence) est augmenté de 15% de la somme de vos deux autres attributs.",VITAL_TRANSMUTATION_NECKLACE:"Votre statistique de Vol de Vie est augmentée de 25% de votre Chance de Coup Critique.",MANA_THIEF_RING:"Vos attaques ont 25% de chances de restaurer 2% de leur mana maximum aux autres alliés.",ARCHIVIST_SEAL:"Vous gagnez +1 à tous les attributs (For, Dex, Int, End) tous les 5 niveaux de héros.",ICE_ESSENCE:"Vos attaques ont une chance de Glacer les ennemis, réduisant leur vitesse d'attaque de 15%. La chance est égale à votre % de Chance de Coup Critique.",BLOODLETTER_AXE:"Vos dégâts sont augmentés d'un montant égal à 100% de votre régénération de PV par seconde.",SOUL_SIPHON_WAND:"Vos sorts de soins infligent également des dégâts à votre cible ennemie, à hauteur de 30% des soins prodigués.",SPIRIT_FORCE_ROBE:"Convertit 25% de votre Force en Puissance des Soins.",LEADERS_HELM:"(Aura) Augmente la Vitesse d'Attaque de tous les alliés de 5%.",BROTHERHOOD_BREASTPLATE:"(Aura) Tous les alliés gagnent +50 Armure.",MENTORS_GAUNTLETS:"Lorsque le porteur gagne de l'expérience, tous les autres alliés en gagnent 10%.",CONFIDENT_STEP_LEGGINGS:"(Aura) Augmente la statistique de Riposte de tous les alliés de 3%.",HERALDS_BOOTS:"(Aura) Augmente le gain d'Or de tous les alliés de 15%.",HARMONY_PENDANT:"(Aura) Réduit les dégâts subis par tous les alliés de 3%.",PROTECTIVE_BOND_RING:"Le porteur redirige 5% de tous les dégâts subis par les autres alliés sur lui-même.",FURY_TOTEM:"(Aura) Augmente les Dégâts Critiques de tous les alliés de 20%.",PATRIARCHS_STAFF:"(Aura) Augmente l'efficacité des soins reçus par tous les alliés de 10%.",RALLYING_HORN:"(Aura) Augmente la statistique d'Endurance de tous les alliés de 5%.",BANNER_OF_COURAGE:"(Aura) Les alliés infligent 10% de dégâts supplémentaires aux Boss.",UNITY_FOCALIZER:"Les buffs monocibles que vous lancez s'appliquent aussi à un autre allié aléatoire avec 33% de leur efficacité.",MADMANS_MASK:"+30% Dégâts Critiques, -10% Chance de Coup Critique.",GLASS_ARMOR:"Augmente les dégâts que vous infligez de 25%, mais augmente aussi les dégâts que vous subissez de 25%.",MISERS_GRIPS:"Double tous les gains d'Or, mais le porteur ne peut pas être soigné par les autres héros (le Vol de Vie fonctionne toujours).",ANCHOR_LEGGINGS:"+50% Armure et +25% PV. En contrepartie, votre Vitesse d'Attaque est réduite de 30%.",DAREDEVILS_BOOTS:"Vous commencez toujours le combat avec +50% de vitesse d'attaque pendant 5 secondes, mais votre armure est réduite à 0 pendant ce temps.",OMNISCIENTS_PERIL:"+25 Intelligence, mais réduit la Force et la Dextérité à 1.",DRUNKARDS_RING:"+20 Force, mais -15% Vitesse d'Attaque et -10% Chance de Coup Critique.",HERMITS_RING:"+20% à toutes les statistiques de base (For, Dex, Int, End) si le porteur est le seul héros dans le groupe.",SACRIFICIAL_IDOL:"Le porteur sacrifie 20% de sa vie maximale au début de chaque combat pour accorder +15% de dégâts à tous les autres alliés pendant 10 secondes.",VORPAL_BLADE:"Dégâts et Chance de Critique massivement augmentés, mais chaque coup a 5% de chance de vous infliger 10% de votre vie maximale en dégâts purs.",ARCHLICH_SCEPTER:"Vos sorts sont 40% plus puissants, mais consomment également 5% de votre vie maximale à chaque lancement.",MARTYRS_CHARM:"Vous redirigez 15% de tous les dégâts subis par l'allié avec le moins de PV sur vous-même. Vous subissez ces dégâts comme des dégâts purs (ignorants l'armure).",DOUBLOON_PISTOL:"Chaque coup a 10% de chances de générer 1 Doublon d'Or.",KRAKEN_MUSKET:"Inflige +20% de dégâts pour chaque effet de Poison actif sur la cible.",PIRATE_KING_RING:"La mécanique 'La Fortune du Flibustier' est 50% plus efficace.",TOAD_VENOM_VIAL:"Le Poison appliqué par 'Lames Enduites' dure 3 secondes de plus et ses dégâts sont augmentés de 25%.",VETERAN_ACCORDION:"Les chants de marin déclenchés par 'Pillage ou Poudre !' ont une durée et une efficacité augmentées de 40%.",DAVY_JONES_CHEST:"Augmente la Découverte d'Or de 100%, mais le porteur perd 1% de sa vie maximale par seconde."};let Ge,Le,qe,De;function ps(e){const t=c("div",{className:`item-card rarity-${e.rarity.toLowerCase()}`});t.dataset.itemId=e.instanceId,m.itemToEquip&&m.itemToEquip.instanceId===e.instanceId&&t.classList.add("equip-mode-selected");const a=c("div",{className:"item-card-header"});a.appendChild(c("span",{className:"item-name",textContent:e.name})),a.appendChild(c("span",{className:"item-level",textContent:`Niv. ${e.level}`})),t.appendChild(a);const s=c("div",{className:"item-stats"});for(const r in e.stats){const l=e.stats[r],d=le[r];if(!d)continue;const u=l>0?"+":"",h=d.isPercent?"%":"",p=d.text.replace("X","").trim(),f=c("p",{className:"item-stat-line",textContent:`${u}${l.toFixed(d.isPercent?1:0)}${h} ${p}`});e.implicitStatKeys&&e.implicitStatKeys.includes(r)&&f.classList.add("implicit-stat"),s.appendChild(f)}if(e.baseDefinition.uniqueEffect){const r=We[e.baseDefinition.uniqueEffect];r&&s.appendChild(c("p",{className:"item-unique-effect",textContent:r}))}t.appendChild(s);const n=c("div",{className:"item-card-footer"}),i=c("button",{textContent:"Équiper",className:"btn",onclick:()=>{C.emit("ui_equip_mode_toggled",{itemId:e.instanceId})}});n.appendChild(i);const o=c("button",{textContent:"Jeter",className:"btn discard-btn",onclick:()=>{C.emit("ui_sell_item_clicked",{itemId:e.instanceId})}});return n.appendChild(o),t.appendChild(n),t}function ms(){if(!Le||!qe||!De)return m.inventory;const e=Le.value,t=qe.value,a=De.value.toLowerCase();let s=[...m.inventory];return e!=="all"&&(s=s.filter(n=>{const i=n.baseDefinition.type;return e==="weapon"?i==="arme":e==="armor"?["tete","torse","jambes","mains","pieds"].includes(i):e==="jewelry"?["amulette","anneau1","anneau2"].includes(i)||n.baseDefinition.slot==="ring":i===e})),a&&(s=s.filter(n=>n.name.toLowerCase().includes(a))),s.sort((n,i)=>{if(t==="rarity"){const o={defective:0,common:1,magic:2,rare:3,epic:4,legendary:5,mythic:6,artifact:7};return(o[i.rarity.toLowerCase()]||0)-(o[n.rarity.toLowerCase()]||0)}return t==="level"?(i.level||0)-(n.level||0):t==="name"?n.name.localeCompare(i.name):0}),s}function Me(){if(!Ge)return;Ge.innerHTML="",ms().forEach(t=>{const a=ps(t);Ge.appendChild(a)})}function fs(){Ge=document.getElementById("inventory-grid"),Le=document.getElementById("inventory-filter"),qe=document.getElementById("inventory-sort"),De=document.getElementById("inventory-search"),Le&&Le.addEventListener("change",Me),qe&&qe.addEventListener("change",Me),De&&De.addEventListener("input",Me)}const hs={GOBLIN:{id:"goblin",name:"Gobelin",baseHp:30,damageType:"physical",baseDamage:2.5,baseAttackSpeed:1.2,appearsAtFloor:1,groupSize:{base:2,perFloor:.5,random:3},isFixedGroupSize:!1},ORC:{id:"orc",name:"Orque",baseHp:80,damageType:"physical",baseDamage:8,baseAttackSpeed:.8,appearsAtFloor:3,groupSize:{base:1,perFloor:.33,random:2},isFixedGroupSize:!1},SKELETON:{id:"skeleton",name:"Squelette",baseHp:150,damageType:"physical",baseDamage:10,baseAttackSpeed:1,appearsAtFloor:5,groupSize:{base:2,perFloor:.2,random:3},isFixedGroupSize:!1},GHOUL:{id:"ghoul",name:"Goule",baseHp:320,damageType:"physical",baseDamage:18,baseAttackSpeed:1,appearsAtFloor:10,groupSize:{base:1,perFloor:.1,random:1},isFixedGroupSize:!1},STONE_GOLEM:{id:"stone_golem",name:"Golem de pierre",baseHp:800,damageType:"physical",baseDamage:50,baseAttackSpeed:.5,appearsAtFloor:15,groupSize:{base:1,perFloor:0,random:1},isFixedGroupSize:!0},WAILING_SPECTRE:{id:"wailing_spectre",name:"Spectre Gémissant",baseHp:250,damageType:"physical",baseDamage:15,baseAttackSpeed:.9,appearsAtFloor:12,groupSize:{base:1,perFloor:.15,random:2},isFixedGroupSize:!1},ARMORED_CRYPT_GUARD:{id:"armored_crypt_guard",name:"Garde de Crypte en Armure",baseHp:1200,damageType:"physical",baseDamage:40,baseAttackSpeed:.6,appearsAtFloor:18,groupSize:{base:1,perFloor:0,random:1},isFixedGroupSize:!0},CHAOS_HYDRA:{id:"chaos_hydra",name:"Hydre du Chaos",baseHp:2500,damageType:"physical",baseDamage:60,baseAttackSpeed:1,appearsAtFloor:28,groupSize:{base:1,perFloor:0,random:1},isFixedGroupSize:!0},FOREST_SPIDER:{id:"forest_spider",name:"Araignée des Forêts",baseHp:40,damageType:"physical",baseDamage:3,baseAttackSpeed:1.5,appearsAtFloor:2,groupSize:{base:2,perFloor:.5,random:2},isFixedGroupSize:!1},DIRE_WOLF:{id:"dire_wolf",name:"Loup Sanguinaire",baseHp:100,damageType:"physical",baseDamage:10,baseAttackSpeed:1.1,appearsAtFloor:7,groupSize:{base:1,perFloor:.2,random:1},isFixedGroupSize:!1},SWARM_OF_BATS:{id:"swarm_of_bats",name:"Nuée de Chauves-souris",baseHp:20,damageType:"physical",baseDamage:1.5,baseAttackSpeed:2,appearsAtFloor:9,groupSize:{base:5,perFloor:1,random:5},isFixedGroupSize:!1}},wt=["Gorbuz","Kork","Grunt","Morglog","Zarg","Ugthak","Grolnok","Skarn","Marrow","Rotfang","Gravemaw","Dreadfang","Skullcrusher","Gloom","Gristle","Bilegut","Snarl","Gore"],Ft=["le Balafré","le Vilain","le Moche","le Terrible","le Sanguinaire","le Briseur d'Os","le Putride","le Massif","le Mangeur d'Âmes","le Tyran","le Fléau","le Sans-Pitié","le Broyeur","l'Immortel","le Conquérant","le Boucher","le Sombre"],xt=200,Nt=1.05,gs=25,vs=.33,da=1.15,bs=200,ys=25,Cs=1,_s=.15,ua=.5;let g=null,he=null;function Es(e){switch(g.gameStatus){case"fighting":case"boss_fight":g.activeMonster?g.activeMonster.isAlive()?g.heroes.every(t=>!t.isFighting())&&As():Ts():pa();break;case"party_wipe":Ss(e);break;case"encounter_cooldown":Is(e);break}}function Ss(e){let t=!0,a=!1;g.heroes.forEach(s=>{let n;g.partyWipeHealBoostActive?n=s.maxHp*vs*e:n=gs*e,s.regenerate(n,"regen",he,g).statusChanged&&(a=!0),s.hp<s.maxHp&&(t=!1)}),a&&(g.ui.heroesNeedUpdate=!0),t&&(g.heroes.forEach(s=>s.status="fighting"),g.gameStatus="encounter_cooldown",g.encounterCooldown=ua,g.ui.progressionNeedsUpdate=!0,g.ui.partyPanelNeedsUpdate=!0)}function Is(e){g.encounterCooldown-=e,g.encounterCooldown<=0&&pa()}function pa(){g.heroes.forEach(e=>{e instanceof oe&&(e.attackCycleInstance=0,e.attackCycleCooldown=0,e.dpsReferenceValueA=0,e.beamInstanceTimer=0)}),g.pendingBossFight?(g.pendingBossFight=!1,ks()):Ns()}function As(){g.pendingBossFight=!1,g.partyWipeHealBoostActive=!1,g.gameStatus="party_wipe",g.ui.progressionNeedsUpdate=!0,g.ui.partyPanelNeedsUpdate=!0}function Ts(){const e=g.activeMonster;if(!e)return;const t=(e.maxHp||e.totalMaxHp)*.1,a=(e.maxHp||e.totalMaxHp)*.5;he.emit("monster_defeated",{goldGained:t,xpGained:a}),he.emit("monster_defeated_by_type",{monsterId:e.id,count:e instanceof fe?e.initialCount:1}),Math.random()<_s&&xs(e),g.gameStatus==="boss_fight"?g.bossIsDefeated=!0:(g.encounterIndex>=g.encountersPerFloor&&!g.bossUnlockReached&&(g.bossUnlockReached=!0),g.encounterIndex++),g.activeMonster=null,g.gameStatus="encounter_cooldown",g.encounterCooldown=ua,g.ui.progressionNeedsUpdate=!0,g.ui.partyPanelNeedsUpdate=!0}function xs(e){const t=e.level||g.dungeonFloor,a=Object.keys(Ke),s=a[Math.floor(Math.random()*a.length)],n=Ke[s],i=new It(n,t,g.dungeonFloor);he.emit("item_dropped",{item:i})}function Ns(){const e=g.dungeonFloor,t=Object.values(hs).filter(l=>e>=l.appearsAtFloor);if(t.length===0)return;const a=t[Math.floor(Math.random()*t.length)],s={...a.groupSize};if(!a.isFixedGroupSize){const l=Math.floor((e-1)/10);s.base+=l*1,s.random+=l*2}let n=s.base+s.perFloor*e+Math.floor(Math.random()*s.random);n=Math.max(1,Math.floor(n));const i=Math.pow(da,e-1),o={...a,level:e,baseHp:Math.ceil(a.baseHp*i),baseDamage:parseFloat((a.baseDamage*i).toFixed(2)),baseAttackSpeed:a.baseAttackSpeed},r=new fe(o,n);g.gameStatus="fighting",g.activeMonster=r,g.ui.progressionNeedsUpdate=!0}function ks(){g.gameStatus="boss_fight",g.heroes.forEach(r=>{r.hp=r.maxHp,r.status="fighting"}),g.ui.heroesNeedUpdate=!0;const e=Math.pow(da,g.dungeonFloor-1),t=g.dungeonFloor,a=`${wt[Math.floor(Math.random()*wt.length)]} ${Ft[Math.floor(Math.random()*Ft.length)]}`,s=Math.ceil(bs*t*e),n=parseFloat((ys*e).toFixed(2)),i=Cs,o=new St(a,s,n,i,t);g.activeMonster=o,g.ui.progressionNeedsUpdate=!0}function $t(){g.bossIsDefeated&&(g.dungeonFloor++,g.highestFloorAchieved=Math.max(g.highestFloorAchieved,g.dungeonFloor),g.highestFloorThisRun=Math.max(g.highestFloorThisRun,g.dungeonFloor),Tt.checkUnlocks(g,he),g.encounterIndex=1,g.bossUnlockReached=!1,g.bossIsDefeated=!1,g.pendingBossFight=!1,g.activeMonster=null,g.gameStatus="encounter_cooldown",g.encounterCooldown=.5,g.ui.progressionNeedsUpdate=!0)}const ft={init:(e,t)=>{g=t,he=e,e.on("monster_defeated",a=>{const s=(t.prestigeUpgrades.GOLDEN_ECHO?W.GOLDEN_ECHO.effect(t.prestigeUpgrades.GOLDEN_ECHO)/100:0)+t.globalAuraBonuses.goldFind/100;t.gold+=a.goldGained*(1+s),Tt.checkUnlocks(t,e),t.ui.shopNeedsUpdate=!0}),e.on("ui_fight_boss_clicked",()=>{g.pendingBossFight=!0,he.emit("notification_requested",{message:"Le boss arrive ! Préparez-vous !",type:"success"}),g.ui.progressionNeedsUpdate=!0}),e.on("ui_next_floor_clicked",$t),e.on("ui_boost_heal_clicked",()=>{g.gameStatus==="party_wipe"&&!g.partyWipeHealBoostActive&&(g.partyWipeHealBoostActive=!0,g.ui.partyPanelNeedsUpdate=!0)})},update:Es,advanceToNextFloor:$t},xe=document.getElementById("heroes-area"),Gt=document.getElementById("party-power-score"),Vt=document.getElementById("party-combat-rating");function Rs(e,t){return!e||e.length===0?0:Math.floor(e.reduce((a,s)=>a+s.getPowerScore(t),0))}function Ls(e){if(!e||e.length===0)return 0;let t=0,a=0;if(e.forEach(n=>{const i=n.history;i&&(t+=(i.damageDealt||[]).reduce((o,r)=>o+r,0),a+=(i.healingReceived||[]).reduce((o,r)=>o+r,0),a+=(i.damageMitigated||[]).reduce((o,r)=>o+r,0),a+=(i.damageAvoided||[]).reduce((o,r)=>o+r,0),a+=(i.shieldAbsorption||[]).reduce((o,r)=>o+r,0))}),t===0&&a===0)return 0;const s=Math.sqrt(Math.max(1,t)*Math.max(1,a));return Math.floor(s)}function M(e,t,a,s={}){const{isPercent:n=!1,decimals:i=0,tooltip:o=""}=s,r=c("p",{title:o}),l=`<span>${e}</span>`;let d;const u=(t??0)+(a??0);if(a&&parseFloat(a.toFixed(i))!==0){const h=n?`${(u*100).toFixed(i)}%`:u.toFixed(i),p=a>0?"+":"",f=n?(a*100).toFixed(i):a.toFixed(i),_=a>0?"stat-increase":"stat-decrease";d=`<span>${h} <span class="${_}">(${p}${f})</span></span>`}else d=`<span>${n?`${((t??0)*100).toFixed(i)}%`:(t??0).toFixed(i)}</span>`;return r.innerHTML=l+d,r}function qs(e){const t=c("div",{className:"hero-equipment-display"});return["arme","torse","tete","jambes","mains","pieds","amulette","anneau1","anneau2","bibelot"].forEach(s=>{const n=e.equipment[s],i=s.charAt(0).toUpperCase()+s.slice(1),o=c("div",{className:"equipped-item",dataset:{slot:s}}),r=c("span",{className:"equipped-item-name"});n?(o.className=`equipped-item rarity-${n.rarity}`,r.textContent=`${i}: ${n.name}`,o.appendChild(r),o.appendChild(c("button",{className:"unequip-btn",textContent:"X",title:"Déséquiper",dataset:{heroId:e.id,slot:s}}))):(r.textContent=`${i}: Aucun`,o.appendChild(r)),t.appendChild(o)}),t}function Ds(e,t,a,s,n,i){const o=c("div",{className:"hero-card",dataset:{heroId:e.id}}),r=c("div",{className:"hero-main-content"}),l=c("div",{className:"hero-controls"}),d=c("div",{className:"hero-title"}),u=c("div",{className:"hero-title-text"});u.appendChild(c("strong",{className:"hero-name"})),u.appendChild(c("span",{className:"hero-level"})),d.appendChild(u),d.appendChild(c("div",{className:"hero-special-resource-container"}));const h=c("div",{className:"collapsed-info"});h.appendChild(c("p",{className:"hero-stats dps-text"}));const p=c("div",{className:"progress-bar-container hero-hp-container"});p.appendChild(c("div",{className:"progress-bar-fill hp hero-hp-bar"})),p.appendChild(c("div",{className:"progress-bar-fill shield hero-shield-bar"}));const f=c("div",{className:"progress-bar-container hero-xp-bar"});return f.appendChild(c("div",{className:"progress-bar-fill xp hero-xp-bar-fill"})),r.appendChild(d),r.appendChild(c("button",{className:"utility-icon-btn stats-btn",title:"Rapport de Combat",textContent:"📊",dataset:{heroId:e.id}})),r.appendChild(h),r.appendChild(c("div",{className:"hero-details-container"})),r.appendChild(p),r.appendChild(c("div",{className:"collapsed-buffs-container"})),r.appendChild(c("div",{className:"buffs-container"})),r.appendChild(c("p",{className:"hero-stats xp-text"})),r.appendChild(f),r.appendChild(qs(e)),r.appendChild(c("div",{className:"power-score-preview"})),l.appendChild(c("button",{className:"toggle-view-btn",dataset:{heroId:e.id}})),l.appendChild(c("button",{className:"move-hero-btn up",title:"Monter",textContent:"▲",dataset:{heroId:e.id,direction:"up"}})),l.appendChild(c("button",{className:"move-hero-btn down",title:"Descendre",textContent:"▼",dataset:{heroId:e.id,direction:"down"}})),o.appendChild(r),o.appendChild(l),ha(o,e,t,a,s,null,i),o}function Ms(e,t,a,s){e.innerHTML="";let n={};a&&(n=t.calculateStatChanges(s,a));const i=t.getAllStats(),o=s.dungeonFloor,r=xt*Math.pow(Nt,o-1),l=c("div",{className:"stats-group"});l.innerHTML="<h4>Attributs</h4>",l.appendChild(M("Force",i.strength,n.strength)),l.appendChild(M("Dextérité",i.dexterity,n.dexterity)),l.appendChild(M("Intelligence",i.intelligence,n.intelligence)),l.appendChild(M("Endurance",i.endurance,n.endurance));const d=c("div",{className:"stats-group"});d.innerHTML="<h4>Combat</h4>",d.appendChild(M("Dégâts",i.damage,n.damage,{decimals:1,tooltip:`Type: ${t.definition.damageType}`})),d.appendChild(M("Vit. Atk",i.attackSpeed,n.attackSpeed,{decimals:2,tooltip:"Attaques par seconde"})),d.appendChild(M("Chance Crit.",i.critChance,n.critChance,{isPercent:!0,decimals:1})),d.appendChild(M("Dégâts Crit.",i.critDamage,n.critDamage,{isPercent:!0,decimals:0}));const u=c("div",{className:"stats-group"});u.innerHTML="<h4>Défense</h4>";const h=(100*(i.armor+(n.armor||0))/(i.armor+(n.armor||0)+r)).toFixed(0);u.appendChild(M("Armure",i.armor,n.armor,{tooltip:`Réduit les dégâts de ${h}%`})),t instanceof Se&&u.appendChild(M("Riposte",t.riposteChance,n.riposteChance,{isPercent:!0,decimals:1,tooltip:`Chance d'annuler une attaque et de déclencher un effet :
- Esquive (50%)
- Parade (35%, renvoie 50% des dégâts)
- Contre-attaque (15%, inflige 100% de vos dégâts)`})),u.appendChild(M("Régén. HP",i.hpRegen,n.hpRegen,{decimals:1,tooltip:"HP par seconde"}));const p=c("div",{className:"stats-group"});if(p.innerHTML="<h4>Utilitaire</h4>",p.appendChild(M("Vol de Vie",i.lifeSteal,n.lifeSteal,{isPercent:!0,decimals:1})),p.appendChild(M("Épines",i.thorns,n.thorns)),p.appendChild(M("Or trouvé",i.goldFind,n.goldFind,{isPercent:!0,decimals:0})),t instanceof oe){const f=c("div",{className:"stats-group"});f.innerHTML="<h4>Protecteur</h4>",f.appendChild(M("Puiss. Bouclier",i.shieldPotency,n.shieldPotency,{isPercent:!0,decimals:0})),f.appendChild(M("Charge Rayon",i.beamChargeRate,n.beamChargeRate,{isPercent:!0,decimals:0})),e.appendChild(f)}if(t instanceof Ue){const f=c("div",{className:"stats-group"});f.innerHTML="<h4>Prêtre</h4>",f.appendChild(M("Puiss. Soins",t.finalHealPower,0,{decimals:1})),e.appendChild(f)}e.appendChild(l),e.appendChild(d),e.appendChild(u),e.appendChild(p)}function Ps(e,t,a,s){if(e.innerHTML="",!a)return;const n={...t.equipment},i=t.getPowerScore(s);let o=-1/0;const r=[];a.baseDefinition.slot==="ring"?r.push("anneau1","anneau2"):r.push(a.baseDefinition.slot),r.forEach(h=>{const p={...n,[h]:a};t.equipment=p,t.recalculateStats(s);const _=t.getPowerScore(s)-i;_>o&&(o=_)}),t.equipment=n,t.recalculateStats(s);const l=o,d=l>=0?"+":"",u=l>=0?"stat-increase":"stat-decrease";e.innerHTML=`Puissance : <span class="${u}">${d}${Math.floor(l)}</span>`}function Us(e,t){e.innerHTML="",t.buffs.activeBuffs?.forEach(a=>{const s=c("div",{className:"buff-icon",textContent:a.name.substring(0,1),title:`${a.name}: +${a.value.toFixed(1)}${a.stat.includes("Percent")?"%":""} (${a.duration.toFixed(0)}s)`}),n=c("div",{className:"buff-duration-bar",style:{width:`${a.duration/a.maxDuration*100}%`}});s.appendChild(n),e.appendChild(s)})}function ma(e,t){e&&(e.innerHTML="",t.buffs.activeBuffs?.forEach(a=>{const s=c("div",{className:"collapsed-buff-icon",textContent:a.name.substring(0,1),title:`${a.name}: +${a.value.toFixed(1)}${a.stat.includes("Percent")?"%":""} (${a.duration.toFixed(0)}s)`}),n=c("div",{className:"buff-duration-bar",style:{width:`${a.duration/a.maxDuration*100}%`}});s.appendChild(n),e.appendChild(s)}))}function Os(e,t){["arme","torse","tete","jambes","mains","pieds","amulette","anneau1","anneau2","bibelot"].forEach(s=>{const n=t.equipment[s],i=e.querySelector(`.equipped-item[data-slot="${s}"]`);if(!i)return;const o=i.querySelector(".equipped-item-name");let r=i.querySelector(".unequip-btn");n?(i.className=`equipped-item rarity-${n.rarity}`,o.textContent=`${s.charAt(0).toUpperCase()+s.slice(1)}: ${n.name}`,r||(r=c("button",{className:"unequip-btn",textContent:"X",title:"Déséquiper",dataset:{heroId:t.id,slot:s}}),i.appendChild(r))):(i.className="equipped-item",o.textContent=`${s.charAt(0).toUpperCase()+s.slice(1)}: Aucun`,r?.remove())})}function fa(e,t){if(e.innerHTML="",t instanceof ie)for(let a=0;a<t.doubloons;a++){const s=c("span",{className:"resource-bar doubloon"});e.appendChild(s)}else if(t instanceof oe)for(let a=1;a<t.attackCycleInstance;a++){const s=c("span",{className:"resource-bar beam-charge"});e.appendChild(s)}}function ha(e,t,a,s,n,i,o){e.classList.toggle("collapsed",n),e.classList.toggle("recovering",t.status==="recovering"),e.classList.toggle("equip-mode",!!i),e.querySelector(".hero-name").textContent=t.name,e.querySelector(".hero-level").textContent=`Niveau ${t.level}`,e.querySelector(".hero-controls .toggle-view-btn").textContent=n?"+":"-",Ms(e.querySelector(".hero-details-container"),t,i,o),Us(e.querySelector(".buffs-container"),t),ma(e.querySelector(".collapsed-buffs-container"),t),Os(e.querySelector(".hero-equipment-display"),t),Ps(e.querySelector(".power-score-preview"),t,i,o),fa(e.querySelector(".hero-special-resource-container"),t),ga(t,e);const r=e.querySelector(".move-hero-btn.up"),l=e.querySelector(".move-hero-btn.down");r.style.visibility=a>0?"visible":"hidden",l.style.visibility=a<s-1?"visible":"hidden"}function ga(e,t){if(!t)return;const a=e.hp/e.maxHp*100;t.querySelector(".hero-hp-bar").style.width=`${a}%`;const s=e.buffs.shieldHp/e.maxHp*100;t.querySelector(".hero-shield-bar").style.width=`${Math.min(100,s)}%`;const n=t.querySelector(".hero-stats.dps-text");if(n){const o=e.buffs.shieldHp>0?` (+${Math.ceil(e.buffs.shieldHp)})`:"";let r;e instanceof Ue?r=`HPS : ${(e.finalHealPower||0).toFixed(1)}`:r=`DPS : ${(e.damage*e.attackSpeed).toFixed(1)}`,n.textContent=`HP : ${Math.ceil(e.hp)}/${e.maxHp}${o} | ${r}`}const i=e.xp/e.xpToNextLevel*100;t.querySelector(".hero-xp-bar-fill").style.width=`${i}%`,t.querySelector(".xp-text").textContent=`${Math.floor(e.xp)} / ${e.xpToNextLevel} XP`,t.classList.toggle("is-low-hp",e.isFighting()&&a<25),ma(t.querySelector(".collapsed-buffs-container"),e),fa(t.querySelector(".hero-special-resource-container"),e)}function va(e,t){if(Gt){const a=Rs(e,t);Gt.textContent=a.toLocaleString("fr-FR")}if(Vt){const a=Ls(e);Vt.textContent=a.toLocaleString("fr-FR")}}function Bs(e,t){e&&(e.forEach(a=>{const s=xe.querySelector(`.hero-card[data-hero-id="${a.id}"]`);s&&ga(a,s)}),va(e,t))}function ba(e,t,a,s,n){const i=new Map;xe.querySelectorAll(".hero-card").forEach(d=>{i.set(d.dataset.heroId,d)});const o=e.map(d=>d.id),r=Array.from(xe.children),l=r.map(d=>d.dataset.heroId);JSON.stringify(o)!==JSON.stringify(l)&&e.forEach(d=>{const u=r.find(h=>h.dataset.heroId===d.id);u&&xe.appendChild(u)}),e.forEach((d,u)=>{const h=a[d.id]?.isCollapsed??!1;let p=i.get(d.id);p?(ha(p,d,u,e.length,h,t,n),i.delete(d.id)):(p=Ds(d,u,e.length,h,s,n),xe.appendChild(p))}),i.forEach(d=>d.remove()),va(e,n)}let Ve,je,ye,ht,at;function Hs(e,t,a){const s=c("div",{className:`item-card shop-item-card rarity-${e.rarity.toLowerCase()}`});s.dataset.itemIndex=t.shopItems.indexOf(e),s.addEventListener("click",r=>{const l=t.shopItems.indexOf(e);r.target.closest(".buy-item-btn")?a.emit("ui_shop_buy_item_clicked",{itemIndex:l}):a.emit("ui_shop_lock_item_toggled",{itemIndex:l})});const n=c("div",{className:"item-card-header"});n.appendChild(c("span",{textContent:e.name,className:"item-name"})),s.appendChild(n);const i=c("div",{className:"item-stats"});for(const r in e.stats){const l=e.stats[r],d=le[r];if(!d)continue;const u=l>0?"+":"",h=d.isPercent?"%":"",p=d.text.replace("X","").trim(),f=c("p",{className:"item-stat-line",textContent:`${u}${l.toFixed(d.isPercent?1:0)}${h} ${p}`});e.implicitStatKeys&&e.implicitStatKeys.includes(r)&&f.classList.add("implicit-stat"),i.appendChild(f)}if(e.baseDefinition.uniqueEffect){const r=We[e.baseDefinition.uniqueEffect];r&&i.appendChild(c("p",{className:"item-unique-effect",textContent:r}))}s.appendChild(i);const o=c("button",{textContent:`${e.cost} Or`,className:"buy-item-btn"});if((t.gold<e.cost||e.locked)&&(o.disabled=!0),s.appendChild(o),e.locked){s.classList.add("locked");const r=c("span",{textContent:"🔒",className:"lock-icon"});r.title="Cet objet est verrouillé. Cliquez en mode verrouillage pour le déverrouiller.",s.appendChild(r)}return s}function kt(e){if(!Ve)return;Ve.innerHTML="";const t=document.getElementById("shop-panel");if(t&&t.classList.toggle("lock-mode-active",e.ui.shopLockModeActive),ht&&ht.classList.toggle("active",e.ui.shopLockModeActive),e.shopItems.forEach(a=>{if(a){const s=Hs(a,e,e.eventBus);Ve.appendChild(s)}}),ye){const a=100*e.dungeonFloor;ye.title=`Rafraîchir la boutique (${a} Or)`}}function ya(e){if(je){const a=e.shopRestockTimer,s=a/60*100;je.style.setProperty("--timer-progress",`${s}%`),je.textContent=`${Math.ceil(60-a)}s`}}function ws(e,t){if(Ve=document.getElementById("shop-area"),ye=document.getElementById("refresh-shop-btn"),ht=document.getElementById("toggle-lock-mode-btn"),at=document.getElementById("buy-all-shop-button"),je=document.getElementById("shop-restock-timer-display"),ye){ye.addEventListener("click",()=>{e.emit("ui_reroll_shop_clicked")});const a=100*t.dungeonFloor;ye.title=`Rafraîchir la boutique (${a} Or)`}at&&at.addEventListener("click",()=>{e.emit("ui_buy_all_shop_clicked")})}const Ce=document.getElementById("loot-area"),_e=document.getElementById("pick-all-loot-button");function Fs(e,t){const a=c("div",{className:`item-card loot-item-card rarity-${e.rarity.toLowerCase()}`});a.dataset.itemIndex=t;const s=c("div",{className:"item-card-header"});s.appendChild(c("span",{className:"item-name",textContent:e.name})),s.appendChild(c("span",{className:"item-level",textContent:`Niv. ${e.level}`})),a.appendChild(s);const n=c("div",{className:"item-stats"});for(const l in e.stats){const d=e.stats[l],u=le[l];if(!u)continue;const h=d>0?"+":"",p=u.isPercent?"%":"",f=u.text.replace("X","").trim(),_=c("p",{className:"item-stat-line",textContent:`${h}${d.toFixed(u.isPercent?1:0)}${p} ${f}`});e.implicitStatKeys&&e.implicitStatKeys.includes(l)&&_.classList.add("implicit-stat"),n.appendChild(_)}if(e.baseDefinition.uniqueEffect){const l=We[e.baseDefinition.uniqueEffect];l&&n.appendChild(c("p",{className:"item-unique-effect",textContent:l}))}a.appendChild(n);const i=c("div",{className:"item-card-footer"}),o=c("button",{className:"btn discard-btn",textContent:"Jeter",dataset:{itemIndex:t},onclick:()=>{C.emit("ui_discard_loot_item_clicked",{itemInstanceId:m.droppedItems[t]?.instanceId})}});i.appendChild(o);const r=c("button",{className:"btn pick-item-btn",textContent:"Ramasser",dataset:{itemIndex:t},onclick:()=>{C.emit("ui_pick_item_clicked",{itemIndex})}});return i.appendChild(r),a.appendChild(i),a}function $s(){_e&&_e.addEventListener("click",()=>{C.emit("ui_pick_all_loot_clicked")}),Ce&&Ce.addEventListener("click",e=>{const t=e.target.closest(".pick-item-btn"),a=e.target.closest(".discard-btn");if(t){const s=parseInt(t.dataset.itemIndex,10);C.emit("ui_pick_item_clicked",{itemIndex:s})}else if(a){const s=parseInt(a.dataset.itemIndex,10);C.emit("ui_discard_loot_item_clicked",{itemInstanceId:m.droppedItems[s]?.instanceId})}})}function Ca(e){if(Ce){if(Ce.innerHTML="",!e||e.length===0){Ce.innerHTML="<p>Aucun butin à ramasser.</p>",_e&&(_e.style.display="none");return}else _e&&(_e.style.display="block");e.forEach((t,a)=>{const s=Fs(t,a);Ce.appendChild(s)})}}let R=null,Ee=null;function _a(e,t){return t===0?e.baseCost:Math.floor(e.baseCost*Math.pow(e.costScale,t))}function Gs(e){const t=W[e];if(!t){console.error(`Amélioration de prestige inconnue : ${e}`);return}const a=R.prestigeUpgrades[e]||0;if(a>=t.maxLevel){Ee.emit("notification_requested",{message:"Niveau maximum atteint !",type:"error"});return}const s=_a(t,a);if(R.soulEchos<s){Ee.emit("notification_requested",{message:"Pas assez d'Échos de l'Âme !",type:"error"});return}R.soulEchos-=s,R.prestigeUpgrades[e]=a+1,R.ui.prestigeNeedsUpdate=!0,R.ui.heroesNeedUpdate=!0,Ee.emit("notification_requested",{message:`${t.name} amélioré !`,type:"success"})}function Vs(){const e=Math.floor(Math.pow(R.highestFloorThisRun,1.5)/2);if(e<=0){Ee.emit("notification_requested",{message:"Vous devez progresser plus loin pour gagner plus d'Échos !",type:"error"});return}const t=`Voulez-vous vraiment effectuer une Renaissance ?

Votre progression (or, objets, étage, niveaux des héros) sera réinitialisée.

En récompense de vos efforts, vous gagnerez ${e} Échos de l'Âme.

Les Échos et les améliorations de prestige sont permanents.`;Ee.emit("confirmation_requested",{message:t,action:{type:"prestige_reset"}})}function js(){console.log("PrestigeManager: Exécution de la réinitialisation de prestige...");const e=Math.floor(Math.pow(R.highestFloorThisRun,1.5)/2);if(e<=0){console.log("PrestigeManager: Pas d'échos à gagner, annulation de la réinitialisation.");return}const t={soulEchos:R.soulEchos+e,prestigeUpgrades:R.prestigeUpgrades,highestFloorAchieved:Math.max(R.highestFloorAchieved,R.highestFloorThisRun),heroDefinitionsStatus:Object.fromEntries(Object.entries(R.heroDefinitions).map(([a,s])=>[a,s.status])),duelistUnlockedByPrestige:!0,options:R.options,prestigeCount:(R.prestigeCount||0)+1,artisanUnlocked:R.artisanUnlocked,resources:R.resources,prestigeUnlockConditionMet:R.prestigeUnlockConditionMet,trophies:R.trophies,tavernUnlocked:R.tavernUnlocked,tavern:{reputation:R.tavern.reputation,contractCooldowns:R.tavern.contractCooldowns,upgrades:R.tavern.upgrades,specialists:R.tavern.specialists}};te.savePrestige(t),console.log("PrestigeManager: Sauvegarde de prestige effectuée. Tentative de rechargement de la page..."),window.location.reload()}function zs(e){e.type==="prestige_reset"&&js()}const Ea={init:(e,t)=>{R=t,Ee=e,e.on("ui_prestige_buy_upgrade_clicked",a=>Gs(a.upgradeId)),e.on("ui_prestige_button_clicked",Vs),e.on("confirmation_accepted",zs)},getUpgradeCost:_a},we=document.getElementById("prestige-cards-container");function Ks(e){const t=c("div",{className:"prestige-card",dataset:{upgradeId:e}});return t.appendChild(c("h4")),t.appendChild(c("p")),t}function jt(e,t,a,s){const n=e.querySelector("h4");n.textContent=`${t.name} (${a} / ${t.maxLevel})`;const i=e.querySelector("p"),o=t.effect(a),r=t.effect(a+1)-o;let l=t.description.replace("{value}",t.formatValue(o)).replace("{nextValue}",t.formatValue(r));a>=t.maxLevel&&(l=l.split(" Prochain niveau")[0]),i.textContent=l;let d=e.querySelector(".buy-btn");if(a<t.maxLevel){const u=Ea.getUpgradeCost(t,a);d||(d=c("button",{className:"buy-btn",dataset:{upgradeId:t.id}}),e.appendChild(d)),d.textContent=`Améliorer (${u} Échos)`,d.disabled=s<u}else d&&d.remove()}function Sa(e){if(!we)return;we.innerHTML="";const t=new Map;we.querySelectorAll(".prestige-card").forEach(a=>{t.set(a.dataset.upgradeId,a)});for(const a in W){const s=W[a],n=e.prestigeUpgrades[a]||0;let i=t.get(a);i?(jt(i,s,n,e.soulEchos),t.delete(a)):(i=Ks(a),jt(i,s,n,e.soulEchos),we.appendChild(i))}t.forEach(a=>a.remove())}const Je={defective:{base:1,rare:0},common:{base:1,rare:0},magic:{base:3,rare:.1},rare:{base:5,rare:.5},epic:{base:8,rare:1},legendary:{base:10,rare:2},mythic:{base:15,rare:4},artifact:{base:25,rare:8}},Ne={base:50,scale:1.8,essenceBase:5,essenceScale:1.5},ze={base:250,essenceBase:10,essenceRare:2};let S=null,D=null;function Ys(e){const t=S.inventory[e];if(!t){D.emit("notification_requested",{message:"Erreur: Objet à recycler introuvable.",type:"error"});return}const a=Je[t.rarity],s=1+t.level/10,n=Math.ceil(a.base*s),i=Math.random()<a.rare?1:0;S.resources.essences.base+=n,i>0&&(S.resources.essences.rare+=i),S.inventory.splice(e,1),D.emit("notification_requested",{message:`+${n} essences de base.`,type:"success"}),i>0&&D.emit("notification_requested",{message:`+${i} essence rare !`,type:"success"}),S.ui.inventoryNeedsUpdate=!0,S.ui.artisanNeedsUpdate=!0}function zt(){let e=0,t=0;const a=[],s=[],n=["defective","common","magic","rare"];if(S.inventory.forEach(o=>{!o.locked&&n.includes(o.rarity)?s.push(o):a.push(o)}),s.length===0){D.emit("notification_requested",{message:"Aucun objet (jusqu'à Rare) non verrouillé à recycler.",type:"info"});return}s.forEach(o=>{const r=Je[o.rarity],l=1+o.level/10,d=Math.ceil(r.base*l),u=Math.random()<r.rare?1:0;e+=d,t+=u}),S.resources.essences.base+=e,S.resources.essences.rare+=t,S.inventory=a;let i=`Recyclage basique terminé ! +${e} essences de base.`;t>0&&(i+=` +${t} essences rares.`),D.emit("notification_requested",{message:i,type:"success"}),S.ui.inventoryNeedsUpdate=!0,S.ui.artisanNeedsUpdate=!0,D.emit("artisan_item_selected",{itemIndex:null})}function Kt(){let e=0,t=0;const a=[],s=[];if(S.inventory.forEach(i=>{i.locked?a.push(i):s.push(i)}),s.length===0){D.emit("notification_requested",{message:"Aucun objet non verrouillé à recycler.",type:"info"});return}s.forEach(i=>{const o=Je[i.rarity],r=1+i.level/10,l=Math.ceil(o.base*r),d=Math.random()<o.rare?1:0;e+=l,t+=d}),S.resources.essences.base+=e,S.resources.essences.rare+=t,S.inventory=a;let n=`Recyclage avancé terminé ! +${e} essences de base.`;t>0&&(n+=` +${t} essences rares.`),D.emit("notification_requested",{message:n,type:"success"}),S.ui.inventoryNeedsUpdate=!0,S.ui.artisanNeedsUpdate=!0,D.emit("artisan_item_selected",{itemIndex:null})}function Xs(e){if(!e)return;const t=Math.floor(Ne.base*Math.pow(Ne.scale,e.upgradeLevel)),a=Math.floor(Ne.essenceBase*Math.pow(Ne.essenceScale,e.upgradeLevel));if(S.gold<t||S.resources.essences.base<a){D.emit("notification_requested",{message:"Ressources insuffisantes.",type:"error"});return}S.gold-=t,S.resources.essences.base-=a,e.upgradeLevel++;const s=e.baseDefinition.stat,n=e.stats[s];e.stats[s]=Math.ceil(n*1.1),D.emit("notification_requested",{message:`${e.name} amélioré au niveau +${e.upgradeLevel} !`,type:"success"}),S.ui.artisanNeedsUpdate=!0,S.ui.heroesNeedUpdate=!0}function Ws(e,t){if(!e||!t)return;if(e.reforgedAffixKey&&e.reforgedAffixKey!==t){D.emit("notification_requested",{message:"Un autre affixe est déjà verrouillé pour la reforge sur cet objet.",type:"error"});return}const a=ze.base*e.level,s=ze.essenceBase,n=ze.essenceRare;if(S.gold<a||S.resources.essences.base<s||S.resources.essences.rare<n){D.emit("notification_requested",{message:"Ressources insuffisantes pour reforger.",type:"error"});return}const o=[...e.baseDefinition.possibleAffixes||[]].filter(d=>d===t?!0:!(e.baseDefinition.possibleMaluses||{})[d]);if(o.length<=1){D.emit("notification_requested",{message:"Aucun autre affixe positif possible à obtenir pour la reforge.",type:"error"});return}S.gold-=a,S.resources.essences.base-=s,S.resources.essences.rare-=reforgeCostEssenceRare,delete e.stats[t],delete e.affixes[t];const r=o[Math.floor(Math.random()*o.length)];let l=(Math.random()*.5+.5)*e.level;le[r].isPercent?l=parseFloat((l*.5).toFixed(2)):l=Math.ceil(l*2),e.affixes[r]=l,e.stats[r]=l,e.reforgedAffixKey=r,D.emit("notification_requested",{message:"Objet reforgé avec succès !",type:"success"}),S.ui.artisanNeedsUpdate=!0,S.ui.heroesNeedUpdate=!0}function Js(e){const{action:t,affixKey:a}=e,s=S.ui.artisanSelectedItemIndex;if(s==null){D.emit("notification_requested",{message:"Veuillez sélectionner un objet d'abord.",type:"error"});return}const n=S.inventory[s];if(!n){D.emit("notification_requested",{message:"Objet introuvable dans l'inventaire à l'index sélectionné.",type:"error"});return}switch(t){case"recycle":Ys(s),D.emit("artisan_item_selected",{itemIndex:null});break;case"upgrade":Xs(n);break;case"reforge":Ws(n,a);break;default:console.warn(`ArtisanManager: Unknown action: ${t}`);break}}const ee={init:(e,t)=>{S=t,D=e,e.on("ui_artisan_action_clicked",Js),e.on("artisan_item_selected",a=>{S.ui.artisanSelectedItemIndex===a.itemIndex?S.ui.artisanSelectedItemIndex=null:S.ui.artisanSelectedItemIndex=a.itemIndex,S.ui.artisanNeedsUpdate=!0}),e.on("confirmation_accepted",a=>{a.type==="recycle_basic_items"?zt():a.type==="recycle_all_items_advanced"&&Kt()})},UPGRADE_COST:Ne,REFORGE_COST:ze,recycleBasicItemsConfirmed:zt,recycleAllItemsConfirmed:Kt,recycleItemImmediately:e=>{const t=Je[e.rarity],a=1+e.level/10,s=Math.ceil(t.base*a),n=Math.random()<t.rare?1:0;S.resources.essences.base+=s,n>0&&(S.resources.essences.rare+=n),D.emit("notification_requested",{message:`Objet recyclé automatiquement : ${e.name} (+${s} Ess. Base${n>0?`, +${n} Ess. Rare`:""}).`,type:"info"}),S.ui.artisanNeedsUpdate=!0}},F=document.getElementById("artisan-panel");let gt=!1,se=null,vt="artisan-recycle";const Qs=["defective","common","magic","rare","epic","legendary","mythic","artifact"];function Zs(){F.innerHTML="<h2>Forge</h2>";const e=c("div",{className:"artisan-resources"});e.innerHTML=`
        <div class="essence-list">
            <p>Essences de base: <span id="artisan-base-essence">0</span></p>
            <p>Essences rares: <span id="artisan-rare-essence">0</span></p>
        </div>
    `;const t=c("div",{className:"artisan-recycle-buttons"}),a=c("button",{id:"recycle-basic-btn",className:"btn discard-btn",title:"Recycle tous les objets non verrouillés de qualité Défectueux, Commun, Magique et Rare.",textContent:"Recyclage basique"});t.appendChild(a);const s=c("button",{id:"recycle-advanced-btn",className:"btn discard-btn",title:"Recycle TOUS les objets non verrouillés, quelle que soit leur qualité. Soyez prudent !",textContent:"Recyclage avancé"});t.appendChild(s),e.appendChild(t);const n=c("div",{className:"artisan-main-layout"});n.innerHTML=`
        <div class="artisan-inventory-column">
            <div class="artisan-inventory-header">
                <h3>Inventaire</h3>
            </div>
            <div class="artisan-inventory-grid"></div>
        </div>
        <div class="artisan-workspace">
            <div class="artisan-item-slot">
                <span class="placeholder">Sélectionnez un objet</span>
            </div>
            <div class="artisan-actions">
                <div class="tab-buttons">
                    <button class="tab-btn active" data-tab="artisan-recycle">Recycler</button>
                    <button class="tab-btn" data-tab="artisan-upgrade">Améliorer</button>
                    <button class="tab-btn" data-tab="artisan-reforge">Reforger</button>
                </div>
                <div id="artisan-recycle" class="tab-content active"></div>
                <div id="artisan-upgrade" class="tab-content"></div>
                <div id="artisan-reforge" class="tab-content"></div>
            </div>
        </div>
    `,F.append(e,n),gt=!0;const i=F.querySelectorAll(".tab-buttons .tab-btn");i.forEach(l=>{l.addEventListener("click",d=>{const u=d.target.dataset.tab;vt=u,i.forEach(h=>h.classList.remove("active")),F.querySelectorAll(".tab-content").forEach(h=>h.classList.remove("active")),d.target.classList.add("active"),document.getElementById(u).classList.add("active")})});const o=F.querySelector("#recycle-basic-btn");o&&o.addEventListener("click",()=>{se&&se.emit("confirmation_requested",{message:"Êtes-vous sûr de vouloir recycler tous les objets Défectueux, Communs, Magiques et Rares non verrouillés ? Cette action est irréversible.",action:{type:"recycle_basic_items"}})});const r=F.querySelector("#recycle-advanced-btn");r&&r.addEventListener("click",()=>{se&&se.emit("confirmation_requested",{message:"ATTENTION : Êtes-vous ABSOLUMENT sûr de vouloir recycler TOUS les objets non verrouillés de votre inventaire, quelle que soit leur qualité ? Cette action est irréversible et inclura les objets Épiques, Légendaires, Mythiques et Artefacts !",action:{type:"recycle_all_items_advanced"}})})}function en(e){const t=F.querySelector(".artisan-inventory-grid");t&&(t.innerHTML="",e.inventory.forEach((a,s)=>{const n=c("div",{className:"artisan-item-card",dataset:{itemIndex:s}});s===e.ui.artisanSelectedItemIndex?n.classList.add("selected"):n.classList.remove("selected"),n.innerHTML=`<div class="artisan-item-info rarity-${a.rarity}">${a.name} (Niv. ${a.level})</div>`,t.appendChild(n)}))}function tn(e){const t=e.ui.artisanSelectedItemIndex,a=e.inventory[t],s=F.querySelector(".artisan-item-slot"),n=document.getElementById("artisan-recycle"),i=document.getElementById("artisan-upgrade"),o=document.getElementById("artisan-reforge");if(!a){s.innerHTML='<span class="placeholder">Sélectionnez un objet</span>',n.innerHTML="",i.innerHTML="",o.innerHTML="";return}s.innerHTML=`<div class="artisan-item-info rarity-${a.rarity}">${a.name} (Niv. ${a.level})</div>`,n.innerHTML=`
        <p class="artisan-action-description">Détruit l'objet pour récupérer des essences arcaniques. Cette action est irréversible.</p>
        <button class="artisan-confirm-btn discard-btn" data-action="recycle">Recycler</button>
    `;const r=Math.floor(ee.UPGRADE_COST.base*Math.pow(ee.UPGRADE_COST.scale,a.upgradeLevel)),l=Math.floor(ee.UPGRADE_COST.essenceBase*Math.pow(ee.UPGRADE_COST.essenceScale,a.upgradeLevel));i.innerHTML=`
        <p class="artisan-action-description">Améliore la statistique principale de l'objet. Chaque niveau augmente le coût de la prochaine amélioration.</p>
        <div class="artisan-cost">Coût : ${r} Or, ${l} Essences</div>
        <button class="artisan-confirm-btn buy-btn" data-action="upgrade">Améliorer (+${a.upgradeLevel})</button>
    `;const d=ee.REFORGE_COST.base*a.level,u=ee.REFORGE_COST.essenceBase,h=ee.REFORGE_COST.essenceRare;let p=`<p class="artisan-action-description">Choisissez un affixe à modifier. Une fois choisi, les autres affixes seront verrouillés pour cet objet. La reforge consomme des ressources et remplace l'affixe par un autre, aléatoirement.</p>`;const f=c("ul",{className:"artisan-reforge-affix-list"});for(const A in a.affixes){const x=a.reforgedAffixKey&&a.reforgedAffixKey!==A,k=c("li");if(x&&k.classList.add("locked"),k.innerHTML=`<span>${le[A].text.replace("X",a.affixes[A])}</span>`,!x){const $=c("button",{textContent:"Reforger",dataset:{action:"reforge",affixKey:A}});$.classList.add("artisan-confirm-btn"),k.appendChild($)}f.appendChild(k)}o.innerHTML=p,o.appendChild(f),o.appendChild(c("div",{className:"artisan-cost",textContent:`Coût : ${d} Or, ${u} Essences, ${h} Essences Rares`})),F.querySelectorAll(".artisan-confirm-btn").forEach(A=>{A.removeEventListener("click",Yt),A.addEventListener("click",Yt)})}function Yt(e){const t=e.target.dataset.action,a=e.target.dataset.affixKey;se&&se.emit("ui_artisan_action_clicked",{action:t,affixKey:a})}function Ia(e,t){if(se=t,!e.artisanUnlocked){F.innerHTML=`
            <div class="locked-feature-message">
                <h2>Forge</h2>
                <p>Continuez d'explorer le donjon pour débloquer la forge.</p>
            </div>
        `,gt=!1;return}gt||Zs(),document.getElementById("artisan-base-essence").textContent=e.resources.essences.base,document.getElementById("artisan-rare-essence").textContent=e.resources.essences.rare;let a=F.querySelector("#artisan-loot-filter-section");if(e.blacksmithUnlocked){if(!a){a=c("div",{id:"artisan-loot-filter-section",className:"artisan-section"}),a.innerHTML=`
                <h3>Filtre de Butin (Forgeron)</h3>
                <div class="filter-controls">
                    <label class="checkbox-container">
                        <input type="checkbox" id="loot-filter-toggle" ${e.options.lootFilterActive?"checked":""}>
                        <span class="checkmark"></span> Activer le filtre
                    </label>
                    <div class="filter-rarity-select">
                        <label for="loot-filter-rarity">Recycler jusqu'à :</label>
                        <select id="loot-filter-rarity"></select>
                    </div>
                </div>
                <p class="filter-description">Les objets de rareté inférieure ou égale au seuil sélectionné seront automatiquement recyclés à la chute.</p>
            `,F.querySelector(".artisan-resources").after(a);const i=a.querySelector("#loot-filter-rarity");Qs.forEach(o=>{const r=c("option",{value:o,textContent:o.charAt(0).toUpperCase()+o.slice(1)});i.appendChild(r)}),a.querySelector("#loot-filter-toggle").addEventListener("change",o=>{se.emit("ui_toggle_loot_filter_clicked",{active:o.target.checked})}),a.querySelector("#loot-filter-rarity").addEventListener("change",o=>{se.emit("ui_loot_filter_rarity_changed",{rarity:o.target.value})})}a.querySelector("#loot-filter-rarity").value=e.options.lootFilterRarityThreshold,a.querySelector("#loot-filter-toggle").checked=e.options.lootFilterActive,a.classList.remove("hidden")}else a&&a.classList.add("hidden");en(e),tn(e);const s=F.querySelector(`.tab-buttons button[data-tab="${vt}"]`),n=document.getElementById(vt);s&&n&&(F.querySelectorAll(".tab-buttons .tab-btn").forEach(i=>i.classList.remove("active")),F.querySelectorAll(".tab-content").forEach(i=>i.classList.remove("active")),s.classList.add("active"),n.classList.add("active"))}const Qe=document.getElementById("floating-text-container"),ne=document.getElementById("save-indicator"),an=.3;function sn(e,t="error",a=null){let s=document.getElementById("notification-area");s||(s=c("div",{id:"notification-area"}),document.body.appendChild(s));const n=c("div",{className:`notification ${t}`,textContent:e});if(a){const i=a.getBoundingClientRect();n.style.position="absolute",n.style.top=`${i.top-30}px`,n.style.left=`${i.left+i.width/2}px`,n.style.transform="translateX(-50%)",Qe.appendChild(n)}else s.appendChild(n);requestAnimationFrame(()=>{n.classList.add("show")}),setTimeout(()=>{n.classList.remove("show"),n.addEventListener("transitionend",()=>n.remove())},t==="riposte"?1e3:3e3)}function Pe(e,t,a){let s;switch(t){case"crit":s=`${Math.ceil(e)}!`;break;case"shield":s=`+${Math.ceil(e)}`;break;case"lifesteal":case"heal":s=`+${Math.ceil(e)}`;break;default:s=Math.ceil(e);break}const n=c("div",{className:`floating-text ${t}`,textContent:s}),i=a.getBoundingClientRect(),o=i.width*(.2+Math.random()*.6);n.style.left=`${i.left+o}px`,n.style.top=`${i.top+20}px`,Qe.appendChild(n),n.style.animation="floatUp 1.5s ease-out forwards",n.addEventListener("animationend",()=>n.remove())}function nn(e,t,a){let s=`${Math.ceil(e)}`;t>=5?s+="!!!":t>=2?s+="!!":t>=1&&(s+="!");const n=c("div",{className:"floating-text beam",textContent:s}),i=a.getBoundingClientRect(),o=i.width*(.2+Math.random()*.6);n.style.left=`${i.left+o}px`,n.style.top=`${i.top+20}px`,Qe.appendChild(n),n.style.animation="floatUp 1.5s ease-out forwards",n.addEventListener("animationend",()=>n.remove())}function on(e,t,a){const s=c("div",{className:`floating-text flavor-text ${t}`,textContent:e}),n=a.getBoundingClientRect(),i=n.width*(.2+Math.random()*.6);s.style.left=`${n.left+i}px`,s.style.top=`${n.top}px`,s.style.transform="translateX(-50%)",Qe.appendChild(s),s.style.animation="flavorPop 0.8s ease-out forwards",s.addEventListener("animationend",()=>s.remove())}function rn(e,t){for(const a in e.damageBuckets){const s=e.damageBuckets[a];if(s.timer-=t,s.timer<=0){const n=a==="monster"?document.getElementById("monster-area"):document.querySelector(`.hero-card[data-hero-id="${a}"]`);n&&(s.damage>0&&Pe(s.damage,"damage",n),s.crit>0&&Pe(s.crit,"crit",n),s.heal>0&&Pe(s.heal,"heal",n)),s.damage=0,s.crit=0,s.heal=0,s.timer=an}}}function cn(){ne.classList.remove("hidden","saved"),ne.classList.add("saving"),ne.querySelector(".icon").textContent="⚙️",ne.querySelector(".text").textContent="Sauvegarde..."}function ln(){ne.classList.remove("saving"),ne.classList.add("saved"),ne.querySelector(".icon").textContent="✔️",ne.querySelector(".text").textContent="Sauvegardé !"}function dn(){ne.classList.add("hidden")}function un(e,t,a,s){const n=c("div",{className:"modal-overlay"}),i=c("div",{className:"modal-content"});i.appendChild(c("p",{textContent:e}));const o=c("div",{className:"modal-buttons"}),r=c("button",{textContent:"Confirmer",className:"buy-btn"});r.addEventListener("click",()=>{t&&a&&t.emit("confirmation_accepted",a),n.remove()}),o.appendChild(r);const l=c("button",{textContent:"Annuler",className:"discard-btn"});l.addEventListener("click",()=>{s&&s(),n.remove()}),o.appendChild(l),i.appendChild(o),n.appendChild(i),document.body.appendChild(n)}function pn(e,t){if(document.getElementById("options-modal-overlay"))return;const a=c("div",{id:"options-modal-overlay",className:"modal-overlay"}),s=c("div",{className:"modal-content options-modal"}),n=c("div",{className:"modal-header"});n.appendChild(c("h2",{textContent:"Options"}));const i=c("button",{textContent:"X",className:"close-btn"});i.addEventListener("click",()=>a.remove()),n.appendChild(i),s.appendChild(n);const o=c("div",{className:"modal-body"}),r=Xt("auto-fight-boss","Combattre le boss automatiquement","Si coché, le groupe affrontera le gardien de l'étage dès qu'il sera disponible.",e.options.autoFightBoss);o.appendChild(r);const l=Xt("auto-next-floor","Avancer à l'étage suivant automatiquement","Si coché, le groupe avancera à l'étage suivant dès que le boss sera vaincu.",e.options.autoNextFloor);o.appendChild(l);const d=c("div",{className:"danger-zone"});d.appendChild(c("h3",{textContent:"Zone de Danger"}));const u=c("button",{className:"danger-btn",textContent:"Recommencer la partie"});u.title="Réinitialise la partie en cours (sans prestige)",u.addEventListener("click",()=>{t.emit("ui_soft_reset_clicked"),a.remove()});const h=c("button",{className:"danger-btn",textContent:"Réinitialisation Complète"});h.title="Efface TOUTES les données de sauvegarde (partie et prestige)",h.addEventListener("click",()=>{t.emit("ui_hard_reset_clicked"),a.remove()});const p=c("button",{className:"danger-btn",textContent:"Gagner 1000 Renommée (Dev)"});p.title="Ajoute instantanément 1000 Renommée pour le développement.",p.addEventListener("click",()=>{m.tavern.reputation+=1e3,m.ui.tavernNeedsUpdate=!0,t.emit("notification_requested",{message:"1000 Renommée ajoutée !",type:"success"})});const f=c("button",{className:"danger-btn",textContent:"Réinitialiser les Spécialistes (Dev)"});f.title='Réinitialise le statut de tous les spécialistes à "verrouillé" et réinitialise les fonctionnalités associées.',f.addEventListener("click",()=>{for(const _ in U)m.tavern.specialists[_]&&(m.tavern.specialists[_].status=U[_].status||"locked");m.blacksmithUnlocked=!1,m.ui.tavernNeedsUpdate=!0,m.ui.artisanNeedsUpdate=!0,t.emit("notification_requested",{message:"Déblocage des spécialistes réinitialisé.",type:"success"})}),d.append(u,h,p,f),o.appendChild(d),s.appendChild(o),a.appendChild(s),document.body.appendChild(a),s.querySelector("#auto-fight-boss-checkbox").addEventListener("change",_=>{t.emit("option_changed",{key:"autoFightBoss",value:_.target.checked})}),s.querySelector("#auto-next-floor-checkbox").addEventListener("change",_=>{t.emit("option_changed",{key:"autoNextFloor",value:_.target.checked})})}function Xt(e,t,a,s){const n=c("div",{className:"option-wrapper"}),i=c("input",{type:"checkbox",id:`${e}-checkbox`,checked:s}),o=c("label",{htmlFor:`${e}-checkbox`,textContent:t}),r=c("div",{className:"option-text"});return r.appendChild(o),r.appendChild(c("p",{className:"option-help",textContent:a})),n.appendChild(i),n.appendChild(r),n}let ke=null;function mn(e){let t=0,a=0;return e.map(s=>(t+=s,a++,a>0?t/a:0))}function fn(e,t){if(!e)return c("div",{className:"stats-modal-item-card empty-slot",innerHTML:`<span class="slot-name">${t}</span><span class="item-name">Vide</span>`});const a=c("div",{className:`stats-modal-item-card item-card rarity-${e.rarity.toLowerCase()}`}),s=c("div",{className:"item-card-header"});s.appendChild(c("span",{className:"slot-name",textContent:t})),s.appendChild(c("span",{className:"item-name",textContent:e.name})),a.appendChild(s);const n=c("div",{className:"item-stats"});for(const i in e.stats){const o=e.stats[i],r=le[i];if(!r)continue;const l=o>0?"+":"",d=r.isPercent?"%":"",u=r.text.replace("X","").trim(),h=c("p",{className:"item-stat-line",textContent:`${l}${o.toFixed(r.isPercent?1:0)}${d} ${u}`});e.implicitStatKeys&&e.implicitStatKeys.includes(i)&&h.classList.add("implicit-stat"),n.appendChild(h)}if(e.baseDefinition.uniqueEffect){const i=We[e.baseDefinition.uniqueEffect];i&&n.appendChild(c("p",{className:"item-unique-effect",textContent:i}))}return a.appendChild(n),a}function hn(e,t,a){ke&&ke.close(),ke=new gn(e,t,a),ke.render()}class gn{constructor(t,a,s){this.hero=t,this.party=a.heroes,this.heroIndex=this.party.findIndex(n=>n.id===t.id),this.state=a,this.eventBus=s,this.isPriest=t.id==="priest",this.isProtector=t.id==="protector",this.charts={},this.domElements={},this.updateInterval=null}render(){this.overlay=c("div",{id:"stats-modal-overlay",className:"modal-overlay"}),this.modal=c("div",{className:"modal-content stats-modal-content"}),this.overlay.addEventListener("click",s=>{s.target===this.overlay&&this.close()});const t=this.createHeader(),a=this.createBody();this.modal.append(t,a),this.overlay.appendChild(this.modal),document.body.appendChild(this.overlay),requestAnimationFrame(()=>{this.initCharts(),this.updateAllSections(),this.updateInterval=setInterval(()=>this.updateAllSections(),1e3)})}createHeader(){const t=c("div",{className:"modal-header"}),a=c("div",{className:"modal-title-container"});this.domElements.headerTitle=c("h2",{textContent:`Rapport de Combat : ${this.hero.name}`});const s=c("div",{className:"modal-nav-controls"});this.domElements.prevBtn=c("button",{textContent:"<",className:"nav-btn",title:"Héros précédent"}),this.domElements.nextBtn=c("button",{textContent:">",className:"nav-btn",title:"Héros suivant"}),this.domElements.prevBtn.addEventListener("click",()=>this.navigateToHero("prev")),this.domElements.nextBtn.addEventListener("click",()=>this.navigateToHero("next")),s.append(this.domElements.prevBtn,this.domElements.nextBtn),a.append(this.domElements.headerTitle,s),t.appendChild(a);const n=c("button",{textContent:"X",className:"close-btn"});return n.addEventListener("click",()=>this.close()),t.appendChild(n),this.updateNavButtons(),t}createBody(){const t=c("div",{className:"modal-body"}),a=c("div",{className:"stats-modal-main"});this.domElements.statsSection=c("div",{className:"stats-modal-section"}),this.domElements.equipmentSection=c("div",{className:"stats-modal-section"}),a.append(this.domElements.statsSection,this.domElements.equipmentSection);const s=this.createPieChartsSection(),n=this.createTimeChartsSection();this.domElements.logList=c("div",{className:"combat-log-list"});const i=c("div",{className:"stats-modal-section combat-log-container"});return i.innerHTML="<h3>Journal de Combat</h3>",i.appendChild(this.domElements.logList),t.append(a,s,n,i),t}createPieChartsSection(){const t=c("div",{className:"stats-modal-pie-charts"}),a=c("div",{className:"stats-modal-section"});a.innerHTML='<h3>Sources de Dégâts</h3><div class="pie-chart-container"><canvas id="damage-pie-chart"></canvas></div>';const s=c("div",{className:"stats-modal-section"});return s.innerHTML='<h3>Sources de Survie</h3><div class="pie-chart-container"><canvas id="survival-pie-chart"></canvas></div>',t.append(a,s),t}createTimeChartsSection(){const t=c("div",{className:"stats-modal-section"});t.innerHTML="<h3>Historique de Combat (60s)</h3>";const a=c("div",{className:"time-charts-container"}),s=c("div",{className:"time-chart-item"});s.innerHTML='<div class="chart-container"><canvas id="hp-chart"></canvas></div>',this.domElements.hpSummary=c("div",{className:"chart-summary"}),s.appendChild(this.domElements.hpSummary),a.appendChild(s);const n=c("div",{className:"time-chart-item"});return n.innerHTML='<div class="chart-container"><canvas id="performance-chart"></canvas></div>',this.domElements.performanceSummary=c("div",{className:"chart-summary"}),n.appendChild(this.domElements.performanceSummary),a.appendChild(n),t.appendChild(a),t}updateAllSections(){this.updateStats(),this.updateEquipment(),this.updateCharts(),this.updateCombatLog()}updateStats(){this.domElements.statsSection.innerHTML="<h3>Statistiques Détaillées</h3>";const t=c("div",{className:"stats-modal-stats-grid"}),a=this.hero.getAllStats(),s={Attributs:["strength","dexterity","intelligence","endurance"],Combat:["damage","attackSpeed","critChance","critDamage"],Défense:["maxHp","armor","hpRegen","riposteChance"],Support:["finalHealPower","finalBuffChance","finalBuffPotency","healPercent"],Utilitaire:["goldFind","lifeSteal","thorns"]};this.hero instanceof oe&&(s.Protecteur=["shieldPotency","beamChargeRate"]);for(const n in s){if(!s[n].some(r=>a[r]!==void 0&&a[r]!==0))continue;const o=c("div",{className:"stats-group"});o.appendChild(c("h4",{textContent:n})),s[n].forEach(r=>{const l=a[r];if(l!==void 0){const d=l,u=r.includes("Chance")||r.includes("goldFind")||r.includes("lifeSteal")||r.includes("Potency")||r.includes("Percent")||r.includes("Rate"),h=Number.isInteger(d)||d===0?0:2;let p=r.replace("final","").replace("Percent","").replace("Rate","");p=p.charAt(0).toUpperCase()+p.slice(1);const f=`${p}: ${u?(d*100).toFixed(h)+"%":d.toFixed(h)}`;o.appendChild(c("p",{textContent:f}))}}),t.appendChild(o)}this.domElements.statsSection.appendChild(t)}updateEquipment(){this.domElements.equipmentSection.innerHTML="<h3>Équipement</h3>";const t=c("div",{className:"stats-modal-equipment-grid"}),a=["arme","tete","torse","jambes","mains","pieds","amulette","anneau1","anneau2","bibelot"];for(const s of a){const n=this.hero.equipment[s],i=s.charAt(0).toUpperCase()+s.slice(1),o=fn(n,i);t.appendChild(o)}this.domElements.equipmentSection.appendChild(t)}updateCombatLog(){this.domElements.logList.innerHTML="",this.hero.history.log.slice().reverse().forEach(t=>{this.domElements.logList.appendChild(c("p",{textContent:t.message,className:`log-event-${t.type}`}))})}initCharts(){const t=document.getElementById("hp-chart")?.getContext("2d");t&&(this.charts.hp=new Chart(t,{data:{labels:Array(60).fill(""),datasets:[{type:"line",label:"Points de Vie",yAxisID:"y-hp",data:[],fill:!0,borderColor:"hsl(200, 80%, 60%)",backgroundColor:"hsla(200, 80%, 60%, 0.2)",borderWidth:2,tension:.1,pointRadius:0},{type:"bar",label:"Soins Reçus",yAxisID:"y-flux",data:[],backgroundColor:"hsl(120, 60%, 50%)",borderWidth:0},{type:"bar",label:"Vol de Vie",yAxisID:"y-flux",data:[],backgroundColor:"hsl(300, 70%, 50%)",borderWidth:0},{type:"bar",label:"Dégâts Subis",yAxisID:"y-flux",data:[],backgroundColor:"hsl(0, 70%, 55%)",borderWidth:0}]},options:this.getChartOptions({y1Label:"Points de Vie",y2Label:"Flux HP/s",y1Max:this.hero.maxHp*1.1})}));const a=this.isPriest?"HPS":"DPS",s=document.getElementById("performance-chart")?.getContext("2d");s&&(this.charts.performance=new Chart(s,{data:{labels:Array(60).fill(""),datasets:[{type:"bar",label:a,data:[],backgroundColor:this.isPriest?"hsl(120, 60%, 50%)":"hsl(50, 100%, 50%)",borderWidth:0},{type:"line",label:`Moyenne ${a}`,data:[],borderColor:this.isPriest?"hsl(120, 100%, 80%)":"hsl(50, 100%, 80%)",borderWidth:2,tension:.1,fill:!1,pointRadius:0}]},options:this.getChartOptions({y1Label:a})}));const n=document.getElementById("damage-pie-chart")?.getContext("2d");n&&(this.charts.damagePie=new Chart(n,{type:"pie",data:{labels:[],datasets:[{data:[],backgroundColor:[]}]},options:this.getPieChartOptions("Sources de Dégâts")}));const i=document.getElementById("survival-pie-chart")?.getContext("2d");i&&(this.charts.survivalPie=new Chart(i,{type:"pie",data:{labels:[],datasets:[{data:[],backgroundColor:[]}]},options:this.getPieChartOptions("Sources de Survie")}))}updateCharts(){const t=this.hero.history;if(!t)return;if(this.charts.hp){this.charts.hp.data.datasets[0].data=t.hpHistory,this.charts.hp.data.datasets[1].data=t.healingReceived,this.charts.hp.data.datasets[2].data=t.lifeStealHealing,this.charts.hp.data.datasets[3].data=t.damageTaken;const p=Math.max(...t.healingReceived,...t.lifeStealHealing,...t.damageTaken);this.charts.hp.options.scales["y-flux"].max=p>10?p*1.1:10,this.charts.hp.update("none")}if(this.charts.performance){const p=this.isPriest?"HPS":"DPS",f=this.isPriest?t.healingDone:t.damageDealt;this.charts.performance.data.datasets[0].data=f,this.charts.performance.data.datasets[0].label=p,this.charts.performance.data.datasets[1].data=mn(f),this.charts.performance.data.datasets[1].label=`Moyenne ${p}`;const _=Math.max(...f);this.charts.performance.options.scales.y.max=_>10?_*1.1:10,this.charts.performance.update("none")}const a=t.interceptedDamage.reduce((p,f)=>p+f,0),s=t.healingReceived.reduce((p,f)=>p+f,0),n=t.lifeStealHealing.reduce((p,f)=>p+f,0),i=t.damageTaken.reduce((p,f)=>p+f,0),o=t.shieldAbsorption.reduce((p,f)=>p+f,0),r=t.shieldsGiven.reduce((p,f)=>p+f,0);let l=`<div class="summary-metric"><span class="value">${Math.round(s)}</span><br><span class="label">Total Soins Reçus</span></div>`;l+=`<div class="summary-metric"><span class="value">${Math.round(n)}</span><br><span class="label">Total Vol de Vie</span></div>`,l+=`<div class="summary-metric"><span class="value">${Math.round(i)}</span><br><span class="label">Total Dégâts Subis</span></div>`,a>0&&(l+=`<div class="summary-metric"><span class="value">${Math.round(a)}</span><br><span class="label">Dégâts Interceptés</span></div>`),this.isProtector&&(r>0&&(l+=`<div class="summary-metric"><span class="value">${Math.round(r)}</span><br><span class="label">Boucliers Donnés</span></div>`),o>0&&(l+=`<div class="summary-metric"><span class="value">${Math.round(o)}</span><br><span class="label">Dégâts Bloqués (Boucliers)</span></div>`)),this.domElements.hpSummary.innerHTML=l;const d=(this.isPriest?t.healingDone:t.damageDealt).reduce((p,f)=>p+f,0),u=d/t.damageDealt.filter(p=>p>0).length||0;this.domElements.performanceSummary.innerHTML=`<div class="summary-metric"><span class="value">${Math.round(d)}</span><br><span class="label">${this.isPriest?"Total Soins Prodigués":"Total Dégâts Infligés"}</span></div><div class="summary-metric"><span class="value">${u.toFixed(1)}</span><br><span class="label">${this.isPriest?"HPS Moyen":"DPS Moyen"}</span></div>`;const h=t.damageDealtBreakdown;this.charts.damagePie.data.labels=["Normaux","Critiques","Riposte","Épines","Rayon"],this.charts.damagePie.data.datasets[0].data=[h.normal.reduce((p,f)=>p+f,0),h.crit.reduce((p,f)=>p+f,0),h.riposte.reduce((p,f)=>p+f,0),h.thorns.reduce((p,f)=>p+f,0),h.beam.reduce((p,f)=>p+f,0)],this.charts.damagePie.data.datasets[0].backgroundColor=["hsl(210, 50%, 60%)","hsl(50, 100%, 50%)","hsl(280, 50%, 60%)","hsl(0, 60%, 50%)","hsl(200, 80%, 60%)"],this.charts.damagePie.update("none"),this.charts.survivalPie.data.labels=["Soins Reçus","Vol de Vie","Dégâts Mitigés","Dégâts Évités","Dégâts Absorbés"],this.charts.survivalPie.data.datasets[0].data=[t.healingReceived.reduce((p,f)=>p+f,0),t.lifeStealHealing.reduce((p,f)=>p+f,0),t.damageMitigated.reduce((p,f)=>p+f,0),t.damageAvoided.reduce((p,f)=>p+f,0),t.shieldAbsorption.reduce((p,f)=>p+f,0)],this.charts.survivalPie.data.datasets[0].backgroundColor=["hsl(120, 60%, 50%)","hsl(300, 70%, 50%)","hsl(180, 50%, 50%)","hsl(0, 0%, 90%)","hsl(240, 80%, 70%)"],this.charts.survivalPie.update("none")}getChartOptions({y1Label:t="Valeur",y2Label:a,y1Max:s}){const n={responsive:!0,maintainAspectRatio:!1,animation:!1,interaction:{mode:"index",intersect:!1},scales:{x:{ticks:{display:!1},grid:{color:"rgba(255,255,255,0.1)"}},y:{display:!a,grid:{color:"rgba(255,255,255,0.1)"},ticks:{color:"#e0e0e0"},beginAtZero:!0}},plugins:{legend:{labels:{color:"#e0e0e0"}}}};return a&&(n.scales["y-hp"]={type:"linear",position:"left",ticks:{color:"hsl(200, 80%, 80%)"},grid:{color:"rgba(255,255,255,0.1)"},title:{display:!0,text:t,color:"hsl(200, 80%, 80%)"},min:0,max:s},n.scales["y-flux"]={type:"linear",position:"right",ticks:{color:"hsl(100, 40%, 80%)"},grid:{drawOnChartArea:!1},title:{display:!0,text:a,color:"hsl(100, 40%, 80%)"},beginAtZero:!0},n.scales.y.display=!1),n}getPieChartOptions(t){return{responsive:!0,maintainAspectRatio:!1,animation:!1,plugins:{legend:{position:"bottom",labels:{color:"#e0e0e0"}},title:{display:!0,text:t,color:"#e0e0e0",font:{size:16}}}}}navigateToHero(t){if(t==="prev"&&this.heroIndex>0)this.heroIndex--;else if(t==="next"&&this.heroIndex<this.party.length-1)this.heroIndex++;else return;const a=this.party[this.heroIndex];this.updateForNewHero(a)}updateForNewHero(t){this.hero=t,this.isPriest=this.hero.id==="priest",this.isProtector=this.hero.id==="protector",this.charts.hp&&this.charts.hp.destroy(),this.charts.performance&&this.charts.performance.destroy(),this.charts.damagePie&&this.charts.damagePie.destroy(),this.charts.survivalPie&&this.charts.survivalPie.destroy(),this.charts={},this.domElements.headerTitle.textContent=`Rapport de Combat : ${this.hero.name}`,this.updateNavButtons(),this.initCharts(),this.updateAllSections()}updateNavButtons(){this.domElements.prevBtn.disabled=this.heroIndex<=0,this.domElements.nextBtn.disabled=this.heroIndex>=this.party.length-1}close(){this.charts.hp&&this.charts.hp.destroy(),this.charts.performance&&this.charts.performance.destroy(),this.charts.damagePie&&this.charts.damagePie.destroy(),this.charts.survivalPie&&this.charts.survivalPie.destroy(),clearInterval(this.updateInterval),this.overlay.remove(),ke=null}}const Wt={1:{right:["Nouveau Héros : Guerrier"]},2:{left:["Nouvel Ennemi : Araignée des Forêts"],right:["Nouveau Héros : Mage"]},3:{left:["Nouvel Ennemi : Orque"]},5:{left:["Nouvel Ennemi : Squelette"]},7:{left:["Nouvel Ennemi : Loup Sanguinaire"]},9:{left:["Nouvel Ennemi : Nuée de Chauves-souris"]},10:{left:["Nouvel Ennemi : Goule"]},11:{right:["Nouveau Héros : Prêtre"]},12:{left:["Nouvel Ennemi : Spectre Gémissant"]},15:{left:["Nouvel Ennemi d'Élite : Golem de Pierre"],right:["Mécanique débloquée : Renaissance","Nouveau Héros : Duelliste"]},18:{left:["Nouvel Ennemi d'Élite : Garde de Crypte"]},20:{right:["Mécanique débloquée : La Forge"]},25:{right:["Nouveau Héros : Protecteur"]},28:{left:["Nouvel Ennemi d'Élite : Hydre du Chaos"]},30:{right:["Mécanique débloquée : La Taverne !"]},40:{right:["Nouveau Spécialiste : Le Bâtisseur"]}};let st=null;function vn(e){st&&st.remove();const t=e.highestFloorAchieved,a=t+10,s=c("div",{id:"progression-map-overlay",className:"modal-overlay"}),n=c("div",{className:"modal-content progression-map-content"}),i=c("div",{className:"modal-header"});i.appendChild(c("h2",{textContent:"Feuille de Route du Donjon"}));const o=c("button",{textContent:"X",className:"close-btn"});o.addEventListener("click",()=>s.remove()),i.appendChild(o);const r=c("div",{className:"timeline-container"}),l=Object.keys(Wt).map(Number).sort((h,p)=>h-p);for(const h of l){if(h>a)continue;const p=h<=t,f=Wt[h],_=c("div",{className:"timeline-node"}),A=c("div",{className:"timeline-floor-circle",textContent:p?h:"?"});p&&A.classList.add("discovered"),_.appendChild(A);const x=c("div",{className:"timeline-content left"});p&&f.left&&f.left.forEach($=>x.appendChild(c("p",{textContent:`⚔️ ${$}`}))),_.appendChild(x);const k=c("div",{className:"timeline-content right"});p&&f.right&&f.right.forEach($=>k.appendChild(c("p",{textContent:`⭐ ${$}`}))),_.appendChild(k),r.appendChild(_)}const d=c("div",{className:"timeline-node final-node"});d.appendChild(c("div",{className:"timeline-floor-circle",textContent:"?"})),d.appendChild(c("div",{className:"timeline-content left"}));const u=c("div",{className:"timeline-content right final-text"});u.appendChild(c("p",{textContent:"De plus grands défis vous attendent..."})),d.appendChild(u),r.appendChild(d),n.append(i,r),s.appendChild(n),document.body.appendChild(s),st=s}function bn(e){vn(e)}const K={GOBLIN_HUNT_BASIC:{id:"GOBLIN_HUNT_BASIC",name:"Chasse aux Gobelins (Basique)",description:"Éliminez 100 Gobelins.",type:"monsterHunt",targetMonsterId:"goblin",quantity:100,rewards:{gold:500,reputation:5,trophy:"goblin"},reputationTierRequired:0,cooldown:600},ORC_HUNT_BASIC:{id:"ORC_HUNT_BASIC",name:"Chasse aux Orques (Basique)",description:"Éliminez 50 Orques.",type:"monsterHunt",targetMonsterId:"orc",quantity:50,rewards:{gold:1200,reputation:10,trophy:"orc"},reputationTierRequired:0,cooldown:900},SKELETON_HUNT_BASIC:{id:"SKELETON_HUNT_BASIC",name:"Chasse aux Squelettes (Basique)",description:"Éliminez 75 Squelettes.",type:"monsterHunt",targetMonsterId:"skeleton",quantity:75,rewards:{gold:1800,reputation:12,trophy:"skeleton"},reputationTierRequired:0,cooldown:1200},STONE_GOLEM_HUNT_ELITE:{id:"STONE_GOLEM_HUNT_ELITE",name:"Chasse au Golem de Pierre (Élite)",description:"Éliminez 5 Golems de pierre.",type:"monsterHunt",targetMonsterId:"stone_golem",quantity:5,rewards:{gold:5e3,reputation:30,rareEssence:1,trophy:"stone_golem"},reputationTierRequired:50,cooldown:1800},WAILING_SPECTRE_HUNT:{id:"WAILING_SPECTRE_HUNT",name:"Chasse aux Spectres",description:"Éliminez 25 Spectres Gémissants.",type:"monsterHunt",targetMonsterId:"wailing_spectre",quantity:25,rewards:{gold:3e3,reputation:20,trophy:"wailing_spectre"},reputationTierRequired:15,cooldown:1500},ARMORED_CRYPT_GUARD_HUNT:{id:"ARMORED_CRYPT_GUARD_HUNT",name:"Chasse aux Gardes de Crypte",description:"Éliminez 10 Gardes de Crypte en Armure.",type:"monsterHunt",targetMonsterId:"armored_crypt_guard",quantity:10,rewards:{gold:8e3,reputation:40,rareEssence:2,trophy:"armored_crypt_guard"},reputationTierRequired:60,cooldown:2400},CHAOS_HYDRA_HUNT:{id:"CHAOS_HYDRA_HUNT",name:"Chasse à l'Hydre",description:"Éliminez 3 Hydres du Chaos.",type:"monsterHunt",targetMonsterId:"chaos_hydra",quantity:3,rewards:{gold:15e3,reputation:75,rareEssence:5,trophy:"chaos_hydra"},reputationTierRequired:100,cooldown:3600},GHOUL_HUNT:{id:"GHOUL_HUNT",name:"Chasse aux Goules",description:"Éliminez 40 Goules.",type:"monsterHunt",targetMonsterId:"ghoul",quantity:40,rewards:{gold:2800,reputation:18,trophy:"ghoul"},reputationTierRequired:18,cooldown:1300},GOBLIN_HUNT_ELITE:{id:"GOBLIN_HUNT_ELITE",name:"Chasse aux Gobelins (Élite)",description:"Éliminez 500 Gobelins.",type:"monsterHunt",targetMonsterId:"goblin",quantity:500,rewards:{gold:2500,reputation:25,baseEssence:10},reputationTierRequired:40,cooldown:1800},ORC_HUNT_ELITE:{id:"ORC_HUNT_ELITE",name:"Chasse aux Orques (Élite)",description:"Éliminez 250 Orques.",type:"monsterHunt",targetMonsterId:"orc",quantity:250,rewards:{gold:6e3,reputation:35,rareEssence:1},reputationTierRequired:70,cooldown:2200},SKELETON_HUNT_ELITE:{id:"SKELETON_HUNT_ELITE",name:"Chasse aux Squelettes (Élite)",description:"Éliminez 350 Squelettes.",type:"monsterHunt",targetMonsterId:"skeleton",quantity:350,rewards:{gold:9e3,reputation:45,rareEssence:2},reputationTierRequired:85,cooldown:2600},LEATHER_COLLECTION_BASIC:{id:"LEATHER_COLLECTION_BASIC",name:"Collecte de Cuir (Basique)",description:"Collectez 10 Armures de cuir.",type:"itemCollection",targetItemType:"armor",targetItemRarity:"common",quantity:10,rewards:{gold:800,reputation:8,baseEssence:5},reputationTierRequired:0,cooldown:720},MAGIC_WEAPON_COLLECTION:{id:"MAGIC_WEAPON_COLLECTION",name:"Collecte d'Armes Magiques",description:"Collectez 3 Armes de rareté Magique.",type:"itemCollection",targetItemType:"weapon",targetItemRarity:"magic",quantity:3,rewards:{gold:2500,reputation:20,baseEssence:10,rareEssence:.5},reputationTierRequired:25,cooldown:1500},EPIC_ARMOR_COLLECTION:{id:"EPIC_ARMOR_COLLECTION",name:"Collecte d'Armures Épiques",description:"Collectez 3 Armures de rareté Épique.",type:"itemCollection",targetItemType:"armor",targetItemRarity:"epic",quantity:3,rewards:{gold:1e4,reputation:50,rareEssence:3},reputationTierRequired:150,cooldown:2800},LEGENDARY_WEAPON_COLLECTION:{id:"LEGENDARY_WEAPON_COLLECTION",name:"Collecte d'Armes Légendaires",description:"Collectez 1 Arme de rareté Légendaire.",type:"itemCollection",targetItemType:"arme",targetItemRarity:"legendary",quantity:1,rewards:{gold:25e3,reputation:100,rareEssence:8},reputationTierRequired:250,cooldown:4800},SPIDER_HUNT_BASIC:{id:"SPIDER_HUNT_BASIC",name:"Chasse aux Araignées (Basique)",description:"Éliminez 150 Araignées des Forêts.",type:"monsterHunt",targetMonsterId:"forest_spider",quantity:150,rewards:{gold:700,reputation:7,trophy:"forest_spider"},reputationTierRequired:0,cooldown:600},WOLF_HUNT_BASIC:{id:"WOLF_HUNT_BASIC",name:"Chasse aux Loups (Basique)",description:"Éliminez 75 Loups Sanguinaires.",type:"monsterHunt",targetMonsterId:"dire_wolf",quantity:75,rewards:{gold:2500,reputation:15,trophy:"dire_wolf"},reputationTierRequired:10,cooldown:900},BAT_SWARM_HUNT_BASIC:{id:"BAT_SWARM_HUNT_BASIC",name:"Chasse à la Nuée (Basique)",description:"Éliminez 150 Nuées de Chauves-souris.",type:"monsterHunt",targetMonsterId:"swarm_of_bats",quantity:150,rewards:{gold:3500,reputation:25,rareEssence:.5,trophy:"swarm_of_bats"},reputationTierRequired:20,cooldown:1200}};let b=null,G=null,nt=0;const yn=120,w={init:(e,t)=>{b=t,G=e,e.on("ui_tavern_accept_contract_clicked",a=>w.acceptContract(a.contractId)),e.on("ui_tavern_claim_contract_clicked",a=>w.claimContractReward(a.contractId)),e.on("ui_tavern_abandon_contract_clicked",a=>w.abandonContract(a.contractId)),e.on("ui_tavern_refresh_contracts_clicked",()=>w.refreshContracts(!0)),e.on("monster_defeated_by_type",a=>w.trackMonsterDefeat(a)),e.on("item_added_to_inventory_by_type",a=>w.trackItemCollection(a)),e.on("ui_tavern_claim_contract_clicked",a=>{const s=b.tavern.completedContracts.find(n=>n.contractId===a.contractId);s&&(G.emit("contract_claimed",{contractId:a.contractId,rewards:s.rewards}),w.claimContractReward(a.contractId))}),b.tavern.maxAvailableContracts===void 0&&(b.tavern.maxAvailableContracts=3),b.tavern.maxActiveContracts===void 0&&(b.tavern.maxActiveContracts=1),b.tavernUnlocked&&b.tavern.availableContracts.length===0&&w.refreshContracts(!1)},update:e=>{for(const t in b.tavern.contractCooldowns){let a=b.tavern.contractCooldowns[t];const s=b.tavern.contractCooldownReduction||0;s>0?a-=e*(1+s/100):a-=e,b.tavern.contractCooldowns[t]=a,b.tavern.contractCooldowns[t]<=0&&(delete b.tavern.contractCooldowns[t],b.ui.tavernNeedsUpdate=!0,console.log(`TavernContractsManager: Cooldown pour le contrat ${t} terminé.`))}b.tavernUnlocked&&(nt+=e,nt>=yn&&(nt=0,console.log("TavernContractsManager: Rafraîchissement automatique des contrats."),w.refreshContracts(!1),G.emit("notification_requested",{message:"De nouveaux contrats sont disponibles à la Taverne !",type:"info"})))},refreshContracts:e=>{console.log(`TavernContractsManager: Tentative de rafraîchissement des contrats (payant: ${e}).`);const t=50;if(e&&b.gold<t){G.emit("notification_requested",{message:`Pas assez d'or pour rafraîchir les contrats (${t} Or).`,type:"error"});return}e&&(b.gold-=t);const a=[...b.tavern.activeContracts.map(o=>o.contractId),...b.tavern.completedContracts.map(o=>o.contractId)],s=Object.values(K).filter(o=>{const r=b.tavern.reputation>=o.reputationTierRequired,l=b.tavern.contractCooldowns[o.id]>0,d=a.includes(o.id);return r&&!l&&!d});b.tavern.availableContracts=[];const n=s.sort(()=>.5-Math.random()),i=Math.min(b.tavern.maxAvailableContracts,n.length);for(let o=0;o<i;o++){const r=n[o];b.tavern.availableContracts.push({contractId:r.id,name:r.name,description:r.description,type:r.type,rewards:r.rewards,quantity:r.quantity,targetMonsterId:r.targetMonsterId,targetItemType:r.targetItemType,targetItemRarity:r.targetItemRity})}console.log(`TavernContractsManager: ${b.tavern.availableContracts.length} nouveaux contrats générés.`),b.ui.tavernNeedsUpdate=!0,G.emit("notification_requested",{message:"Liste des contrats rafraîchie !",type:"info"})},acceptContract:e=>{if(b.tavern.activeContracts.length>=b.tavern.maxActiveContracts){G.emit("notification_requested",{message:`Vous avez déjà ${b.tavern.maxActiveContracts} contrat(s) actif(s).`,type:"error"});return}const t=b.tavern.availableContracts.findIndex(s=>s.contractId===e);if(t===-1){G.emit("notification_requested",{message:"Contrat non trouvé ou déjà accepté.",type:"error"});return}const a=b.tavern.availableContracts.splice(t,1)[0];a.progress=0,b.tavern.activeContracts.push(a),b.ui.tavernNeedsUpdate=!0,G.emit("notification_requested",{message:`Contrat "${a.name}" accepté !`,type:"success"})},trackMonsterDefeat:e=>{b.tavern.activeContracts.forEach(t=>{const a=K[t.contractId];if(a&&a.type==="monsterHunt"&&a.targetMonsterId===e.monsterId){t.progress=Math.min(a.quantity,(t.progress||0)+e.count);const s=b.tavern.reputationGainBonus||0;s>0&&a.rewards.reputation&&(a.rewards.reputation=Math.ceil(a.rewards.reputation*(1+s/100))),t.progress>=a.quantity&&w._moveContractToCompleted(t.contractId),b.ui.tavernNeedsUpdate=!0}})},trackItemCollection:e=>{b.tavern.activeContracts.forEach(t=>{const a=K[t.contractId];if(a&&a.type==="itemCollection"){const s=e.item,n=s.baseDefinition;let i=!1;a.targetItemType==="weapon"?i=n.type==="arme":a.targetItemType==="armor"?i=["torse","tete","jambes","mains","pieds"].includes(n.type):i=a.targetItemType===n.type;const o=a.targetItemRarity===s.rarity;if(i&&o){t.progress=Math.min(a.quantity,(t.progress||0)+1);const r=b.tavern.reputationGainBonus||0;r>0&&a.rewards.reputation&&(a.rewards.reputation=Math.ceil(a.rewards.reputation*(1+r/100))),t.progress>=a.quantity&&w._moveContractToCompleted(t.contractId),b.ui.tavernNeedsUpdate=!0}}})},_moveContractToCompleted:e=>{const t=b.tavern.activeContracts.findIndex(a=>a.contractId===e);if(t!==-1){const a=b.tavern.activeContracts.splice(t,1)[0];b.tavern.completedContracts.push(a),G.emit("notification_requested",{message:`Contrat "${a.name}" terminé ! Allez le réclamer à la Taverne.`,type:"success"}),console.log(`TavernContractsManager: Contrat "${a.name}" déplacé vers les terminés.`)}},claimContractReward:e=>{const t=b.tavern.completedContracts.findIndex(l=>l.contractId===e);if(t===-1)return;const a=b.tavern.completedContracts.splice(t,1)[0],s=K[a.contractId];if(!s){console.error(`TavernContractsManager: Définition de contrat introuvable pour l'ID: ${a.contractId}`);return}const n=s.rewards;let i=[];if(n.gold&&(b.gold+=n.gold,i.push(`+${n.gold} Or`)),n.reputation&&(b.tavern.reputation+=n.reputation,i.push(`+${n.reputation} Renommée`)),n.baseEssence&&(b.resources.essences.base+=n.baseEssence,i.push(`+${n.baseEssence} Essences de base`)),n.rareEssence&&(b.resources.essences.rare+=n.rareEssence,i.push(`+${n.rareEssence} Essences rares`)),n.trophy){G.emit("trophy_earned",{trophyId:n.trophy});const l=Y[n.trophy];l&&i.push(`Trophée obtenu : ${l.name} !`)}G.emit("notification_requested",{message:`Récompenses du contrat "${a.name}" obtenues !`,type:"success"}),i.forEach(l=>G.emit("notification_requested",{message:l,type:"info"}));let o=s.cooldown;const r=b.tavern.contractCooldownReduction||0;r>0&&(o=o*(1-r/100)),b.tavern.contractCooldowns[a.contractId]=o,b.ui.tavernNeedsUpdate=!0},abandonContract:e=>{const t=b.tavern.activeContracts.findIndex(o=>o.contractId===e);if(t===-1)return;const a=b.tavern.activeContracts.splice(t,1)[0];let n=K[a.contractId].cooldown*.5;const i=b.tavern.contractCooldownReduction||0;i>0&&(n=n*(1-i/100)),b.tavern.contractCooldowns[a.contractId]=n,G.emit("notification_requested",{message:`Contrat "${a.name}" abandonné.`,type:"error"}),b.ui.tavernNeedsUpdate=!0},getContractDisplayName:e=>{const t=K[e];return t?t.name:"Contrat inconnu"},getContractDescription:e=>{const t=K[e];return t?t.description:"Description inconnue."},getContractProgressText:e=>{const t=K[e.contractId];return t?e.type==="monsterHunt"||e.type==="itemCollection"?`${e.progress||0}/${t.quantity}`:"N/A":"Progression inconnue"},getContractRewardsText:e=>{const t=K[e];if(!t||!t.rewards)return"Aucune récompense";let a=[];if(t.rewards.gold&&a.push(`${t.rewards.gold} Or`),t.rewards.reputation&&a.push(`${t.rewards.reputation} Renommée`),t.rewards.baseEssence&&a.push(`${t.rewards.baseEssence} Ess. Base`),t.rewards.rareEssence&&a.push(`${t.rewards.rareEssence} Ess. Rare`),t.rewards.trophy){const s=Y[t.rewards.trophy];s&&a.push(s.name)}return a.join(", ")||"Aucune"},isContractOnCooldown:e=>b.tavern.contractCooldowns[e]>0,getContractCooldownRemaining:e=>Math.ceil(b.tavern.contractCooldowns[e]||0)};function Cn(e,t){const a=K[e.contractId];if(!a)return console.error("Error: Contract definition not found for ID:",e.contractId),null;const s=c("div",{className:"contract-card",dataset:{contractId:e.contractId}});s.innerHTML=`
        <div class="contract-header">
            <span class="contract-name">${a.name}</span>
            <span class="contract-type">${a.type==="monsterHunt"?"Chasse":"Collecte"}</span>
        </div>
        <p class="contract-description">${a.description}</p>
        <div class="contract-rewards">Récompenses : ${w.getContractRewardsText(e.contractId)}</div>
    `;const n=c("div",{className:"contract-actions"});return t==="available"?n.appendChild(c("button",{textContent:"Accepter",className:"btn contract-accept-btn",dataset:{contractId:e.contractId}})):t==="active"?(n.appendChild(c("span",{textContent:`Progression: ${w.getContractProgressText(e)}`})),n.appendChild(c("button",{textContent:"Abandonner",className:"btn discard-btn contract-abandon-btn",dataset:{contractId:e.contractId}}))):t==="completed"&&n.appendChild(c("button",{textContent:"Réclamer",className:"btn buy-btn contract-claim-btn",dataset:{contractId:e.contractId}})),s.appendChild(n),s}function it(e,t,a){if(e.innerHTML="",!t||t.length===0){let s="Aucun contrat.";a==="available"&&(s="Aucun contrat disponible."),a==="active"&&(s="Vous n'avez aucun contrat actif."),a==="completed"&&(s="Aucun contrat terminé en attente."),e.appendChild(c("p",{className:"empty-list-message",textContent:s}));return}t.forEach(s=>{const n=Cn(s,a);n&&e.appendChild(n)})}function _n(e,t,a){const s=c("div",{id:"tavern-contracts-content-wrapper",style:{display:"flex",flexDirection:"column",height:"100%"}}),n=c("div",{id:"contracts-columns-container"}),i=c("div",{className:"contract-column"});i.appendChild(c("h4",{textContent:"Disponibles"}));const o=c("div",{className:"contract-list"});i.appendChild(o);const r=c("div",{className:"contract-column"}),l=c("h4",{textContent:"Actifs"}),d=t.tavern.maxActiveContracts||1;l.appendChild(c("span",{id:"active-contracts-counter",className:"header-counter",textContent:`(${t.tavern.activeContracts.length}/${d})`})),r.appendChild(l);const u=c("div",{className:"contract-list"});r.appendChild(u);const h=c("div",{className:"contract-column"});h.appendChild(c("h4",{textContent:"Terminés"}));const p=c("div",{className:"contract-list"});h.appendChild(p),n.append(i,r,h);const f=c("button",{id:"tavern-refresh-contracts-btn",className:"btn utility-btn",textContent:"Rafraîchir Contrats (50 Or)"});f.addEventListener("click",()=>a.emit("ui_tavern_refresh_contracts_clicked")),it(o,t.tavern.availableContracts,"available"),it(u,t.tavern.activeContracts,"active"),it(p,t.tavern.completedContracts,"completed"),s.append(n,f),e.appendChild(s),e.addEventListener("click",_=>{const A=_.target.closest(".contract-accept-btn");if(A){a.emit("ui_tavern_accept_contract_clicked",{contractId:A.dataset.contractId});return}const x=_.target.closest(".contract-abandon-btn");if(x){a.emit("ui_tavern_abandon_contract_clicked",{contractId:x.dataset.contractId});return}const k=_.target.closest(".contract-claim-btn");k&&a.emit("ui_tavern_claim_contract_clicked",{contractId:k.dataset.contractId})})}const Re={id:"ELIXIR_OF_FURY",name:"Élixir de Fureur",description:"Un puissant breuvage qui décuple votre puissance offensive.",icon:"🔥",bonus:{stat:"damagePercent",value:25},duration:{type:"timed",value:300},baseCost:1e3};let N=null,Q=null,Fe=null;const ue={init:(e,t)=>{N=t,Q=e,e.on("ui_tavern_buy_good_clicked",a=>ue.buyGood(a.goodId,!0)),e.on("ui_tavern_buy_all_goods_clicked",()=>ue.buyAllGoods(!0)),e.on("ui_toggle_auto_buy_consumables",a=>{N.options.autoBuyTavernConsumables=a.active,Q.emit("notification_requested",{message:`Achat auto. de consommables ${a.active?"activé":"désactivé"}.`,type:"info"})})},update:e=>{if(N.activeMonster&&N.activeMonster.instanceId!==Fe?(ue.handleEncounterChange(),Fe=N.activeMonster.instanceId):!N.activeMonster&&Fe!==null&&(Fe=null),N.activeConsumables&&N.activeConsumables.length>0){let t=!1;for(let a=N.activeConsumables.length-1;a>=0;a--){const s=N.activeConsumables[a];if(s.duration.type==="timed"&&(s.duration.value-=e,s.duration.value<=0)){const n=ce[s.id]||Re;Q.emit("notification_requested",{message:`L'effet de "${n.name}" s'est dissipé.`,type:"info"}),N.activeConsumables.splice(a,1),t=!0}}t&&(N.ui.heroesNeedUpdate=!0,N.ui.tavernNeedsUpdate=!0)}N.options.autoBuyConsumablesUnlocked&&N.options.autoBuyTavernConsumables&&ue.buyAllGoods(!1)},handleEncounterChange:()=>{if(N.activeConsumables&&N.activeConsumables.length>0){let e=!1;for(let t=N.activeConsumables.length-1;t>=0;t--){const a=N.activeConsumables[t];if(a.duration.type==="encounter"&&(a.duration.value-=1,a.duration.value<=0)){const s=ce[a.id]||Re;Q.emit("notification_requested",{message:`L'effet de "${s.name}" s'est dissipé.`,type:"info"}),N.activeConsumables.splice(t,1),e=!0}}e&&(N.ui.heroesNeedUpdate=!0,N.ui.tavernNeedsUpdate=!0)}},buyGood:(e,t=!1)=>{const a={...ce};N.tavern.elixirOfFuryUnlocked&&Object.assign(a,{ELIXIR_OF_FURY:Re});const s=a[e];if(!s)return console.error(`TavernConsumablesManager: Marchandise inconnue : ${e}`),!1;if(N.activeConsumables.find(d=>d.id===s.id))return t&&Q.emit("notification_requested",{message:"Vous profitez déjà de cet effet.",type:"error"}),!1;let i=s.baseCost*N.dungeonFloor;const o=N.tavern.consumableCostReduction||0;if(o>0&&(i=Math.ceil(i*(1-o/100))),N.gold<i)return t&&Q.emit("notification_requested",{message:"Pas assez d'or.",type:"error"}),!1;N.gold-=i;let r=s.duration.value;if(s.duration.type==="timed"){const d=N.tavern.timedConsumableDurationBonus||0;d>0&&(r=r*(1+d/100))}const l={id:s.id,duration:{type:s.duration.type,value:r}};return N.activeConsumables.push(l),t&&Q.emit("notification_requested",{message:`Vous avez acheté : ${s.name} !`,type:"success"}),N.ui.heroesNeedUpdate=!0,N.ui.tavernNeedsUpdate=!0,!0},buyAllGoods:(e=!1)=>{const t={...ce};N.tavern.elixirOfFuryUnlocked&&Object.assign(t,{ELIXIR_OF_FURY:Re});let a=0;for(const s in t)ue.buyGood(s,!1)&&a++;e&&(a>0?Q.emit("notification_requested",{message:`${a} consommable(s) acheté(s) !`,type:"success"}):Q.emit("notification_requested",{message:"Impossible d'acheter plus de consommables (pas assez d'or ou déjà actifs).",type:"info"}))}};function En(e,t){const a=c("div",{className:"good-card"});let s=e.baseCost*t.dungeonFloor;const n=t.tavern.consumableCostReduction||0;n>0&&(s=Math.ceil(s*(1-n/100)));const i=t.activeConsumables.some(f=>f.id===e.id),o=t.gold>=s;let r="",l=e.duration.value;if(e.duration.type==="timed"){const f=t.tavern.timedConsumableDurationBonus||0;f>0&&(l*=1+f/100),r=`${Math.ceil(l/60)} minutes`}else r=`${Math.ceil(l)} rencontres`;const d=e.bonus.stat.replace("Percent","").replace(/([A-Z])/g," $1").trim(),u=`+${e.bonus.value}% ${d}`;a.innerHTML=`
        <div class="good-icon">${e.icon}</div>
        <div class="good-name">${e.name}</div>
        <p class="good-description">${e.description}</p>
        <div class="good-effect">Effet : ${u}</div>
        <div class="good-duration">Durée : ${r}</div>
    `;const h=c("div",{className:"good-footer"}),p=c("button",{className:"btn good-buy-btn",textContent:`${s} Or`,dataset:{goodId:e.id}});if(i){const f=t.activeConsumables.find(A=>A.id===e.id);p.disabled=!0;let _="Actif";if(f.duration.type==="timed"){const A=f.duration.value,x=Math.floor(A/60),k=Math.floor(A%60);_=`Actif (${x}m ${k}s)`}else _=`Actif (${f.duration.value} rencontres)`;p.textContent=_}else o||(p.disabled=!0);return h.appendChild(p),a.appendChild(h),a}function Sn(e,t,a){const s=c("div",{className:"auto-buy-consumables-option option-wrapper"});s.innerHTML=`
        <label class="checkbox-container">
            <input type="checkbox" id="auto-buy-consumables-toggle">
            <span class="checkmark"></span> Achat automatique des marchandises
        </label>
        <p class="option-help">Achète automatiquement toutes les marchandises disponibles dès que vous avez assez d'or.</p>
    `;const n=s.querySelector("#auto-buy-consumables-toggle");n.checked=t.options.autoBuyTavernConsumables,n.addEventListener("change",d=>{a.emit("ui_toggle_auto_buy_consumables",{active:d.target.checked})}),s.classList.toggle("hidden",!t.options.autoBuyConsumablesUnlocked);const i=c("div",{className:"goods-header-controls"}),o=c("button",{id:"buy-all-goods-btn",className:"btn buy-btn",textContent:"Acheter tout",title:"Achète tous les consommables disponibles que vous pouvez vous permettre."});o.addEventListener("click",()=>a.emit("ui_tavern_buy_all_goods_clicked")),i.appendChild(o);const r=c("div",{className:"goods-grid"}),l={...ce};t.tavern.elixirOfFuryUnlocked&&(l.ELIXIR_OF_FURY=Re);for(const d in l){const u=l[d],h=En(u,t);r.appendChild(h)}e.append(s,i,r),e.addEventListener("click",d=>{const u=d.target.closest(".good-buy-btn");u&&!u.disabled&&a.emit("ui_tavern_buy_good_clicked",{goodId:u.dataset.goodId})})}function In(e){const t=c("div",{className:`upgrade-card ${e.type}-upgrade`});t.dataset.upgradeId=e.id,e.isMaxLevel&&t.classList.add("max-level"),e.isUnlocked||t.classList.add("locked-condition"),e.isOwned&&e.type==="free"&&t.classList.add("owned");const a=c("h5",{textContent:`${e.name} (${e.currentLevel}/${e.maxLevel})`});t.appendChild(a);let s=e.description;if(e.formatValue){const i=e.effectValue!==null?e.effectValue:0,o=e.nextEffectValue!==null?e.nextEffectValue:0;s=s.replace("{value}",e.formatValue(i)).replace("{nextValue}",e.formatValue(o))}e.isMaxLevel&&e.type==="paid"&&(s=s.split(" Prochain niveau")[0]);const n=c("p",{textContent:s,className:"upgrade-description"});if(t.appendChild(n),e.type==="paid"&&!e.isMaxLevel){const i=c("div",{className:"upgrade-cost"});let o="Coût : ";if(e.cost.gold&&(o+=`${e.cost.gold.toLocaleString()} Or`),e.cost.trophy){const l=Y[e.cost.trophy]?.name||"Trophée";o+=(o==="Coût : "?"":", ")+`${e.cost.quantity} ${l}`}i.textContent=o,t.appendChild(i);const r=c("button",{className:"btn upgrade-buy-btn",textContent:"Acheter",dataset:{upgradeId:e.id}});(!e.isUnlocked||!e.canAfford)&&(r.disabled=!0,e.isUnlocked||(r.textContent="Verrouillé")),t.appendChild(r)}else e.type==="free"&&e.isOwned&&t.appendChild(c("div",{className:"upgrade-status",textContent:"Débloqué"}));if(e.isUnlocked)e.isMaxLevel&&t.appendChild(c("div",{className:"upgrade-status max-level",textContent:"Niveau Max"}));else{let i=[];if(e.unlockCondition.reputation&&i.push(`Renommée ${e.unlockCondition.reputation}`),e.unlockCondition.floor&&i.push(`Étage ${e.unlockCondition.floor}`),e.unlockCondition.specialistRecruited){const o=U[e.unlockCondition.specialistRecruited.toUpperCase()]?.name||"Spécialiste";i.push(`Recruter ${o}`)}t.appendChild(c("div",{className:"upgrade-status locked-condition",textContent:`Requiert : ${i.join(" / ")}`}))}return t}function An(e,t,a){const s=c("div",{className:"tavern-upgrades-grid"}),n=c("div",{className:"upgrades-section free-upgrades"});n.appendChild(c("h4",{textContent:"Améliorations de Renommée"}));const i=c("div",{className:"upgrades-list"});n.appendChild(i);const o=c("div",{className:"upgrades-section paid-upgrades"});o.appendChild(c("h4",{textContent:"Investissements"}));const r=c("div",{className:"upgrades-list"});o.appendChild(r);for(const l in de){const d=z.getUpgradeStatus(l);if(!d)continue;const u=In(d);d.type==="free"?i.appendChild(u):r.appendChild(u)}s.append(n,o),e.appendChild(s),e.addEventListener("click",l=>{const d=l.target.closest(".upgrade-buy-btn");d&&!d.disabled&&a.emit("ui_tavern_buy_upgrade_clicked",{upgradeId:d.dataset.upgradeId})})}function ot(e,t,a){const s=t==="hero"?a.heroDefinitions[e.id.toUpperCase()]?.status==="recruited":a.tavern.specialists[e.id.toUpperCase()]?.status==="recruited",n=c("div",{className:"recruitment-card"});s&&n.classList.add("recruited");const i=e.id==="flibustier"&&e.status==="locked";n.appendChild(c("h5",{textContent:i?"L'Étranger Mystérieux":e.name}));const o=i?e.teaserDescription:e.description;if(n.appendChild(c("p",{textContent:o,className:"recruitment-description"})),e.requirements||i){const l=c("div",{className:"recruitment-requirements"});let d="Prérequis : ";const u=[],h=e.unlockCondition?.reputation||e.requirements?.reputation;h&&u.push(`${h.toLocaleString()} Renommée`),e.requirements?.specialistRecruited&&(Array.isArray(e.requirements.specialistRecruited)?e.requirements.specialistRecruited:[e.requirements.specialistRecruited]).forEach(f=>{const _=U[f.toUpperCase()]?.name||"Spécialiste";u.push(`${_} recruté`)}),u.length>0&&(l.textContent=d+u.join(", "),n.appendChild(l))}if(!i){const l=c("div",{className:"recruitment-cost"});let d="Coût : ";const u=[];e.cost&&(typeof e.cost=="object"?(e.cost.gold&&u.push(`${e.cost.gold.toLocaleString()} Or`),e.cost.baseEssence&&u.push(`${e.cost.baseEssence} Ess. Base`)):typeof e.cost=="number"&&e.cost>0&&u.push(`${e.cost.toLocaleString()} Or`)),u.length>0?d+=u.join(", "):d+="Gratuit",l.textContent=d,n.appendChild(l)}const r=c("button",{className:`btn ${t==="hero"?"recruit-hero-btn":"recruit-specialist-btn"}`,dataset:{[`${t}Id`]:e.id}});if(s)r.textContent="Recruté",r.disabled=!0;else if(i)r.textContent="???",r.disabled=!0;else{r.textContent="Recruter";let l=!0,d=0;e.cost&&(typeof e.cost=="object"?d=e.cost.gold||0:d=e.cost),a.gold<d&&(l=!1),l||(r.disabled=!0)}return n.appendChild(r),n}function Tn(e,t,a){e.innerHTML=`
        <div class="recruitment-sections-container">
            <div class="recruitment-section">
                <h4>Héros Aventuriers</h4>
                <div id="hero-recruitment-list" class="recruitment-list"></div>
            </div>
            <div class="recruitment-section">
                <h4>Spécialistes de la Taverne</h4>
                <div id="specialist-recruitment-list" class="recruitment-list"></div>
            </div>
        </div>
    `;const s=e.querySelector("#hero-recruitment-list"),n=e.querySelector("#specialist-recruitment-list"),i=t.heroDefinitions.FLIBUSTIER;i.status!=="recruited"&&s.appendChild(ot(i,"hero",t));const o=Object.values(t.heroDefinitions).filter(l=>l.status==="available"&&l.id!=="flibustier");o.length>0?o.forEach(l=>{s.appendChild(ot(l,"hero",t))}):i.status==="recruited"&&s.appendChild(c("p",{className:"empty-list-message",textContent:"Aucun nouveau héros à recruter."}));const r=Object.values(U).filter(l=>t.tavern.specialists[l.id.toUpperCase()]?.status==="available");r.length>0?r.forEach(l=>{n.appendChild(ot(l,"specialist",t))}):n.appendChild(c("p",{className:"empty-list-message",textContent:"Aucun spécialiste disponible pour le moment."})),e.addEventListener("click",l=>{const d=l.target.closest(".recruit-hero-btn");if(d&&!d.disabled){a.emit("ui_recruit_hero_clicked",{heroId:d.dataset.heroId});return}const u=l.target.closest(".recruit-specialist-btn");u&&!u.disabled&&a.emit("ui_recruit_specialist_clicked",{specialistId:u.dataset.specialistId})})}let Aa=!1;function xn(e){e.innerHTML="";const t=c("div",{className:"trophy-room-content"}),a=c("div",{className:"trophy-sets-container"});a.appendChild(c("h4",{textContent:"Bonus de Collection"})),a.appendChild(c("div",{id:"trophy-set-list",className:"trophy-set-list"}));const s=c("div",{className:"trophy-collection-container"});s.appendChild(c("p",{id:"trophy-placeholder-text",className:"empty-list-message",textContent:"C'est ici que se trouveront les preuves de vos exploits."})),s.appendChild(c("div",{id:"trophy-grid",className:"trophy-grid"})),t.append(a,s),e.appendChild(t),Aa=!0}function Nn(e){const t=document.getElementById("trophy-set-list");if(t){t.innerHTML="";for(const a in Ye){const s=Ye[a],n=e.activeTrophyBonuses.damageVsCategory&&e.activeTrophyBonuses.damageVsCategory[a]>0||e.activeTrophyBonuses.goldVsCategory&&e.activeTrophyBonuses.goldVsCategory[a]>0,i=c("div",{className:"trophy-set-item"});n&&i.classList.add("unlocked"),i.innerHTML=`
            <div class="set-name">${a}</div>
            <div class="set-bonus">${s.bonus.description}</div>
        `,t.appendChild(i)}}}function kn(e){const t=document.getElementById("trophy-grid"),a=document.getElementById("trophy-placeholder-text");if(!t||!a){console.error("TrophyUI Error: La grille des trophées ou le placeholder est introuvable dans le DOM.");return}if(e.trophies&&Object.keys(e.trophies).length>0){a.style.display="none",t.style.display="grid",t.innerHTML="";for(const n in Y){const i=Y[n],o=e.trophies[n]||0,r=e.activeTrophyBonuses.damageVsMonster?.[i.monsterId]||0,l=c("div",{className:"trophy-card",dataset:{trophyId:n}});l.innerHTML=`
                <div class="trophy-name">${i.name}</div>
                <div class="trophy-icon">🏆</div>
                <div class="trophy-count">Possédés : <span>${o}</span></div>
                <div class="trophy-bonus">Bonus : <span>+${(r*100).toFixed(2)}% Dégâts</span></div>
            `,l.classList.toggle("not-owned",o===0),t.appendChild(l)}}else a.style.display="block",t.style.display="none",t.innerHTML=""}function Rn(e){const t=document.getElementById("tavern-trophies");if(!t){console.error("TrophyUI Error: Le panneau des trophées est introuvable.");return}(!Aa||t.innerHTML.trim()==="")&&xn(t),Nn(e),kn(e)}const X=document.getElementById("tavern-modal-overlay"),Ta=c("span");let bt=!1;function Ln(e){if(bt||!X)return;const t=X.querySelector(".modal-header"),a=document.getElementById("close-tavern-modal-btn"),s=c("div",{className:"header-renown-display"});s.innerHTML="Renommée : ",s.appendChild(Ta),t&&a&&t.insertBefore(s,a),a.addEventListener("click",()=>e.emit("ui_close_tavern_modal_clicked")),X.addEventListener("click",n=>{n.target.id==="tavern-modal-overlay"&&e.emit("ui_close_tavern_modal_clicked")}),X.querySelector(".tab-buttons").addEventListener("click",n=>{n.target.matches(".tab-btn")&&e.emit("ui_tavern_tab_changed",{tabId:n.target.dataset.tab})}),bt=!0}function qn(e,t){const a=e.ui.tavernActiveTab,s=document.getElementById(a);if(s)switch(s.innerHTML="",a){case"tavern-contracts":_n(s,e,t);break;case"tavern-trophies":Rn(e);break;case"tavern-consumables":Sn(s,e,t);break;case"tavern-upgrades":An(s,e,t);break;case"tavern-recruitment":Tn(s,e,t);break}}function Rt(e,t){bt&&(Ta.textContent=e.tavern.reputation.toLocaleString("fr-FR"),X.querySelectorAll(".tab-buttons .tab-btn").forEach(a=>{a.classList.toggle("active",a.dataset.tab===e.ui.tavernActiveTab)}),X.querySelectorAll(".tab-content").forEach(a=>{a.classList.toggle("active",a.id===e.ui.tavernActiveTab)}),qn(e,t))}function Dn(e,t){X&&(Ln(t),X.classList.remove("hidden"),Rt(e,t))}function Mn(){X&&X.classList.add("hidden")}const rt=document.getElementById("monster-name"),ve=document.getElementById("monster-hp-bar"),Jt=document.getElementById("monster-hp-text"),be=document.getElementById("player-gold"),Qt=document.getElementById("recruitment-area"),Zt=document.getElementById("recruitment-section"),Pn=document.getElementById("game-status-message"),Un=document.getElementById("floor-display"),ct=document.getElementById("encounter-display"),lt=document.getElementById("progression-controls"),On=document.getElementById("soul-echos-container"),Bn=document.getElementById("soul-echos-display"),ea=document.getElementById("prestige-btn"),ta=document.getElementById("prestige-tab-btn"),Hn=document.getElementById("boost-heal-btn"),Ae=document.getElementById("artisan-tab-btn");document.getElementById("floating-text-container");const aa=document.getElementById("tavern-btn");let dt=null;function xa(e){if(!e){rt.textContent="---",Jt.textContent="HP: 0 / 0",ve.style.width="0%",dt=null;return}const t=e.instanceId!==dt,a=e.totalMaxHp||e.maxHp,s=e.currentHp||0,n=s/a*100;if(t?(ve.classList.add("no-transition"),ve.style.width="100%",requestAnimationFrame(()=>{ve.classList.remove("no-transition"),ve.style.width=`${n}%`}),dt=e.instanceId):ve.style.width=`${n}%`,e instanceof fe){const i=e.initialCount>1?"s":"";rt.textContent=`Un groupe de ${e.initialCount} ${e.name}${i} (dont ${e.currentCount} en vie)`}else rt.textContent=e.name;Jt.textContent=`HP: ${Math.ceil(s)} / ${Math.ceil(a)}`}function Na(e){const t=parseInt(be.dataset.gold||"0",10),a=Math.floor(e.gold);let s=0;e.heroes.forEach(o=>s+=o.goldFind);const n=(s*100).toFixed(0);let i=a.toLocaleString("fr-FR");n>0&&(i+=` (+${n}%)`),be.textContent=i,be.dataset.gold=a,a>t&&(be.classList.add("gold-pop"),be.addEventListener("animationend",()=>{be.classList.remove("gold-pop")},{once:!0})),(e.soulEchos>0||e.prestigeUnlockConditionMet)&&(On.classList.remove("hidden"),Bn.textContent=e.soulEchos.toLocaleString("fr-FR"))}function ka(e){const{gameStatus:t,bossUnlockReached:a,bossIsDefeated:s,pendingBossFight:n}=e;let i="";t==="party_wipe"?i="Groupe anéanti ! Récupération en cours...":t==="encounter_cooldown"?i="Combat terminé !":n?i="Le boss arrive !":t==="boss_fight"?i="COMBAT CONTRE LE BOSS !":s?i="Le gardien de l'étage est vaincu !":a&&(i="Le gardien de l'étage peut être affronté."),Pn.textContent=i}function Ra(e){const{dungeonFloor:t,encounterIndex:a,gameStatus:s,bossIsDefeated:n,prestigeCount:i}=e,o=(i||0)>0?`Prestige ${i} | `:"";Un.textContent=`${o}Étage ${t}`,s==="boss_fight"?ct.textContent="COMBAT DE BOSS":n?ct.textContent="Exploration (Boss vaincu)":ct.textContent=`Rencontre ${a}`}function La(e){const t=e.gameStatus==="party_wipe"&&!e.partyWipeHealBoostActive;Hn.classList.toggle("hidden",!t)}function qa(e){Qt.innerHTML="";const t=Object.values(e).filter(a=>a.status==="available");t.length>0?(Zt.classList.remove("hidden"),t.forEach(a=>{const s=c("button",{textContent:`Recruter ${a.name} (${a.cost>0?`${a.cost} Or`:"Gratuit"})`,dataset:{heroId:a.id}});Qt.appendChild(s)})):Zt.classList.add("hidden")}function Da(e){document.querySelectorAll("#right-panels-container .tab-content").forEach(n=>n.classList.remove("active")),document.querySelectorAll("#right-panels-container .tab-btn").forEach(n=>n.classList.remove("active"));const t=document.getElementById(e.ui.activeTab),a=document.querySelector(`.tab-btn[data-tab="${e.ui.activeTab}"]`);t&&t.classList.add("active"),a&&a.classList.add("active");const s=document.getElementById("shop-panel");s&&(s.classList.toggle("lock-mode-active",e.ui.shopLockModeActive),document.getElementById("toggle-lock-mode-btn").classList.toggle("active",e.ui.shopLockModeActive))}function Ma(e){lt.innerHTML="",e.bossUnlockReached&&!e.bossIsDefeated&&!e.pendingBossFight&&e.gameStatus!=="boss_fight"?lt.appendChild(c("button",{textContent:"Affronter le Boss",id:"fight-boss-btn"})):e.bossIsDefeated&&lt.appendChild(c("button",{textContent:"Étage Suivant",id:"next-floor-btn"})),e.prestigeUnlockConditionMet?(ea.classList.remove("hidden"),ta.classList.remove("hidden")):(ea.classList.add("hidden"),ta.classList.add("hidden")),e.artisanUnlocked?(Ae.classList.remove("hidden","locked-tab"),Ae.textContent="Forge"):(Ae.classList.remove("hidden"),Ae.classList.add("locked-tab"),Ae.textContent="Forge (Verrouillée)"),e.tavernUnlocked?aa.classList.remove("hidden"):aa.classList.add("hidden")}function Pa(e){const t=document.getElementById("loot-counter");t&&(t.textContent=`(${e.droppedItems.length}/${e.droppedItemsSize})`);const a=document.getElementById("inventory-counter");a&&(a.textContent=`(${e.inventory.length}/${e.inventorySize})`)}function wn(e,t){rn(e,t),xa(e.activeMonster),Bs(e.heroes,e),Na(e),ka(e),Ra(e),ya(e),Pa(e),e.ui.partyPanelNeedsUpdate&&(La(e),e.ui.partyPanelNeedsUpdate=!1),e.ui.heroesNeedUpdate&&(ba(e.heroes,e.itemToEquip,e.ui.heroCardState,e.eventBus,e),e.ui.heroesNeedUpdate=!1),e.ui.shopNeedsUpdate&&(kt(e),e.ui.shopNeedsUpdate=!1),e.ui.inventoryNeedsUpdate&&(Me(e.inventory,e.itemToEquip),e.ui.inventoryNeedsUpdate=!1),e.ui.lootNeedsUpdate&&(Ca(e.droppedItems),e.ui.lootNeedsUpdate=!1),e.ui.recruitmentNeedsUpdate&&(qa(e.heroDefinitions),e.ui.recruitmentNeedsUpdate=!1),e.ui.progressionNeedsUpdate&&(Ma(e),e.ui.progressionNeedsUpdate=!1),e.ui.prestigeNeedsUpdate&&(Sa(e),e.ui.prestigeNeedsUpdate=!1),e.ui.artisanNeedsUpdate&&(Ia(e,e.eventBus),e.ui.artisanNeedsUpdate=!1),e.ui.tavernNeedsUpdate&&!document.getElementById("tavern-modal-overlay")?.classList.contains("hidden")?(Rt(e,e.eventBus),e.ui.tavernNeedsUpdate=!1):e.ui.tavernNeedsUpdate&&(e.ui.tavernNeedsUpdate=!1),e.ui.mainTabsNeedUpdate&&(Da(e),e.ui.mainTabsNeedUpdate=!1)}function Ua(e){xa(e.activeMonster),Na(e),ka(e),Ra(e),La(e),Ma(e),Da(e),Pa(e),qa(e.heroDefinitions),ba(e.heroes,e.itemToEquip,e.ui.heroCardState,e.eventBus,e),kt(e),Me(e.inventory,e.itemToEquip),Ca(e.droppedItems),Sa(e),Ia(e,e.eventBus),ya(e),document.getElementById("tavern-modal-overlay")?.classList.contains("hidden")||Rt(e,e.eventBus)}function Fn(e,t){e.on("notification_requested",a=>sn(a.message,a.type)),e.on("confirmation_requested",a=>un(a.message,e,a.action,a.onCancel)),e.on("save_started",cn),e.on("save_finished",ln),e.on("save_indicator_hide_requested",dn),e.on("options_modal_requested",a=>pn(a.state,e)),e.on("stats_modal_requested",a=>hn(a.hero,a.state,e)),e.on("flavor_text_triggered",a=>{const s=a.targetId==="monster"?document.getElementById("monster-area"):document.querySelector(`.hero-card[data-hero-id="${a.targetId}"]`);s&&on(a.text,a.type,s)}),e.on("shop_ui_force_update",()=>kt(t)),e.on("ui_progression_map_clicked",()=>bn(t)),e.on("shield_applied",a=>{const s=document.querySelector(`.hero-card[data-hero-id="${a.hero.id}"]`);s&&Pe(a.amount,"shield",s)}),e.on("lifesteal_triggered",a=>{const s=document.querySelector(`.hero-card[data-hero-id="${a.hero.id}"]`);s&&Pe(a.amount,"lifesteal",s)}),e.on("protector_beam_fired",a=>{const s=document.getElementById("monster-area");s&&nn(a.damage,a.chargeFactor,s)}),e.on("ui_tavern_modal_requested",a=>Dn(a.state,e)),e.on("ui_close_tavern_modal_clicked",Mn),e.on("ui_tavern_tab_changed",a=>{t.ui.tavernActiveTab=a.tabId,t.ui.tavernNeedsUpdate=!0}),e.on("ui_options_button_clicked",()=>{e.emit("options_modal_requested",{state:t})}),e.on("ui_stats_button_clicked",a=>{const s=t.heroes.find(n=>n.id===a.heroId);s&&e.emit("stats_modal_requested",{hero:s,state:t})}),e.on("ui_tab_changed",a=>{t.ui.activeTab=a.tabId,t.ui.mainTabsNeedUpdate=!0,a.tabId==="artisan-panel"&&(t.ui.artisanNeedsUpdate=!0)}),e.on("ui_tavern_button_clicked",()=>{t.tavernUnlocked?(e.emit("ui_tavern_modal_requested",{state:t}),t.ui.tavernNeedsUpdate=!0):e.emit("notification_requested",{message:"La Taverne n'est pas encore débloquée (Étage 30 requis).",type:"error"})})}const $n={init(e){this.eventBus=e,this.setupEventListeners()},setupEventListeners(){document.getElementById("enemy-panel").addEventListener("click",e=>{const t=e.target;!t.closest(".item-card")&&!t.closest(".loot-actions")&&this.eventBus.emit("ui_monster_clicked")}),document.getElementById("heroes-area").addEventListener("click",e=>{const t=e.target,a=t.closest(".hero-card"),s=t.closest(".stats-btn");if(s){e.preventDefault(),this.eventBus.emit("ui_stats_button_clicked",{heroId:s.dataset.heroId});return}const n=t.closest(".toggle-view-btn");if(n){e.preventDefault(),this.eventBus.emit("ui_toggle_hero_card_view_clicked",{heroId:n.dataset.heroId});return}const i=t.closest(".unequip-btn");if(i){e.preventDefault(),this.eventBus.emit("ui_unequip_button_clicked",{heroId:i.dataset.heroId,slot:i.dataset.slot});return}const o=t.closest(".move-hero-btn");if(o){e.preventDefault(),this.eventBus.emit("ui_move_hero_clicked",{heroId:o.dataset.heroId,direction:o.dataset.direction});return}a?this.eventBus.emit("ui_hero_card_clicked",{heroId:a.dataset.heroId}):this.eventBus.emit("ui_equip_canceled")}),document.getElementById("recruitment-area").addEventListener("click",e=>{const t=e.target.closest("[data-hero-id]");t&&this.eventBus.emit("ui_recruit_hero_clicked",{heroId:t.dataset.heroId})}),document.getElementById("progression-controls").addEventListener("click",e=>{e.target.id==="fight-boss-btn"?this.eventBus.emit("ui_fight_boss_clicked"):e.target.id==="next-floor-btn"&&this.eventBus.emit("ui_next_floor_clicked")}),document.querySelector(".tab-buttons").addEventListener("click",e=>{e.target.matches(".tab-btn")&&this.eventBus.emit("ui_tab_changed",{tabId:e.target.dataset.tab})}),document.getElementById("loot-area").addEventListener("click",e=>{if(e.target.closest("#pick-all-loot-button")){this.eventBus.emit("ui_pick_all_loot_clicked");return}}),document.getElementById("auto-equip-btn").addEventListener("click",()=>{this.eventBus.emit("ui_auto_equip_clicked")}),document.getElementById("artisan-panel").addEventListener("click",e=>{const t=e.target,a=t.closest(".artisan-item-card");if(a){this.eventBus.emit("artisan_item_selected",{itemIndex:parseInt(a.dataset.itemIndex,10)});return}const s=t.closest(".artisan-confirm-btn");s&&this.eventBus.emit("ui_artisan_action_clicked",{action:s.dataset.action,affixKey:s.dataset.affixKey})}),document.getElementById("refresh-shop-btn").addEventListener("click",()=>{this.eventBus.emit("ui_reroll_shop_clicked")}),document.getElementById("toggle-lock-mode-btn").addEventListener("click",()=>{this.eventBus.emit("ui_shop_toggle_lock_mode_clicked")}),document.getElementById("options-btn").addEventListener("click",()=>{this.eventBus.emit("ui_options_button_clicked")}),document.getElementById("prestige-btn").addEventListener("click",()=>{this.eventBus.emit("ui_prestige_button_clicked")}),document.getElementById("tavern-btn").addEventListener("click",()=>{this.eventBus.emit("ui_tavern_button_clicked")}),document.getElementById("boost-heal-btn").addEventListener("click",()=>{this.eventBus.emit("ui_boost_heal_clicked")}),document.getElementById("progression-map-btn").addEventListener("click",()=>{this.eventBus.emit("ui_progression_map_clicked")}),document.getElementById("prestige-cards-container").addEventListener("click",e=>{const t=e.target.closest(".prestige-card .buy-btn");if(t){const a=t.dataset.upgradeId;a&&this.eventBus.emit("ui_prestige_buy_upgrade_clicked",{upgradeId:a})}}),document.getElementById("tavern-modal-overlay").addEventListener("click",e=>{(e.target.id==="tavern-modal-overlay"||e.target.id==="close-tavern-modal-btn")&&this.eventBus.emit("ui_close_tavern_modal_clicked")})}};let T=null,B=null;function Gn(){const t=T.prestigeUpgrades.SHOP_CAPACITY||0;return 5+W.SHOP_CAPACITY.effect(t)}function Vn(e,t){T=t,B=e,ws(e,t),e.on("ui_reroll_shop_clicked",()=>{Xe(!1),T.shopRestockTimer=0}),e.on("ui_buy_all_shop_clicked",Oa),e.on("ui_shop_lock_item_toggled",a=>{T.ui.shopLockModeActive&&Yn(a.itemIndex)}),e.on("ui_shop_buy_item_clicked",a=>{T.ui.shopLockModeActive||Kn(a.itemIndex)}),e.on("ui_shop_toggle_lock_mode_clicked",()=>{T.ui.shopLockModeActive=!T.ui.shopLockModeActive,T.ui.shopNeedsUpdate=!0;const a=T.ui.shopLockModeActive?"Mode verrouillage activé !":"Mode verrouillage désactivé !";B.emit("notification_requested",{message:a,type:"info"}),console.log("Mode verrouillage de la boutique basculé. Actif :",T.ui.shopLockModeActive)}),T.shopItems.length===0&&Xe(!0)}function jn(e){T.shopRestockTimer+=e,T.shopRestockTimer>=60&&(T.shopRestockTimer=0,Xe(!0),B.emit("notification_requested",{message:"La boutique a été réapprovisionnée !",type:"info"}))}function zn(e){const t=Object.keys(Ke),a=t[Math.floor(Math.random()*t.length)],s=Ke[a];return new It(s,e,T.dungeonFloor)}function Xe(e=!1){const t=100*T.dungeonFloor;if(!e){if(T.gold<t){B.emit("notification_requested",{message:`Pas assez d'or pour réapprovisionner la boutique (${t} Or).`,type:"error"});return}T.gold-=t}const a=T.shopItems.filter(i=>i.locked===!0);T.shopItems=[...a];const n=Gn()-T.shopItems.length;for(let i=0;i<n;i++){const o=Math.max(1,T.highestFloorThisRun);T.shopItems.push(zn(o))}T.ui.shopNeedsUpdate=!0,B.emit("shop_ui_force_update")}function Kn(e){if(e==null||e<0||e>=T.shopItems.length){B.emit("notification_requested",{message:"Erreur: Objet de la boutique introuvable.",type:"error"});return}const t=T.shopItems[e];if(t.locked){B.emit("notification_requested",{message:`${t.name} est verrouillé. Déverrouillez-le d'abord.`,type:"error"});return}T.gold>=t.cost?(T.gold-=t.cost,B.emit("inventory_add_item",t),T.shopItems.splice(e,1),B.emit("notification_requested",{message:`${t.name} acheté !`,type:"success"}),T.ui.shopNeedsUpdate=!0):B.emit("notification_requested",{message:"Pas assez d'or pour acheter cet objet.",type:"error"})}function Yn(e){const t=T.shopItems[e];if(!t){B.emit("notification_requested",{message:"Erreur: Objet à verrouiller/déverrouiller introuvable.",type:"error"});return}t.locked=!t.locked,B.emit("notification_requested",{message:`${t.name} ${t.locked?"verrouillé":"déverrouillé"}.`,type:"info"}),T.ui.shopNeedsUpdate=!0}function Oa(){const e=T.shopItems.filter(a=>!a.locked);if(e.length===0){B.emit("notification_requested",{message:"Aucun objet non verrouillé à acheter dans la boutique.",type:"info"});return}let t=e.reduce((a,s)=>a+s.cost,0);if(T.gold>=t){T.gold-=t;for(let a=T.shopItems.length-1;a>=0;a--){const s=T.shopItems[a];s.locked||(B.emit("inventory_add_item",s),T.shopItems.splice(a,1))}B.emit("notification_requested",{message:"Tous les objets non verrouillés de la boutique ont été achetés !",type:"success"}),T.ui.shopNeedsUpdate=!0}else B.emit("notification_requested",{message:`Pas assez d'or pour acheter tous les objets non verrouillés. Coût total: ${t} Or.`,type:"error"})}const Ba={init:Vn,update:jn,restockShop:Xe,buyAllShopItems:Oa};let y=null,L=null;function Xn(e,t){y=t,L=e,fs(),e.on("inventory_add_item",Be),e.on("ui_pick_item_clicked",a=>Jn(a.itemIndex)),e.on("ui_pick_all_loot_clicked",Ga),e.on("ui_sell_item_clicked",a=>Fa(a.itemId)),e.on("ui_discard_loot_item_clicked",a=>$a(a.itemInstanceId)),e.on("ui_equip_mode_toggled",a=>{y.itemToEquip=y.inventory.find(s=>s.instanceId===a.itemId),y.ui.heroesNeedUpdate=!0,L.emit("notification_requested",{message:"Sélectionnez un héros pour équiper l'objet.",type:"info"})}),e.on("ui_hero_card_clicked",a=>{if(y.itemToEquip){const s=y.heroes.find(n=>n.id===a.heroId);s&&(Ha(s,y.itemToEquip.instanceId),y.itemToEquip=null)}}),e.on("ui_equip_canceled",()=>{y.itemToEquip&&(y.itemToEquip=null,y.ui.heroesNeedUpdate=!0,L.emit("notification_requested",{message:"Mode équipement annulé.",type:"info"}))}),e.on("ui_unequip_button_clicked",a=>{wa(a.heroId,a.slot)})}function Be(e){return y.inventory.length>=y.inventorySize?(L.emit("notification_requested",{message:"L'inventaire est plein !",type:"error"}),!1):(y.inventory.push(e),y.ui.inventoryNeedsUpdate=!0,L.emit("notification_requested",{message:`${e.name} ajouté à l'inventaire.`,type:"info"}),L.emit("item_added_to_inventory_by_type",{item:e}),!0)}function Wn(e){const t=y.inventory.findIndex(a=>a.instanceId===e);return t!==-1?(y.inventory.splice(t,1),y.ui.inventoryNeedsUpdate=!0,!0):!1}function Ha(e,t){const a=y.inventory.findIndex(o=>o.instanceId===t),s=y.inventory[a];if(!e||!s){L.emit("notification_requested",{message:"Erreur: Héros ou objet introuvable.",type:"error"}),y.itemToEquip=null,y.ui.heroesNeedUpdate=!0;return}if(s.baseDefinition.classRestriction&&!s.baseDefinition.classRestriction.includes(e.id)){L.emit("notification_requested",{message:`${e.name} ne peut pas équiper ${s.name}.`,type:"error"});return}let n=s.baseDefinition.slot||s.baseDefinition.type;n==="ring"&&(e.equipment.anneau1?e.equipment.anneau2?n="anneau1":n="anneau2":n="anneau1");const i=e.equipment[n];if(i&&y.inventory.length>=y.inventorySize){L.emit("notification_requested",{message:"L'inventaire est plein ! Impossible de déséquiper l'objet actuel.",type:"error"}),y.itemToEquip=null,y.ui.heroesNeedUpdate=!0,y.ui.inventoryNeedsUpdate=!0;return}if(a!==-1)y.inventory.splice(a,1);else{console.warn("L'objet à équiper n'a pas été trouvé dans l'inventaire (instanceId:",t,"). Il a peut-être déjà été retiré ou n'a jamais été là."),L.emit("notification_requested",{message:"Erreur: Objet à équiper introuvable dans l'inventaire.",type:"error"}),y.itemToEquip=null,y.ui.heroesNeedUpdate=!0,y.ui.inventoryNeedsUpdate=!0;return}i&&y.inventory.push(i),e.equipItem(y,s,n),y.ui.heroesNeedUpdate=!0,y.ui.inventoryNeedsUpdate=!0,L.emit("notification_requested",{message:`${s.name} équipé sur ${e.name}.`,type:"success"})}function wa(e,t){const a=y.heroes.find(n=>n.id===e);if(!a){L.emit("notification_requested",{message:"Erreur: Héros introuvable.",type:"error"});return}if(y.inventory.length>=y.inventorySize){L.emit("notification_requested",{message:"L'inventaire est plein ! Impossible de déséquiper cet objet.",type:"error"});return}const s=a.unequipItem(y,t);s&&(Be(s),y.ui.heroesNeedUpdate=!0,L.emit("notification_requested",{message:`${s.name} déséquipé de ${a.name}.`,type:"info"}))}function Fa(e){const t=y.inventory.findIndex(s=>s.instanceId===e);if(t===-1){L.emit("notification_requested",{message:"Erreur: Objet à jeter introuvable dans l'inventaire.",type:"error"});return}const a=y.inventory[t];y.inventory.splice(t,1),y.ui.inventoryNeedsUpdate=!0,L.emit("notification_requested",{message:`${a.name} jeté de l'inventaire.`,type:"info"})}function $a(e){const t=y.droppedItems.findIndex(s=>s.instanceId===e);if(t===-1){L.emit("notification_requested",{message:"Erreur: Objet à jeter introuvable dans le butin.",type:"error"});return}const a=y.droppedItems[t];y.droppedItems.splice(t,1),y.ui.lootNeedsUpdate=!0,L.emit("notification_requested",{message:`${a.name} jeté du butin.`,type:"info"})}function Jn(e){if(e==null||e<0||e>=y.droppedItems.length){L.emit("notification_requested",{message:"Erreur: Objet de butin introuvable.",type:"error"});return}if(y.inventory.length>=y.inventorySize){L.emit("notification_requested",{message:"L'inventaire est plein !",type:"error"});return}const t=y.droppedItems.splice(e,1)[0];Be(t),y.ui.lootNeedsUpdate=!0}function Ga(){if(y.droppedItems.length===0){L.emit("notification_requested",{message:"Aucun butin à ramasser.",type:"info"});return}const e=[...y.droppedItems];let t=0;for(const a of e)if(Be(a)){const n=y.droppedItems.findIndex(i=>i.instanceId===a.instanceId);n!==-1&&y.droppedItems.splice(n,1),t++}else break;t>0&&L.emit("notification_requested",{message:`${t} objet(s) ramassé(s).`,type:"success"}),y.droppedItems.length>0&&L.emit("notification_requested",{message:"Inventaire plein, une partie du butin reste au sol.",type:"error"}),y.ui.lootNeedsUpdate=!0}const Qn={init:Xn,addItem:Be,removeItem:Wn,equipItem:Ha,unequipItem:wa,discardItem:Fa,discardLootItem:$a,pickAllLoot:Ga};let V=null,Va=null;function Zn(e,t,a){const s=e.baseDefinition.slot||e.baseDefinition.type;if(s==="ring"){if(t!=="anneau1"&&t!=="anneau2")return!1}else if(s!==t)return!1;const n=e.baseDefinition.classRestriction;if(n&&!n.includes(a.id))return!1;const i=e.baseDefinition.subType;if(i){const o=a.definition.allowedSubTypes?.[s];if(o&&!o.includes(i))return!1}return!0}function ei(){let e=[...V.inventory];V.heroes.forEach(n=>{["arme","torse","tete","jambes","mains","pieds","amulette","anneau1","anneau2","bibelot"].forEach(o=>{n.equipment[o]&&(e.push(n.equipment[o]),n.equipment[o]=null)}),n.recalculateStats(V)});let t=!0,a=0;const s=100;for(;t&&a<s;){t=!1;let n={scoreIncrease:0,hero:null,item:null,slot:null,itemIndex:-1,oldItem:null};for(const i of V.heroes){const o=i.getPowerScore(V),r=["arme","torse","tete","jambes","mains","pieds","amulette","anneau1","anneau2","bibelot"];for(const l of r)for(let d=0;d<e.length;d++){const u=e[d];if(Zn(u,l,i)){const h=i.equipment[l];i.equipment[l]=u,i.recalculateStats(V);const f=i.getPowerScore(V)-o;i.equipment[l]=h,i.recalculateStats(V),f>n.scoreIncrease&&f>.001&&(n={scoreIncrease:f,hero:i,item:u,slot:l,itemIndex:d,oldItem:h})}}}if(n.scoreIncrease>.001){const{hero:i,item:o,slot:r,itemIndex:l,oldItem:d}=n;e.splice(l,1),d&&e.push(d),i.equipItem(V,o,r),t=!0}a++}V.inventory=e,Va.emit("notification_requested",{message:"Équipement automatique terminé !",type:"success"}),V.ui.inventoryNeedsUpdate=!0,V.ui.heroesNeedUpdate=!0}const ti={init:(e,t)=>{V=t,Va=e,e.on("ui_auto_equip_clicked",ei)}};let O=null,He=null;function ai(e,t,a){e.activeStatusEffects.push({id:"bleed",damagePerSecond:t,duration:a,remainingDuration:a}),He.emit("notification_requested",{message:`${e.name} saigne !`,type:"error"})}function si(e,t,a){e.activeStatusEffects.push({id:"poison",damagePerSecond:t,duration:a,remainingDuration:a}),He.emit("notification_requested",{message:`${e.name} est empoisonné !`,type:"success"})}function ni(e){const{hero:t,target:a,damage:s}=e;if(t.hasUniqueEffect("OPPORTUNIST_DAGGER")){const n=s*1.5/5;ai(a,n,5)}if(t instanceof ie){let n=(t.dexterity+t.intelligence)*.2,i=5;t.hasUniqueEffect("TOAD_VENOM_VIAL")&&(n*=1.25,i+=3),si(a,n,i)}}function ii(e){const{party:t}=e;t.forEach(a=>{a.hasUniqueEffect("VENGEANCE_HELM")&&(a.buffs.addBuff({id:"vengeance_buff",name:"Vengeance",stat:"damagePercent",value:100,duration:10,maxDuration:10}),a.recalculateStats(O),O.ui.heroesNeedUpdate=!0,He.emit("notification_requested",{message:`${a.name} est enragé par la Vengeance !`,type:"success"}))})}function oi(e){const t=O.heroes.find(a=>a.isFighting()&&a.hasUniqueEffect("BLOODTHIRSTY_ARMOR"));if(t){const a=t.maxHp*.08;t.regenerate(a,"heal",He,O),t.history.logEvent(`S'abreuve de la défaite ennemie (+${Math.round(a)} PV)`,"heal")}}function ri(e){const t=O.heroes.filter(s=>s.isFighting()&&s.hasUniqueEffect("STOIC_GUARDIAN_GAUNTLETS"));if(t.length===0)return;const a=O.heroes.filter(s=>s.isFighting());a.length<2||t.forEach(s=>{let n=null,i=1;if(a.forEach(o=>{if(o.id!==s.id){const r=o.hp/o.maxHp;r<i&&(i=r,n=o)}}),n){const o=s.hpRegen*.3*e;if(o>0){const l=n.regenerate(o).healedAmount;l>0&&(s.history.historyBucket.healingDone+=l,n.history.historyBucket.healingReceived+=l,O.damageBuckets[n.id]||(O.damageBuckets[n.id]={damage:0,crit:0,heal:0,timer:.3}),O.damageBuckets[n.id].heal+=l)}}})}function ci(e,t){O=t,He=e,e.on("hero_dealt_critical_strike",ni),e.on("ally_defeated",ii),e.on("monster_defeated",oi)}function li(e){if(O.activeMonster)for(let t=O.activeMonster.activeStatusEffects.length-1;t>=0;t--){const a=O.activeMonster.activeStatusEffects[t];if(a.remainingDuration-=e,a.damagePerSecond>0){const s=a.damagePerSecond*e;O.activeMonster.takeDamage(s)}a.remainingDuration<=0&&O.activeMonster.activeStatusEffects.splice(t,1)}O.heroes.forEach(t=>{if(t.hasUniqueEffect("DAVY_JONES_CHEST")&&t.isFighting()){const a=t.maxHp*.01*e;t.takeDamage(a)}}),ri(e)}const ja={init:ci,update:li};let E=null,pe=null;function di(e){if(E.heroes.some(a=>a.id===e)){pe.emit("notification_requested",{message:"Ce héros est déjà dans votre groupe.",type:"error"});return}const t=E.heroDefinitions[e.toUpperCase()];if(t&&t.status==="available"&&E.gold>=t.cost){E.gold-=t.cost,t.status="recruited";let a;switch(t.id){case"priest":a=new Ue(t);break;case"duelist":a=new Se(t);break;case"protector":a=new oe(t);break;case"flibustier":a=new ie(t);break;default:a=new ge(t);break}const s=E.prestigeUpgrades.STARTING_LEVEL?W.STARTING_LEVEL.effect(E.prestigeUpgrades.STARTING_LEVEL):1;if(s>1)for(let n=1;n<s;n++)a.levelUp(E,pe,!1);a.initialize(E),E.heroes.push(a),E.ui.heroCardState||(E.ui.heroCardState={}),E.ui.heroCardState[a.id]={isCollapsed:!0},pe.emit("notification_requested",{message:`${a.name} a rejoint le groupe !`,type:"success"}),E.ui.heroesNeedUpdate=!0,E.ui.recruitmentNeedsUpdate=!0}else pe.emit("notification_requested",{message:`Conditions non remplies pour recruter ${t.name}.`,type:"error"})}function ui(e,t){const a=E.heroes.findIndex(s=>s.id===e);a!==-1&&(t==="up"&&a>0?([E.heroes[a],E.heroes[a-1]]=[E.heroes[a-1],E.heroes[a]],E.ui.heroesNeedUpdate=!0):t==="down"&&a<E.heroes.length-1&&([E.heroes[a],E.heroes[a+1]]=[E.heroes[a+1],E.heroes[a]],E.ui.heroesNeedUpdate=!0))}function pi(e){E.ui.heroCardState&&E.ui.heroCardState[e]&&(E.ui.heroCardState[e].isCollapsed=!E.ui.heroCardState[e].isCollapsed,E.ui.heroesNeedUpdate=!0)}function mi(e){let t=!1;const a=E.prestigeUpgrades.LEARNED_SOUL?W.LEARNED_SOUL.effect(E.prestigeUpgrades.LEARNED_SOUL)/100:0;let s=0;const n=E.activeConsumables.find(i=>ce[i.id]?.bonus.stat==="xpGainPercent");n&&(s=ce[n.id].bonus.value/100),E.heroes.forEach(i=>{let o=0;E.heroes.forEach(l=>{l.equipment.mains?.baseDefinition.uniqueEffect==="MENTORS_GAUNTLETS"&&l.id!==i.id&&(o+=.1)});const r=e.xpGained*(1+a+o+s);if(i.isFighting()){const l=i.level;i.addXp(r,pe,E),i.level>l&&(t=!0)}}),t&&(E.ui.heroesNeedUpdate=!0)}function fi(){const e={attackSpeedPercent:0,armor:0,riposteChance:0,goldFind:0,damageReduction:0,critDamage:0,healEffectiveness:0,endurancePercent:0};E.heroes.forEach(t=>{for(const a in t.equipment){const s=t.equipment[a];if(s&&s.baseDefinition.aura)switch(s.baseDefinition.uniqueEffect){case"LEADERS_HELM":e.attackSpeedPercent+=5;break;case"BROTHERHOOD_BREASTPLATE":e.armor+=50;break;case"CONFIDENT_STEP_LEGGINGS":e.riposteChance+=3;break;case"HERALDS_BOOTS":e.goldFind+=15;break;case"HARMONY_PENDANT":e.damageReduction+=3;break;case"FURY_TOTEM":e.critDamage+=20;break;case"PATRIARCHS_STAFF":e.healEffectiveness+=10;break;case"RALLYING_HORN":e.endurancePercent+=5;break}}}),E.globalAuraBonuses=e}function hi(e){fi(),E.heroes.forEach(t=>t.update(E,e,pe))}const za={init:(e,t)=>{E=t,pe=e,e.on("ui_recruit_hero_clicked",a=>di(a.heroId)),e.on("ui_move_hero_clicked",a=>ui(a.heroId,a.direction)),e.on("ui_toggle_hero_card_view_clicked",a=>pi(a.heroId)),e.on("monster_defeated",mi),e.on("hero_leveled_up",()=>{E.ui.heroesNeedUpdate=!0})},update:hi};let H=null;const gi=100,yt={init(e,t){H=t,e.on("trophy_earned",this.addTrophy.bind(this)),this.recalculateAllBonuses()},addTrophy(e){const{trophyId:t}=e;Y[t]&&(H.trophies[t]||(H.trophies[t]=0),H.trophies[t]++,console.log(`Trophée ${t} ajouté. Total : ${H.trophies[t]}`),this.recalculateAllBonuses())},recalculateAllBonuses(){const e={damageVsMonster:{},damageVsCategory:{},goldVsCategory:{}};for(const t in H.trophies){const a=H.trophies[t],s=Y[t]?.monsterId;if(s){const n=a/(a+gi);e.damageVsMonster[s]=n}}for(const t in Ye){const a=Ye[t];if(Object.values(Y).filter(n=>n.category===t&&H.trophies[n.monsterId]>0).length>=a.count){const{effect:n}=a.bonus;n.type==="damage_vs_category"?(e.damageVsCategory[n.category]||(e.damageVsCategory[n.category]=0),e.damageVsCategory[n.category]+=n.value):n.type}}H.activeTrophyBonuses=e,console.log("Bonus de trophées recalculés :",H.activeTrophyBonuses)},getDamageBonus(e){if(!e||!H.activeTrophyBonuses)return 0;let t=0;const a=e.id,s=Y[a]?.category;return H.activeTrophyBonuses.damageVsMonster?.[a]&&(t+=H.activeTrophyBonuses.damageVsMonster[a]),s&&H.activeTrophyBonuses.damageVsCategory?.[s]&&(t+=H.activeTrophyBonuses.damageVsCategory[s]),t}},vi=3,sa=2;let I=null,j=null;function bi(e){I.gameStatus!=="fighting"&&I.gameStatus!=="boss_fight"||!I.activeMonster||!I.activeMonster.isAlive()||(yi(e),I.activeMonster.isAlive()&&(Ci(e),I.activeMonster instanceof St&&_i(I.activeMonster,e)))}function yi(e){const t=I.activeMonster;t&&I.heroes.forEach(a=>{if(a.isFighting())if(a instanceof oe){if(a.attackCycleCooldown>0){a.attackCycleCooldown-=e;return}a.beamInstanceTimer+=e;const n=10/(1+a.beamChargeRate/100)/10;if(a.beamInstanceTimer>=n){a.beamInstanceTimer-=n,a.attackCycleInstance===0&&(a.dpsReferenceValueA=a.getTheoreticalDPS(),a.attackCycleInstance=1);const i=a.attackCycleInstance,o=a.dpsReferenceValueA;let r=0,l=0;if(i<10?(l=.3*i,r=l*o):(l=5,r=l*o,a.attackCycleInstance=0,a.attackCycleCooldown=2),a.attackCycleInstance!==0&&a.attackCycleInstance++,r>0){const u=yt.getDamageBonus(t);r*=1+u,j.emit("protector_beam_fired",{damage:r,chargeFactor:l}),a.history.recordDamageDealt(r,"beam"),t&&t.takeDamage(r)}const d=I.heroes.filter(u=>u.isFighting()).sort((u,h)=>u.hp/u.maxHp-h.hp/h.maxHp)[0];if(d){const u=a.definition.shieldOnHitValue+a.intelligence*.1;d.buffs.applyShield(u,3,j)}}}else{a.attackTimer+=e;const s=1/a.attackSpeed;if(a.attackTimer>=s){a.attackTimer-=s,a.attackCounter++;let n=a.damage,i=!1;a.hasUniqueEffect("SURGICAL_GLOVES")&&a.attackCounter>=5&&(i=!0,a.attackCounter=0,a.history.logEvent("Précision Chirurgicale !","crit")),!i&&Math.random()<a.critChance&&(i=!0),i&&(n*=a.critDamage);const o=yt.getDamageBonus(t);if(n*=1+o,n>0){if(j.emit("hero_dealt_damage",{hero:a,target:t,damage:n}),i?(j.emit("hero_dealt_critical_strike",{hero:a,target:t,damage:n}),a.history.logEvent(`Coup critique ! (${Math.round(n)} dégâts)`,"crit"),a.history.recordDamageDealt(n,"crit")):(a.history.logEvent(`Attaque (${Math.round(n)} dégâts)`,"damage"),a.history.recordDamageDealt(n,"normal")),t instanceof fe){const r=t.currentCount;t.takeDamage(n);const l=t.currentCount;if(l<r){const d=r-l;for(let u=0;u<d;u++)j.emit("monster_unit_defeated",{hpPerMonster:t.hpPerMonster})}}else t.takeDamage(n);a.lifeSteal>0&&a.regenerate(n*a.lifeSteal,"lifesteal",j,I),I.damageBuckets.monster||(I.damageBuckets.monster={damage:0,crit:0,heal:0,timer:.3}),i?I.damageBuckets.monster.crit+=n:I.damageBuckets.monster.damage+=n}a instanceof ie&&(i&&(a.addDoubloon(),I.ui.heroesNeedUpdate=!0),a.hasUniqueEffect("DOUBLOON_PISTOL")&&Math.random()<.1&&(a.addDoubloon(),I.ui.heroesNeedUpdate=!0))}}})}function Ci(e){const t=I.activeMonster;t.attackTimer+=e;const a=1/(t.attackSpeed||t.baseDefinition.baseAttackSpeed);if(t.attackTimer>=a){t.attackTimer-=a;const s=I.heroes.filter(l=>l.isFighting());if(s.length===0)return;const n=xt*Math.pow(Nt,I.dungeonFloor-1),i=I.heroes.find(l=>l instanceof oe&&l.isFighting()),o=t instanceof fe?t.currentCount:1,r=t instanceof fe?t.baseDefinition.baseDamage:t.damage;for(let l=0;l<o;l++){const d=Math.floor(l/vi);if(d>=s.length)continue;let u=s[d],h=u,p=!1;i&&u.id!==i.id&&u.hp/u.maxHp<i.definition.interceptionThreshold&&i.interceptionTimer<=0&&(p=!0,i.interceptionTimer=i.definition.interceptionCooldown,i.history.logEvent(`Intercepte une attaque pour ${u.name} !`,"buff"),j.emit("flavor_text_triggered",{text:"INTERCEPTION !",targetId:i.id,type:"defense-text"}),h=i);const f=h.armor/(h.armor+n);let _=r*(1-f);p&&(_*=1-i.definition.interceptionDamageReduction),h.history.recordDamageMitigated(r-_);let A;if(h instanceof Se?A=h.takeDamage(_,j,r):A=h.takeDamage(_),p&&i.history.recordInterceptedDamage(A.damageTaken),j.emit("hero_took_damage",{hero:h,damage:A.damageTaken}),A.statusChanged&&h.status==="recovering"&&j.emit("ally_defeated",{defeatedHero:h,party:s}),h.thorns>0&&A.damageTaken>0){let x=h.thorns;x*=1+(h.damagePercent||0)/100,t.takeDamage(x),h.history.logEvent(`Épines (${Math.round(x)} dégâts)`,"thorns"),h.history.recordDamageDealt(x,"thorns"),I.damageBuckets.monster||(I.damageBuckets.monster={damage:0,crit:0,heal:0,timer:.3}),I.damageBuckets.monster.damage+=x}A.counterAttackDmg>0&&(h.history.recordDamageDealt(A.counterAttackDmg,"riposte"),t.takeDamage(A.counterAttackDmg)),A.parryDmg>0&&(h.history.recordDamageDealt(A.parryDmg,"riposte"),t.takeDamage(A.parryDmg)),I.damageBuckets[h.id]||(I.damageBuckets[h.id]={damage:0,crit:0,heal:0,timer:.3}),I.damageBuckets[h.id].damage+=A.damageTaken}}}function _i(e,t){if(e.auraTimer+=t,e.auraTimer>=e.auraTickRate){e.auraTimer-=e.auraTickRate;const a=I.heroes.filter(n=>n.isFighting()),s=xt*Math.pow(Nt,I.dungeonFloor-1);a.forEach(n=>{const i=n.armor/(n.armor+s),o=e.auraDamage*(1-i);n.history.recordDamageMitigated(e.auraDamage-o);let r;n instanceof Se?r=n.takeDamage(o,j,e.auraDamage):r=n.takeDamage(o),I.damageBuckets[n.id]||(I.damageBuckets[n.id]={damage:0,crit:0,heal:0,timer:.3}),I.damageBuckets[n.id].damage+=r.damageTaken,r.statusChanged&&n.status==="recovering"&&j.emit("ally_defeated",{defeatedHero:n,party:a})})}}function Ei(){I.heroes.forEach(e=>{e instanceof ie&&e.isFighting()&&(e.addDoubloon(),I.ui.heroesNeedUpdate=!0)})}const Ka={init:(e,t)=>{I=t,j=e,e.on("ui_monster_clicked",()=>{I.activeMonster&&I.activeMonster.isAlive()&&(I.activeMonster.takeDamage(sa),I.damageBuckets.monster||(I.damageBuckets.monster={damage:0,crit:0,heal:0,timer:.3}),I.damageBuckets.monster.damage+=sa)}),e.on("monster_defeated",Ei)},update:bi},na=1;let ut=0,Ya=null;function Si(e){Ya=e}function Ii(e){ut+=e,ut>=na&&(ut-=na,Ya.heroes.forEach(t=>{t.history.collect()}))}let Z=null;const ia=["defective","common","magic","rare","epic","legendary","mythic","artifact"];function Ai(e){if(e&&e.item){const t=e.item;if(Z.options.lootFilterActive&&Z.blacksmithUnlocked){const a=ia.indexOf(t.rarity),s=ia.indexOf(Z.options.lootFilterRarityThreshold);if(a<=s){ee.recycleItemImmediately(t);return}}Z.droppedItems.push(t),Z.droppedItems.length>Z.droppedItemsSize&&Z.droppedItems.shift(),Z.ui.lootNeedsUpdate=!0}}const Ti={init:(e,t)=>{Z=t,$s(),e.on("item_dropped",Ai)}};let pt=null;const Xa={init:(e,t)=>{pt=e,console.log("TavernManager: Initialisation..."),w.init(e,t),ue.init(e,t),z.init(e,t),ae.init(e,t),pt.on("ui_tavern_modal_requested",a=>{}),pt.on("ui_close_tavern_modal_clicked",()=>{})},update:e=>{w.update(e),ue.update(e)}};let Te=null,mt=null;const Wa={init(){Te=document.getElementById("offline-progress-overlay"),mt=document.getElementById("offline-progress-message")},show(e){Te&&mt&&(mt.textContent=e,Te.classList.remove("hidden"))},hide(){Te&&Te.classList.add("hidden")},handleCatchUp(e,t){const s=Math.min(e,300);console.log(`Rattrapage en cours pour ${s.toFixed(1)} secondes...`),this.show(`Calcul de la progression hors ligne (${Math.floor(s)}s)...`);const n=1/60;let i=s;for(;i>0;)t(n),i-=n;console.log("Rattrapage terminé."),this.hide()}};let $e=0,Ct=!1;const xi=10,Ni=5;async function ki(){Ct=!0,C.emit("save_started"),te.save(m),await new Promise(e=>setTimeout(e,500)),C.emit("save_finished"),setTimeout(()=>{C.emit("save_indicator_hide_requested"),Ct=!1},2e3)}function oa(e){za.update(e),ft.update(e),Ka.update(e),ja.update(e),Ii(e),Ba.update(e),Xa.update(e),m.options.autoFightBoss&&m.bossUnlockReached&&!m.pendingBossFight&&!m.bossIsDefeated&&m.gameStatus!=="boss_fight"&&(m.pendingBossFight=!0,C.emit("notification_requested",{message:"Boss enclenché automatiquement !",type:"success"}),m.ui.progressionNeedsUpdate=!0),m.options.autoNextFloor&&m.bossIsDefeated&&ft.advanceToNextFloor(),m.autosaveTimer+=e,m.autosaveTimer>=xi&&!Ct&&(m.autosaveTimer=0,ki())}function _t(e){if($e===0){$e=e,requestAnimationFrame(_t);return}let t=(e-$e)/1e3;t>Ni&&(Wa.handleCatchUp(t,oa),Ua(m),t=1/60),m.isGamePaused||oa(t),wn(m,t),$e=e,requestAnimationFrame(_t)}function Ri(){Wa.init(),requestAnimationFrame(_t)}function Li(){Fn(C,m),$n.init(C),Ba.init(C,m),Qn.init(C,m),Ea.init(C,m),ee.init(C,m),ti.init(C,m),ja.init(C,m),za.init(C,m),Ka.init(C,m),Si(m),ft.init(C,m),Ti.init(C,m),Xa.init(C,m),yt.init(C,m),ae.init(C,m),z.init(C,m),te.init()}function qi(){C.on("game_pause_status_changed",()=>{}),C.on("option_changed",e=>{m.options[e.key]!==void 0&&(m.options[e.key]=e.value)}),C.on("ui_toggle_loot_filter_clicked",e=>{m.options.lootFilterActive=e.active,m.ui.artisanNeedsUpdate=!0,C.emit("notification_requested",{message:`Filtre de butin ${e.active?"activé":"désactivé"}.`,type:"info"})}),C.on("ui_loot_filter_rarity_changed",e=>{m.options.lootFilterRarityThreshold=e.rarity,m.ui.artisanNeedsUpdate=!0,C.emit("notification_requested",{message:`Seuil du filtre de butin : ${e.rarity}.`,type:"info"})}),C.on("ui_toggle_auto_buy_consumables",e=>{m.options.autoBuyTavernConsumables=e.active,C.emit("notification_requested",{message:`Achat auto. de consommables ${e.active?"activé":"désactivé"}.`,type:"info"})}),C.on("ui_toggle_game_pause",()=>{m.isGamePaused=!m.isGamePaused,m.isPausedAtNextEncounter=!1,C.emit("game_pause_status_changed");const e=m.isGamePaused?"Jeu mis en pause.":"Jeu repris.";C.emit("notification_requested",{message:e,type:"info"})})}const Di={start(){console.log("App.start: Démarrage de l'initialisation du jeu.");const e=te.load(),t=ds();if(e){if(console.log("App.start: Sauvegarde normale trouvée. Fusion des états."),Object.assign(m,t),Object.assign(m,e),m.options={...t.options,...e.options||{}},m.resources={...t.resources,...e.resources||{}},m.ui={...t.ui,...e.ui||{}},e.tavern&&(m.tavern.reputation=e.tavern.reputation||t.tavern.reputation,m.tavern.contractCooldowns=e.tavern.contractCooldowns||t.tavern.contractCooldowns,m.tavern.upgrades={...t.tavern.upgrades,...e.tavern.upgrades||{}},e.tavern.specialists))for(const a in e.tavern.specialists)m.tavern.specialists[a]&&(m.tavern.specialists[a].status=e.tavern.specialists[a].status);if(m.activeConsumables=e.activeConsumables||[],m.isGamePaused=e.isGamePaused||!1,m.isPausedAtNextEncounter=e.isPausedAtNextEncounter||!1,e.heroDefinitionsStatus)for(const a in e.heroDefinitionsStatus)m.heroDefinitions[a]&&(m.heroDefinitions[a].status=e.heroDefinitionsStatus[a]);m.heroes=(e.heroes||[]).map(a=>te.hydrateHero(a,m.heroDefinitions,m)).filter(a=>a!==null),m.heroes.forEach(a=>{m.heroDefinitions[a.id.toUpperCase()]&&(m.heroDefinitions[a.id.toUpperCase()].status="recruited")}),m.activeMonster=e.activeMonster?te.hydrateMonster(e.activeMonster):null,m.inventory=(e.inventory||[]).map(a=>te.hydrateItem(a)),m.shopItems=(e.shopItems||[]).map(a=>te.hydrateItem(a))}else{console.log("App.start: Aucune sauvegarde normale trouvée. Initialisation avec l'état par défaut (incluant prestige)."),Object.assign(m,t);const a=m.prestigeUpgrades.STARTING_LEVEL?W.STARTING_LEVEL.effect(m.prestigeUpgrades.STARTING_LEVEL):1;Object.values(m.heroDefinitions).forEach(s=>{if(s.status==="recruited"){let n;switch(s.id){case"priest":n=new Ue(s);break;case"duelist":n=new Se(s);break;case"protector":n=new oe(s);break;case"flibustier":n=new ie(s);break;default:n=new ge(s);break}if(a>1)for(let i=1;i<a;i++)n.levelUp(m,C,!1);n.initialize(m),m.heroes.push(n),m.ui.heroCardState[n.id]||(m.ui.heroCardState[n.id]={isCollapsed:!0})}})}m.itemToEquip=null,m.damageBuckets={},(!m.artisanUnlocked&&m.ui.activeTab==="artisan-panel"||!m.prestigeUnlockConditionMet&&m.ui.activeTab==="prestige-panel"||!m.tavernUnlocked&&m.ui.activeTab==="tavern-panel")&&(m.ui.activeTab="shop-panel"),Li(),qi(),Tt.checkUnlocks(m,C),Ua(m),z.applyAllPermanentEffects(),console.log("App.start: Initialisation du jeu terminée."),C.emit("game_pause_status_changed"),Ri()}},Et=document.createElement("style");Et.textContent=`
    .pause-button {
        position: absolute;
        top: 5px;
        left: 5px;
        z-index: 10;
        padding: 4px 8px;
        font-size: 0.6em;
        background-color: var(--color-accent);
        color: var(--color-text-light);
        border: 2px solid var(--border-color-dark);
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.2s, transform 0.1s;
        box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.3);
    }
    .pause-button:hover {
        background-color: var(--color-accent-dark);
        transform: translateY(-1px);
    }
    .pause-button:active {
        transform: translateY(1px);
        box-shadow: 1px 1px 3px rgba(0, 0, 0, 0.3);
    }
    .pause-button.active-pause {
        background-color: var(--color-error);
    }
    .pause-button.disabled-during-combat {
        opacity: 0.5;
        cursor: not-allowed;
        background-color: var(--color-surface);
        box-shadow: none;
        transform: none;
    }
    .pause-button.disabled-during-combat:hover {
        background-color: var(--color-surface);
        transform: none;
    }
`;document.head.querySelector("style[data-pause-button-styles]")||(Et.setAttribute("data-pause-button-styles",""),document.head.appendChild(Et));document.addEventListener("DOMContentLoaded",()=>{console.log("Le DOM est chargé, lancement du jeu."),Di.start();const e=document.getElementById("pause-game-btn");e&&e.addEventListener("click",t=>{t.stopPropagation(),C.emit("ui_toggle_game_pause")}),C.on("game_pause_status_changed",ra),ra(),document.getElementById("enemy-panel").addEventListener("click",t=>{t.target.id!=="pause-game-btn"&&C.emit("ui_monster_clicked")})});function ra(){const e=document.getElementById("pause-game-btn");e&&(m.isGamePaused?(e.textContent="▶",e.classList.add("active-pause")):(e.textContent="||",e.classList.remove("active-pause")))}
